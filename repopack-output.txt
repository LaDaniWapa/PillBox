================================================================
RepopackPy Output File
================================================================

This file was generated by RepopackPy on: 2025-05-25T08:57:39.048724

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and RepopackPy's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

For more information about RepopackPy, visit: https://github.com/abinthomasonline/repopack-py

================================================================
Repository Structure
================================================================
app/
  src/
    androidTest/
      java/
        com/
          daniela/
            pillbox/
              ExampleInstrumentedTest.kt
    main/
      java/
        com/
          daniela/
            pillbox/
              activity/
                AlarmActivity.kt
                MainActivity.kt
              data/
                models/
                  DTOs.kt
                module/
                  AlarmModule.kt
                  AuthModule.kt
                  StorageModule.kt
                repository/
                  AuthRepository.kt
                  MedicationRepository.kt
              libs/
                colorpicker/
                  data/
                    ColorRange.kt
                    Colors.kt
                  ext/
                    ColorExt.kt
                    drawExt.kt
                  helper/
                    ColorPickerHelper.kt
                    MathHelper.kt
                  pickers/
                    CircleColorPicker.kt
                    ClassicColorPicker.kt
                    ColorSlideBar.kt
                    RingColorPicker.kt
                    SimpleRingColorPicker.kt
                  ColorPicker.kt
              receivers/
                AlarmReceiver.kt
                BootReceiver.kt
              ui/
                components/
                  BasicUiComponents.kt
                  ScreenUiComponents.kt
                screens/
                  AddMedicationScreen.kt
                  AddScheduleScreen.kt
                  BaseScreen.kt
                  HomeScreen.kt
                  LoginScreen.kt
                  MedicationDetailsScreen.kt
                  RegisterScreen.kt
                  StorageScreen.kt
                theme/
                  Color.kt
                  Theme.kt
                  Type.kt
              utils/
                AlarmScheduler.kt
                Helper.kt
              viewmodels/
                AddMedicationViewModel.kt
                AddScheduleViewModel.kt
                AlarmViewModel.kt
                AuthViewModel.kt
                HomeViewModel.kt
                LoginViewModel.kt
                MedicationDetailsViewModel.kt
                RegisterViewModel.kt
                StorageViewModel.kt
              Appwrite.kt
              MainApplication.kt
      res/
        anim/
          overshoot_interpolator.xml
        animator/
          logo_animator.xml
        drawable/
          animated_logo.xml
          ic_launcher_background.xml
          ic_launcher_foreground.xml
          launcher_logo.xml
          pill.xml
          pillbox_logo.xml
        mipmap-anydpi-v26/
          ic_launcher.xml
          ic_launcher_round.xml
        mipmap-hdpi/
          ic_launcher.webp
          ic_launcher_round.webp
        mipmap-mdpi/
          ic_launcher.webp
          ic_launcher_round.webp
        mipmap-xhdpi/
          ic_launcher.webp
          ic_launcher_round.webp
        mipmap-xxhdpi/
          ic_launcher.webp
          ic_launcher_round.webp
        mipmap-xxxhdpi/
          ic_launcher.webp
          ic_launcher_round.webp
        values/
          colors.xml
          font_certs.xml
          ic_launcher_background.xml
          strings.xml
          themes.xml
        values-es/
          strings.xml
        xml/
          backup_rules.xml
          data_extraction_rules.xml
      AndroidManifest.xml
      ic_launcher-playstore.png
    test/
      java/
        com/
          daniela/
            pillbox/
              ExampleUnitTest.kt
  build.gradle.kts
  proguard-rules.pro
gradle/
  wrapper/
    gradle-wrapper.jar
    gradle-wrapper.properties
  libs.versions.toml
build.gradle.kts
gradle.properties
gradlew
gradlew.bat
settings.gradle.kts

================================================================
Repository Files
================================================================

================
File: gradlew
================
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: settings.gradle.kts
================
pluginManagement {
    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android.*")
                includeGroupByRegex("com\\.google.*")
                includeGroupByRegex("androidx.*")
            }
        }
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "PillBox"
include(":app")

================
File: gradle.properties
================
# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. For more details, visit
# https://developer.android.com/r/tools/gradle-multi-project-decoupled-projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# https://developer.android.com/topic/libraries/support-library/androidx-rn
android.useAndroidX=true
# Kotlin code style for this project: "official" or "obsolete":
kotlin.code.style=official
# Enables namespacing of each library's R class so that its R class includes only the
# resources declared in the library itself and none from the library's dependencies,
# thereby reducing the size of the R class for that library
android.nonTransitiveRClass=true

================
File: build.gradle.kts
================
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false

}

================
File: gradle/libs.versions.toml
================
[versions]
agp = "8.9.1"
coreSplashscreen = "1.0.1"
kotlin = "2.1.0"
coreKtx = "1.16.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.1"
composeBom = "2025.04.01"
appwriteSDK = "7.0.0"
materialIconsExtended = "1.7.8"
uiTextGoogleFonts = "1.8.0"
voyagerVersion = "1.1.0-beta03"
koinVersion = "3.5.3"
material3 = "1.3.2"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
androidx-core-splashscreen = { module = "androidx.core:core-splashscreen", version.ref = "coreSplashscreen" }
androidx-material-icons-extended = { module = "androidx.compose.material:material-icons-extended", version.ref = "materialIconsExtended" }
androidx-ui-text-google-fonts = { module = "androidx.compose.ui:ui-text-google-fonts", version.ref = "uiTextGoogleFonts" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }

# Material3
androidx-material3 = { group = "androidx.compose.material3", name = "material3", version.ref = "material3" }

# AppWrite
appwrite-sdk = { module = "io.appwrite:sdk-for-android", version.ref = "appwriteSDK" }

# Voyager
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyagerVersion" }
voyager-screenModel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyagerVersion" }
voyager-transitions = { module = "cafe.adriel.voyager:voyager-transitions", version.ref = "voyagerVersion" }
voyager-koin = { module = "cafe.adriel.voyager:voyager-koin", version.ref = "voyagerVersion" }

#Koin
koin-core = {module = "io.insert-koin:koin-core", version.ref="koinVersion"}
koin-android = { module = "io.insert-koin:koin-android", version.ref = "koinVersion" }
koin-androidx-compose = { module = "io.insert-koin:koin-androidx-compose", version.ref = "koinVersion" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }

================
File: gradle/wrapper/gradle-wrapper.properties
================
#Fri Mar 28 17:00:45 CET 2025
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: app/proguard-rules.pro
================
# Add project specific ProGuard rules here.
# You can control the set of applied configuration files using the
# proguardFiles setting in build.gradle.
#
# For more details, see
#   http://developer.android.com/guide/developing/tools/proguard.html

# If your project uses WebView with JS, uncomment the following
# and specify the fully qualified class name to the JavaScript interface
# class:
#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
#   public *;
#}

# Uncomment this to preserve the line number information for
# debugging stack traces.
#-keepattributes SourceFile,LineNumberTable

# If you keep the line number information, uncomment this to
# hide the original source file name.
#-renamesourcefileattribute SourceFile

================
File: app/build.gradle.kts
================
import java.util.Properties
import org.jetbrains.dokka.gradle.DokkaTask

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("org.jetbrains.dokka") version "1.9.10"
}

tasks.named<DokkaTask>("dokkaHtml").configure {
    outputDirectory.set(file("docs"))
    moduleName.set("PillBox")

    dokkaSourceSets.named("main") {
        perPackageOption {
            matchingRegex.set(".*libs.*")
            suppress.set(true)
        }
        perPackageOption {
            matchingRegex.set("com\\.daniela\\.pillbox\\.ui\\.theme")
            suppress.set(true)
        }
        perPackageOption {
            matchingRegex.set("com\\.daniela\\.pillbox\\.activity")
            suppress.set(true)
        }
    }
}

// Top of your app/build.gradle.kts
val secrets = Properties().apply {
    try {
        load(rootProject.file("secrets.properties").inputStream())
    } catch (e: Exception) {
        logger.warn("secrets.properties not found! Using empty values")
    }
}

android {
    namespace = "com.daniela.pillbox"
    compileSdk = 35

    defaultConfig {
        // Required for BuildConfig access
        buildConfigField(
            "String",
            "ENDPOINT",
            "\"${secrets.getProperty("APPWRITE_ENDPOINT", "")}\""
        )
        buildConfigField(
            "String",
            "PROJECT_ID",
            "\"${secrets.getProperty("APPWRITE_PROJECT_ID", "")}\""
        )
        buildConfigField(
            "String",
            "DATABASE_ID",
            "\"${secrets.getProperty("APPWRITE_DATABASE_ID", "")}\""
        )
        buildConfigField(
            "String",
            "MEDICATIONS_ID",
            "\"${secrets.getProperty("APPWRITE_MEDICATIONS_ID", "")}\""
        )
        buildConfigField(
            "String",
            "SCHEDULES_ID",
            "\"${secrets.getProperty("APPWRITE_SCHEDULES_ID", "")}\""
        )

        applicationId = "com.daniela.pillbox"
        minSdk = 29
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        compose = true
        buildConfig = true
    }
}

dependencies {
    // AppWrite
    implementation(libs.appwrite.sdk)

    // Voyager
    implementation(libs.voyager.navigator)
    implementation(libs.voyager.screenModel)
    implementation(libs.voyager.transitions)
    implementation(libs.voyager.koin)

    // Google things
    implementation(libs.androidx.ui.text.google.fonts)
    implementation(libs.androidx.material.icons.extended)

    // Splash screen
    implementation(libs.androidx.core.splashscreen)

    // Koin
    implementation(libs.koin.android)
    implementation(libs.koin.androidx.compose)
    implementation(libs.koin.core)

    // Material3
    implementation(libs.androidx.material3)

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

================
File: app/src/test/java/com/daniela/pillbox/ExampleUnitTest.kt
================
package com.daniela.pillbox

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}

================
File: app/src/androidTest/java/com/daniela/pillbox/ExampleInstrumentedTest.kt
================
package com.daniela.pillbox

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.daniela.pillbox", appContext.packageName)
    }
}

================
File: app/src/main/AndroidManifest.xml
================
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- For alarms -->
    <uses-permission android:name="android.permission.SCHEDULE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.USE_EXACT_ALARM" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <!-- For notifications -->
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
    <uses-permission android:name="android.permission.VIBRATE" />

    <application
        android:name=".MainApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.App.Starting"
        tools:targetApi="31">
        <activity
            android:name=".activity.MainActivity"
            android:exported="true"
            android:theme="@style/Theme.App.Starting">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <receiver
            android:name=".receivers.AlarmReceiver"
            android:enabled="true"
            android:exported="false">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED"/>
            </intent-filter>
        </receiver>

        <receiver
            android:name=".receivers.BootReceiver"
            android:enabled="true"
            android:exported="false">
            <intent-filter>
                <action android:name="android.intent.action.BOOT_COMPLETED" />
            </intent-filter>
        </receiver>
    </application>

</manifest>

================
File: app/src/main/res/values-es/strings.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">PillBox</string>
    <string name="welcome_msg">Bienvenid@!</string>
    <string name="email">Correo</string>
    <string name="email_example">ejemplo@gmail.com</string>
    <string name="password">Contraseña</string>
    <string name="login">Iniciar sesión</string>
    <string name="no_account_signup">¿Aún no tienes cuenta? Crea una</string>
    <string name="name">Nombre</string>
    <string name="name_example">Daniela</string>
    <string name="repeat_password">Repetir contraseña</string>
    <string name="signup">Registrarse</string>
    <string name="already_have_account_login">\"Ya tienes una cuenta? Inicia sesión\"</string>
    <string name="error_name_required">Por favor ingresa tu nombre</string>
    <string name="error_email_required">Por favor ingresa tu correo electrónico</string>
    <string name="error_email_invalid">Formato de correo inválido</string>
    <string name="error_password_required">Por favor ingresa una contraseña</string>
    <string name="error_password_length">La contraseña debe tener al menos 8 caracteres</string>
    <string name="error_confirm_password_required">Por favor confirma tu contraseña</string>
    <string name="error_passwords_mismatch">Las contraseñas no coinciden</string>
    <string name="error_invalid_credentials">Correo o contraseña incorrectos</string>
    <string name="error_invalid_data">Datos no validos</string>
    <string name="error_login_failed">Error al iniciar sesión: %s</string>

    <string name="error_400">Datos de solicitud inválidos</string>
    <string name="error_401">Credenciales inválidas</string>
    <string name="error_409">El correo ya está registrado</string>
    <string name="error_500">Error del servidor</string>
    <string name="error_network">Fallo de conexión</string>
    <string name="error_unknown">Error inesperado: %s</string>

    <string name="morning_greeting">Buenos días</string>
    <string name="afternoon_greeting">Buenas tardes</string>
    <string name="evening_greeting">Buenas tardes</string>
    <string name="night_greeting">Buenas noches</string>
    <string name="greeting_format">¡%1$s, %2$s!</string>
    <string name="back">Atrás</string>
    <string name="new_medication">Nuevo Medicamento</string>
    <string name="medication_name">Nombre del Medicamento</string>
    <string name="dosage">Dosis</string>
    <string name="unit">Unidad</string>
    <string name="type">Tipo</string>
    <string name="stock_quantity">Cantidad en Stock</string>
    <string name="instructions">Instrucciones</string>
    <string name="notes">Notas</string>
    <string name="save_medication">Guardar Medicamento</string>
    <string name="medication_storage">Almacenamiento</string>
    <string name="search_medications">Buscar medicamentos...</string>
    <string name="clear">Limpiar</string>
    <string name="there_was_an_error">Hubo un error</string>
    <string name="no_medications_found">No se han encontrado medicamentos</string>
    <string name="add_medication">Añadir medicamento</string>
    <string name="delete_medication">Borrar medicamento</string>
    <string name="out">Agotado</string>
    <string name="low">Escaso: %1$s</string>
    <string name="left">"Quedan: %1$s "</string>
    <string name="are_you_sure_you_want_to_delete_this_schedule">¿Estás seguro de que quieres borrar este horario?</string>
    <string name="delete_schedule">¿Borrar horario?</string>
    <string name="edit_schedules">Editar Horario</string>
    <string name="add_schedule">Añadir Horario</string>
    <string name="medication_details">Detalles del Medicamento</string>
    <string name="edit">Editar</string>
    <string name="current_stock">Stock Actual</string>
    <string name="not_tracked">Sin seguimiento</string>
    <string name="out_of_stock">Agotado</string>
    <string name="remaining">%1$s restante</string>
    <string name="medication_type">Tipo de Medicamento</string>
    <string name="additional_notes">Notas Adicionales</string>
    <string name="as_needed">A demanda</string>
    <string name="delete">Borrar</string>
    <string name="times">Veces:</string>
    <string name="units">%1$s unidades</string>
    <string name="menu">Menú</string>
    <string name="storage">Almacén</string>
    <string name="reload">Refrescar</string>
    <string name="logout">Cerrar sesión</string>
    <string name="today_s_medications">Medicamentos de hoy</string>
    <string name="add_alarm">Añadir Alarma</string>
    <string name="add_another_schedule_pattern">Añadir Más Días</string>
    <string name="cancel">Cancelar</string>
    <string name="save_schedule">Guardar Horario</string>
    <string name="on_these_days">En estos días</string>
    <string name="amount">Cantidad</string>
    <string name="remove_time">Eliminar hora</string>
    <string name="add_another_time">Añadir Otra Hora</string>
    <string name="remove_this_pattern">Eliminar Este Horario</string>
    <string name="are_you_sure_you_want_to_delete_this_medication">Are you sure you want to delete this medication?</string>
    <string name="ask_delete_medication">Delete medication?</string>
    <string name="user_not_authenticated">User not authenticated</string>
    <string name="failed_to_load_medications">Failed to load medications: %1$s</string>
    <string name="filters">All,Low Stock,Tablets,Liquids,Capsules,Injections,Creams,Others</string>
</resources>

================
File: app/src/main/res/xml/backup_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>

================
File: app/src/main/res/xml/data_extraction_rules.xml
================
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>

================
File: app/src/main/res/values/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="ic_launcher_background">#6A5AAF</color>
</resources>

================
File: app/src/main/res/values/themes.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.PillBox" parent="android:Theme.Material.Light.NoActionBar" />
    
    <style name="Theme.App.Starting" parent="Theme.SplashScreen">
        <item name="windowSplashScreenBackground">@color/purple_200</item>
        <item name="postSplashScreenTheme">@style/Theme.PillBox</item>
        <item name="windowSplashScreenAnimatedIcon">@drawable/animated_logo</item>
        <item name="tint">@color/white</item>
    </style>
</resources>

================
File: app/src/main/res/values/colors.xml
================
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>

================
File: app/src/main/res/values/font_certs.xml
================
<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2022 The Android Open Source Project

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<resources>
    <array name="com_google_android_gms_fonts_certs">
        <item>@array/com_google_android_gms_fonts_certs_dev</item>
        <item>@array/com_google_android_gms_fonts_certs_prod</item>
    </array>
    <string-array name="com_google_android_gms_fonts_certs_dev">
        <item>
            MIIEqDCCA5CgAwIBAgIJANWFuGx90071MA0GCSqGSIb3DQEBBAUAMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTAeFw0wODA0MTUyMzM2NTZaFw0zNTA5MDEyMzM2NTZaMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbTCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBANbOLggKv+IxTdGNs8/TGFy0PTP6DHThvbbR24kT9ixcOd9W+EaBPWW+wPPKQmsHxajtWjmQwWfna8mZuSeJS48LIgAZlKkpFeVyxW0qMBujb8X8ETrWy550NaFtI6t9+u7hZeTfHwqNvacKhp1RbE6dBRGWynwMVX8XW8N1+UjFaq6GCJukT4qmpN2afb8sCjUigq0GuMwYXrFVee74bQgLHWGJwPmvmLHC69EH6kWr22ijx4OKXlSIx2xT1AsSHee70w5iDBiK4aph27yH3TxkXy9V89TDdexAcKk/cVHYNnDBapcavl7y0RiQ4biu8ymM8Ga/nmzhRKya6G0cGw8CAQOjgfwwgfkwHQYDVR0OBBYEFI0cxb6VTEM8YYY6FbBMvAPyT+CyMIHJBgNVHSMEgcEwgb6AFI0cxb6VTEM8YYY6FbBMvAPyT+CyoYGapIGXMIGUMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEQMA4GA1UEChMHQW5kcm9pZDEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDEiMCAGCSqGSIb3DQEJARYTYW5kcm9pZEBhbmRyb2lkLmNvbYIJANWFuGx90071MAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEEBQADggEBABnTDPEF+3iSP0wNfdIjIz1AlnrPzgAIHVvXxunW7SBrDhEglQZBbKJEk5kT0mtKoOD1JMrSu1xuTKEBahWRbqHsXclaXjoBADb0kkjVEJu/Lh5hgYZnOjvlba8Ld7HCKePCVePoTJBdI4fvugnL8TsgK05aIskyY0hKI9L8KfqfGTl1lzOv2KoWD0KWwtAWPoGChZxmQ+nBli+gwYMzM1vAkP+aayLe0a1EQimlOalO762r0GXO0ks+UeXde2Z4e+8S/pf7pITEI/tP+MxJTALw9QUWEv9lKTk+jkbqxbsh8nfBUapfKqYn0eidpwq2AzVp3juYl7//fKnaPhJD9gs=
        </item>
    </string-array>
    <string-array name="com_google_android_gms_fonts_certs_prod">
        <item>
            MIIEQzCCAyugAwIBAgIJAMLgh0ZkSjCNMA0GCSqGSIb3DQEBBAUAMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDAeFw0wODA4MjEyMzEzMzRaFw0zNjAxMDcyMzEzMzRaMHQxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpDYWxpZm9ybmlhMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtHb29nbGUgSW5jLjEQMA4GA1UECxMHQW5kcm9pZDEQMA4GA1UEAxMHQW5kcm9pZDCCASAwDQYJKoZIhvcNAQEBBQADggENADCCAQgCggEBAKtWLgDYO6IIrgqWbxJOKdoR8qtW0I9Y4sypEwPpt1TTcvZApxsdyxMJZ2JORland2qSGT2y5b+3JKkedxiLDmpHpDsz2WCbdxgxRczfey5YZnTJ4VZbH0xqWVW/8lGmPav5xVwnIiJS6HXk+BVKZF+JcWjAsb/GEuq/eFdpuzSqeYTcfi6idkyugwfYwXFU1+5fZKUaRKYCwkkFQVfcAs1fXA5V+++FGfvjJ/CxURaSxaBvGdGDhfXE28LWuT9ozCl5xw4Yq5OGazvV24mZVSoOO0yZ31j7kYvtwYK6NeADwbSxDdJEqO4k//0zOHKrUiGYXtqw/A0LFFtqoZKFjnkCAQOjgdkwgdYwHQYDVR0OBBYEFMd9jMIhF1Ylmn/Tgt9r45jk14alMIGmBgNVHSMEgZ4wgZuAFMd9jMIhF1Ylmn/Tgt9r45jk14aloXikdjB0MQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLR29vZ2xlIEluYy4xEDAOBgNVBAsTB0FuZHJvaWQxEDAOBgNVBAMTB0FuZHJvaWSCCQDC4IdGZEowjTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBAUAA4IBAQBt0lLO74UwLDYKqs6Tm8/yzKkEu116FmH4rkaymUIE0P9KaMftGlMexFlaYjzmB2OxZyl6euNXEsQH8gjwyxCUKRJNexBiGcCEyj6z+a1fuHHvkiaai+KL8W1EyNmgjmyy8AW7P+LLlkR+ho5zEHatRbM/YAnqGcFh5iZBqpknHf1SKMXFh4dd239FJ1jWYfbMDMy3NS5CTMQ2XFI1MvcyUTdZPErjQfTbQe3aDQsQcafEQPD+nqActifKZ0Np0IS9L9kR/wbNvyz6ENwPiTrjV2KRkEjH78ZMcUQXg0L3BYHJ3lc69Vs5Ddf9uUGGMYldX3WfMBEmh/9iFBDAaTCK
        </item>
    </string-array>
</resources>

================
File: app/src/main/res/values/strings.xml
================
<resources>
    <string name="app_name">PillBox</string>
    <string name="welcome_msg">Welcome!</string>
    <string name="email">Email</string>
    <string name="email_example">example@gmail.com</string>
    <string name="password">Password</string>
    <string name="password_example" translatable="false">*****</string>
    <string name="login">Log in</string>
    <string name="no_account_signup">Don\'t have an account? Sign up</string>
    <string name="name">Name</string>
    <string name="name_example">Lily</string>
    <string name="repeat_password">Repeat password</string>
    <string name="signup">Sign up</string>
    <string name="already_have_account_login">Already have an account? Log in</string>
    <string name="error_name_required">Please enter your name</string>
    <string name="error_email_required">Please enter your email</string>
    <string name="error_email_invalid">Invalid email format</string>
    <string name="error_password_required">Please enter a password</string>
    <string name="error_password_length">Password must be at least 8 characters</string>
    <string name="error_confirm_password_required">Please confirm your password</string>
    <string name="error_passwords_mismatch">Passwords don\'t match</string>
    <string name="error_invalid_credentials">Invalid email or password</string>
    <string name="error_invalid_data">Invalid input data</string>
    <string name="error_login_failed">Login failed: %s</string>

    <string name="error_400">Invalid request data</string>
    <string name="error_401">Invalid credentials</string>
    <string name="error_409">Email already exists</string>
    <string name="error_500">Server error</string>
    <string name="error_network">Network connection failed</string>
    <string name="error_unknown">An unexpected error occurred: %s</string>

    <string name="morning_greeting">Good morning</string>
    <string name="afternoon_greeting">Good afternoon</string>
    <string name="evening_greeting">Good evening</string>
    <string name="night_greeting">Good night</string>
    <string name="greeting_format">%1$s, %2$s!</string>

    <string name="back">Back</string>
    <string name="new_medication">New Medication</string>
    <string name="medication_name">Medication Name</string>
    <string name="dosage">Dosage</string>
    <string name="unit">Unit</string>
    <string name="type">Type</string>
    <string name="stock_quantity">Stock Quantity</string>
    <string name="instructions">Instructions</string>
    <string name="notes">Notes</string>
    <string name="save_medication">Save Medication</string>
    <string name="medication_storage">Medication Storage</string>
    <string name="search_medications">Search medicationsâ€¦</string>
    <string name="clear">Clear</string>
    <string name="there_was_an_error">There was an error</string>
    <string name="no_medications_found">No medications found</string>
    <string name="add_medication">Add medication</string>
    <string name="delete_medication">Delete medication</string>
    <string name="out">Out</string>
    <string name="low">Low: %1$s</string>
    <string name="left">%1$s left</string>
    <string name="logo" translatable="false">Logo</string>
    <string name="are_you_sure_you_want_to_delete_this_schedule">Are you sure you want to delete this schedule?</string>
    <string name="delete_schedule">Delete Schedule?</string>
    <string name="edit_schedules">Edit Schedules</string>
    <string name="add_schedule">Add Schedule</string>
    <string name="medication_details">Medication Details</string>
    <string name="edit">Edit</string>
    <string name="current_stock">Current Stock</string>
    <string name="not_tracked">Not tracked</string>
    <string name="out_of_stock">Out of stock</string>
    <string name="remaining">%1$s remaining</string>
    <string name="medication_type">Medication Type</string>
    <string name="additional_notes">Additional Notes</string>
    <string name="as_needed">As needed</string>
    <string name="delete">Delete</string>
    <string name="times">Times:</string>
    <string name="units">%1$s units</string>
    <string name="menu">Menu</string>
    <string name="storage">Storage</string>
    <string name="reload">Reload</string>
    <string name="logout">Logout</string>
    <string name="today_s_medications">Today\'s Medications</string>
    <string name="add_alarm">Add Alarm</string>
    <string name="add_another_schedule_pattern">Schedule Other Days</string>
    <string name="cancel">Cancel</string>
    <string name="save_schedule">Save Schedule</string>
    <string name="on_these_days">On these days</string>
    <string name="amount">Amount</string>
    <string name="remove_time">Remove time</string>
    <string name="add_another_time">Add Another Time</string>
    <string name="remove_this_pattern">Remove This Schedule</string>
    <string name="are_you_sure_you_want_to_delete_this_medication">Are you sure you want to delete this medication?</string>
    <string name="ask_delete_medication">Delete medication?</string>
    <string name="user_not_authenticated">User not authenticated</string>
    <string name="failed_to_load_medications">Failed to load medications: %1$s</string>
    <string name="filters">All,Low Stock,Tablets,Liquids,Capsules,Injections,Creams,Others</string>
</resources>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
    <monochrome android:drawable="@drawable/launcher_logo"/>
</adaptive-icon>

================
File: app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
================
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@color/ic_launcher_background"/>
    <foreground android:drawable="@drawable/ic_launcher_foreground"/>
    <monochrome android:drawable="@drawable/launcher_logo"/>
</adaptive-icon>

================
File: app/src/main/res/drawable/pill.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="40dp"
    android:height="40dp"
    android:viewportWidth="960"
    android:viewportHeight="960">
  <path
      android:pathData="M663.33,615.67 L774,504q32,-32 49,-73t17,-86q0,-94 -65.5,-159.5T615,120q-45,0 -86,17t-73,49L344.33,296.67l319,319ZM345,840q45,0 86,-17t73,-49l111.67,-110.67 -319,-319L186,456q-32,32 -49,73t-17,86q0,94 65.5,159.5T345,840Z"
      android:fillColor="#e8eaed"/>
</vector>

================
File: app/src/main/res/drawable/launcher_logo.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="660dp"
    android:height="660dp"
    android:viewportWidth="660"
    android:viewportHeight="660">
    <group
        android:scaleX="0.572"
        android:scaleY="0.572"
        android:translateX="139.49222"
        android:translateY="142.98778">
        <path
            android:fillColor="#ffffff"
            android:fillType="evenOdd"
            android:pathData="m615.8,215.1c1.7,0 5.6,0.5 8.5,1.1 3.8,0.9 6.3,2.3 9.2,5.3 2.9,2.9 4.4,5.4 5.2,9 0.9,3.9 0.9,6.1 -0.1,10 -0.9,3.7 -6.5,12.9 -40.8,64l6.4,6.5c3.5,3.6 14.7,15 24.9,25.5 10.3,10.4 19.2,20.1 19.9,21.5 0.8,1.4 1.9,4.5 2.5,7 0.9,3.4 0.9,5.6 0,9 -0.6,2.5 -2,5.8 -3.1,7.4 -1,1.5 -3.2,3.6 -4.9,4.6 -1.6,1 -4.8,2.3 -7,2.9 -2.2,0.5 -15,2 -28.5,3.1 -20.5,1.8 -25.5,1.9 -30.5,0.9 -5.8,-1.1 -6.4,-1.5 -15.8,-11.3 -5.9,-6.1 -10.1,-9.7 -10.5,-9.1 -0.5,0.6 -3.5,5.2 -6.8,10.4 -3.2,5.2 -7.2,10.5 -8.9,11.7 -1.6,1.3 -5,2.7 -7.5,3.3 -2.5,0.6 -15.1,2 -28,3.2 -12.9,1.1 -25.7,1.8 -28.5,1.5 -2.7,-0.4 -6.2,-1.3 -7.7,-2.1 -2.6,-1.4 -3.2,-1.3 -9,1.4 -3.5,1.6 -11.2,4 -17.3,5.4 -6,1.4 -15,3.1 -20,3.8 -5.1,0.7 -13.7,0.9 -20,0.6 -7.2,-0.4 -14.9,-1.6 -22.5,-3.5 -6.3,-1.6 -13.5,-3.9 -16,-5.2 -2.5,-1.2 -6.5,-3.8 -9,-5.6 -2.5,-1.8 -4.9,-3.4 -5.5,-3.4 -0.5,0 -1.7,1.1 -2.5,2.6 -0.8,1.5 -3.6,4.5 -6.1,6.8 -2.5,2.2 -7,5.4 -10,7 -3,1.6 -8.5,3.8 -12.4,4.8 -4.6,1.1 -26.2,3.4 -62,6.4 -49.1,4.2 -55.6,4.5 -60.5,3.4 -4.2,-1 -6.5,-2.3 -9.5,-5.4 -3.1,-3.1 -4.3,-5.4 -5.3,-9.6 -0.6,-3 -1.4,-8.6 -1.7,-12.5 -0.4,-3.9 -0.8,-8 -1.1,-9.2 -0.4,-2.3 -0.5,-2.2 -5.6,1.2 -2.9,2 -8,4.4 -11.3,5.4 -3.3,1.1 -9.6,2.4 -14,3 -4.4,0.5 -14.7,1.5 -38,3.4l0.4,8.1c0.2,4.4 -0.2,9.9 -0.7,12.1 -0.7,2.3 -2.7,5.6 -4.9,7.8 -2.2,2.2 -5.7,4.4 -8.3,5.2 -2.5,0.7 -13.7,2.1 -25,3 -17.3,1.5 -21.4,1.6 -26,0.5 -4.2,-1 -6.5,-2.3 -9.5,-5.4 -3.1,-3.1 -4.4,-5.4 -5.3,-9.6 -0.6,-3 -3.9,-34.3 -7.3,-69.5 -4.1,-43.3 -5.9,-66.1 -5.5,-70.5 0.4,-4.2 1.4,-7.6 2.7,-9.5 1.1,-1.6 3.5,-4 5.2,-5.2 1.8,-1.1 5.7,-2.6 8.7,-3.2 3,-0.6 27.1,-2.9 53.5,-5.1 26.4,-2.2 50.1,-4 52.8,-4 2.6,0 8.4,0.9 13,2.1 4.5,1.1 9.8,2.9 11.7,4.1 3.4,1.9 3.5,1.9 4.8,0.1 0.6,-1 2.7,-3.3 4.5,-5.1 1.7,-1.8 4.8,-3.8 6.7,-4.3 1.9,-0.6 15.2,-2.1 29.5,-3.4 14.3,-1.3 38.6,-3.4 54,-4.6 26.9,-2.2 28.3,-2.2 36,-0.6 4.4,1 10.9,3.1 14.5,4.9 3.8,1.9 9,5.6 18.5,15l2.5,-3.4c1.3,-1.8 4,-4.8 6,-6.7 1.9,-1.9 6.2,-5.2 9.5,-7.4 3.3,-2.3 8.7,-5.3 12,-6.8 3.3,-1.6 10.5,-3.9 16,-5.3 5.5,-1.4 13.2,-3 17,-3.7 3.9,-0.6 12.9,-1.2 20,-1.2 10.2,-0.1 15.3,0.4 34,4.6l3,-2c1.7,-1.1 5.5,-2.6 8.5,-3.2 3,-0.6 16.3,-2 29.5,-3.1 20.4,-1.7 24.7,-1.8 29,-0.7 2.8,0.7 6.4,2.3 8,3.6 1.7,1.3 5.4,5.1 8.4,8.5 2.9,3.3 6.1,6.9 7,7.9 1.5,1.7 2,1.2 8.4,-9 4.3,-6.8 8.1,-11.6 10.3,-13 1.8,-1.3 6,-2.8 9.2,-3.4 3.1,-0.6 14.7,-1.9 25.7,-2.9 11,-0.9 21.5,-1.8 23.3,-1.9zM564,229.8c-2.7,1.3 -5.3,4.8 -12.5,16.4 -4.9,8.2 -9.3,14.8 -9.7,14.8 -0.5,0 -6.1,-5.9 -12.5,-13.1 -8.9,-9.8 -12.7,-13.3 -15.3,-14 -2.6,-0.8 -10.1,-0.5 -28.5,1.1 -13.7,1.1 -26.7,2.5 -28.7,3 -2.2,0.6 -4.7,2.2 -5.8,3.8l-2.1,2.7c-12.7,-3.5 -20.9,-5.1 -26.4,-5.7 -7.5,-0.9 -12.9,-0.9 -22,0 -6.6,0.6 -16.5,2.3 -22,3.6 -5.6,1.5 -14.1,4.6 -19.5,7.3 -7.4,3.6 -11.1,6.2 -16.6,11.7 -4.9,5 -8.2,9.4 -11,14.9l-3.9,7.8c-1.6,-5.1 -3.3,-8.7 -4.8,-11.3 -1.5,-2.7 -4.6,-6.7 -6.9,-8.9 -2.4,-2.3 -6.1,-5.2 -8.3,-6.4 -2.2,-1.3 -6.7,-3.1 -10,-3.9 -3.3,-0.9 -8.7,-1.6 -12,-1.6 -3.3,0 -27.8,1.8 -54.5,4.1 -26.7,2.2 -50,4.6 -51.9,5.2 -1.9,0.7 -4.4,2.5 -5.5,4 -1.8,2.4 -2.1,4 -1.8,10.3l0.2,7.4c-5.4,-5.4 -9.4,-8.6 -12.2,-10.5 -2.9,-2 -8.2,-4.4 -11.8,-5.5 -3.7,-1.2 -9.3,-2 -13,-2 -3.6,0 -28.3,1.8 -55,4.1 -26.7,2.2 -50,4.6 -51.9,5.2 -1.9,0.7 -4.4,2.5 -5.5,4 -1.6,2.1 -2.1,4.1 -1.9,8 0.1,2.9 2.9,34 6.3,69.2 3.3,35.2 6.5,65.5 7,67.3 0.6,1.9 2.3,4 4.3,5.2 2.2,1.4 4.9,2 8.7,2 3,0 13,-0.7 22.3,-1.5 9.3,-0.8 18.3,-2.2 20.2,-3 1.9,-0.8 4.2,-2.5 5,-3.7 0.8,-1.3 1.6,-3.9 1.7,-5.8 0.1,-1.9 -0.1,-7.9 -0.5,-13.2 -0.6,-8.9 -0.5,-9.8 1.1,-9.8 0.9,0 12.2,-0.9 25,-2 12.7,-1.1 25.3,-2.5 28,-3.1 2.6,-0.7 6.7,-2.2 9.2,-3.4 2.5,-1.3 6.7,-4.3 9.4,-6.6 2.7,-2.4 6.4,-6.6 8.2,-9.4l3.3,-5c0.8,7.8 1.8,17.6 2.7,27 0.9,9.4 2.2,18.5 3,20.3 0.8,1.7 2.8,3.9 4.4,4.7 1.7,0.8 5.1,1.5 7.8,1.5 2.6,0 28.3,-2 57.2,-4.4 39.9,-3.4 54.1,-5 59,-6.5 3.6,-1.1 8.8,-3.6 11.5,-5.7 2.8,-2 6.7,-5.7 8.8,-8.3 2.1,-2.5 4.5,-6.6 5.4,-9.1l1.7,-4.5c8,7.8 13,11.6 16.2,13.5 3.3,1.9 8.7,4.5 12.2,5.7 3.4,1.3 10.1,3 15,3.8 4.8,0.8 13.1,1.5 18.5,1.5 5.3,0 13.2,-0.5 17.5,-1.1 4.2,-0.6 12,-2.2 17.2,-3.5 5.2,-1.3 12.9,-4.1 17.1,-6.2l7.7,-3.7c5.7,5.1 7.1,5.5 12,5.5 3.1,0 15.6,-0.9 27.7,-1.9 12.1,-1.1 23.2,-2.4 24.8,-3 1.5,-0.6 3.6,-2.1 4.7,-3.3 1.1,-1.3 5.7,-8.5 10.2,-16l8.3,-13.7c18,20.3 24.5,26.6 26.5,27.6 3.3,1.5 4.9,1.5 26,-0.1 12.4,-1 25.2,-2.2 28.5,-2.7 4.5,-0.7 6.7,-1.6 8.6,-3.7 1.5,-1.5 2.9,-3.8 3.2,-5.2 0.4,-1.4 0.2,-4.1 -0.3,-6 -0.8,-2.6 -8.1,-10.7 -28.8,-31.9l-27.7,-28.5c34.5,-51.2 43.7,-65.9 44.1,-67.8 0.3,-2 0,-4.8 -1,-7 -1.1,-2.6 -2.7,-4.3 -5.1,-5.3 -1.9,-0.8 -5.9,-1.4 -8.7,-1.4 -2.9,0.1 -15,1 -26.8,2.1 -15.2,1.3 -22.5,2.4 -25,3.6zM616.3,235.1c2,0 3.7,0.1 3.7,0.4 0,0.3 -10.6,16.3 -23.5,35.5 -12.9,19.3 -23.5,35.3 -23.5,35.8 0,0.4 13.5,14.6 30,31.7 16.5,17.1 29.9,31.1 29.7,31.2 -0.1,0.1 -10.8,1.1 -23.7,2.3 -12.9,1.1 -24.4,2 -25.5,2 -1.3,0 -7.4,-5.9 -34.5,-36l-1.8,2.8c-1,1.5 -6.7,10.7 -23.2,38.2l-5.2,0.5c-2.9,0.3 -12.9,1.2 -22.3,2 -9.3,0.8 -18.7,1.5 -24.5,1.5l23.3,-34.8c12.9,-19.1 23.7,-35.3 24,-36 0.5,-0.7 -7.1,-9.2 -20,-22.4 -11.4,-11.7 -25,-25.7 -30.3,-31 -5.2,-5.4 -9.3,-9.9 -9,-10.2 0.3,-0.2 9.3,-1.1 20,-2 10.7,-0.9 22,-1.9 30.5,-2.9l16.5,18.2c9.1,10 16.6,18.2 16.8,18.1 0.1,0 5.7,-9.1 12.5,-20.1 6.7,-11.1 12.7,-20.4 13.2,-20.6 0.6,-0.2 10.5,-1.2 22,-2.2 11.6,-1 22.7,-1.9 24.8,-2zM416,249.6c5.9,0.2 14,1.3 18.5,2.4 4.4,1.2 10.9,3.6 14.5,5.5 3.6,1.9 8.6,5.6 11.2,8.2 2.6,2.7 6.3,7.5 8.3,10.8 2,3.3 4.6,9.4 5.9,13.5 1.3,4.1 3,11.8 3.7,17 0.7,5.2 1.3,15.1 1.3,22 0.1,7.5 -0.4,14.7 -1.3,18 -0.7,3 -2.6,8.3 -4.2,11.8 -1.6,3.4 -5.3,8.8 -8.3,11.9 -2.9,3.2 -8.2,7.5 -11.7,9.6 -3.5,2.1 -10,4.9 -14.4,6.3 -4.4,1.4 -12.3,3.2 -17.5,4 -5.2,0.7 -13.5,1.4 -18.5,1.4 -4.9,0 -13,-0.7 -18,-1.5 -6.2,-1.1 -11.7,-2.8 -17.5,-5.6 -6,-2.9 -10.2,-5.8 -14.1,-9.8 -3.4,-3.5 -7.1,-8.6 -9.6,-13.6 -2.2,-4.4 -4.7,-11.4 -5.7,-15.5 -0.9,-4.1 -2,-11.6 -2.6,-16.5 -0.5,-4.9 -1,-13.3 -1,-18.5 0,-6.1 0.7,-12.2 1.9,-17 1,-4.1 3.1,-10 4.6,-13 1.6,-3 5.1,-7.9 7.9,-10.8 2.8,-3 7.1,-6.7 9.6,-8.2 2.5,-1.6 7.4,-4.1 11,-5.5 3.6,-1.4 9.9,-3.2 14,-4.1 4.1,-0.9 10.7,-2 14.5,-2.5 3.9,-0.4 11.7,-0.6 17.5,-0.3zM386.5,298.4c-2.2,1.2 -5.1,4.1 -6.5,6.2 -2.3,3.5 -2.5,4.9 -2.4,13.9 0,5.5 0.5,11.9 1.2,14.3 0.7,2.3 2.9,6 5,8.2 2.2,2.5 5.5,4.7 8.2,5.6 2.5,0.8 8.1,1.4 12.5,1.4 4.4,0 10.5,-0.6 13.5,-1.3 3,-0.7 7.5,-2.4 10,-3.8q4.5,-2.4 7,-6.9c2.2,-3.9 2.5,-5.6 2.4,-13 -0.1,-4.7 -0.7,-10.5 -1.3,-13 -0.7,-2.5 -2.5,-6.2 -3.9,-8.3 -1.6,-2.2 -4.6,-4.7 -7.2,-5.9 -3.2,-1.5 -7,-2.2 -13,-2.5 -5.1,-0.1 -11.1,0.3 -15,1.2 -3.6,0.9 -8.3,2.6 -10.5,3.9zM285,263.3c7.9,0.2 10.4,0.7 15,2.9 3.1,1.4 7.2,4.5 9.3,6.9 2.1,2.4 4.7,6.4 5.8,8.9 1.2,2.5 2.6,7 3.1,10 0.6,3 0.8,8.6 0.6,12.5 -0.3,4.8 -1.3,8.7 -3.1,12.5 -1.5,3 -3.2,6.3 -3.9,7.4 -0.8,1.1 -0.9,2 -0.3,2.2 0.6,0.2 3.2,1.8 5.9,3.6 2.7,1.8 6.3,5.3 8,7.8 1.6,2.5 3.8,7.2 4.9,10.5 1.2,3.9 1.9,9 1.9,14.5 0,6.5 -0.5,9.9 -2.3,14.5 -1.4,3.9 -3.9,7.6 -6.8,10.6 -3,3 -6.6,5.3 -10.6,6.8 -5.1,1.9 -13.8,2.9 -61.2,6.9 -30.3,2.6 -55.4,4.5 -55.7,4.2 -0.3,-0.3 -3.2,-29.2 -6.5,-64.3 -3.4,-35 -6.1,-65.3 -6.1,-67.2 0,-3.1 0.3,-3.5 2.8,-3.6 1.5,0 22.3,-1.8 46.2,-3.9 23.9,-2.1 47.8,-3.8 53,-3.7zM227.5,300.5c0,4.3 0.1,7.6 0.3,10.3 0.1,2.6 0.6,5.2 1,5.8 0.5,0.8 6.3,0.6 21.2,-0.7 11.3,-1 21.7,-1.8 23.3,-1.9 1.5,0 3.6,-0.9 4.7,-2 1.2,-1.2 2,-3.3 2,-5.5 0,-1.9 -0.5,-4.5 -1.1,-5.7 -0.7,-1.3 -1.7,-2.6 -2.3,-3 -0.6,-0.4 -3.6,-0.7 -6.6,-0.6 -3,0 -13.8,0.8 -24,1.7zM233.8,352.9c-1.6,0.1 -1.7,0.9 -1.2,7.8 0.4,4.3 0.9,8.1 1.3,8.5 0.3,0.4 12.5,-0.2 27.1,-1.4 16.9,-1.3 27.3,-2.6 28.8,-3.5 1.2,-0.7 2.5,-2.7 2.8,-4.6 0.4,-1.9 0.1,-4.4 -0.7,-6.1 -0.8,-1.6 -2.3,-3.4 -3.5,-4 -1.5,-0.9 -8.2,-0.6 -27.5,1 -14,1.2 -26.2,2.3 -27.1,2.3zM134.5,276.4c8.8,0.2 10.7,0.6 15.5,3 3,1.6 8,5.4 11,8.5 3,3.1 6.9,8.3 8.7,11.6 1.8,3.3 4.1,9.6 5.3,14 1.3,5 2,11.2 2,16.5 0,4.7 -0.7,11.2 -1.5,14.5 -0.9,3.3 -2.6,8.2 -4,11 -1.3,2.7 -3.8,6.8 -5.6,9 -1.7,2.2 -5,5.4 -7.3,7.2 -2.2,1.8 -6.1,3.9 -8.6,4.8 -2.5,0.8 -18,2.6 -35.5,4 -17,1.5 -31.2,2.9 -31.5,3.1 -0.3,0.3 0.2,7.6 1.1,16.2 0.8,8.6 1.5,15.8 1.5,15.9 -0.1,0.2 -9.2,1.1 -20.3,2 -11.1,1 -20.4,1.6 -20.7,1.3 -0.3,-0.3 -3.2,-29.2 -6.5,-64.3 -3.4,-35 -6.1,-65.3 -6.1,-67.2 0,-3.1 0.3,-3.5 2.8,-3.6 1.5,0 22.3,-1.8 46.2,-3.9 24.5,-2.2 47.9,-3.8 53.5,-3.6zM77.2,321.2c-0.2,0.2 0.1,4.9 0.5,10.4 0.4,5.6 1,10.4 1.3,10.7 0.3,0.3 10.6,-0.3 23,-1.3 12.4,-1.1 23.5,-2 24.8,-2 1.3,0 3.7,-1.4 5.3,-3 2.2,-2.3 2.9,-3.9 2.9,-7 0,-2.2 -0.7,-5.4 -1.5,-7 -0.8,-1.7 -2.4,-3.5 -3.5,-4 -1.1,-0.6 -4.1,-1 -6.7,-0.9 -2.7,0.1 -14,1 -25.3,2 -11.3,1 -20.6,2 -20.8,2.1zM496.4,303c9.5,9.5 9.6,9.5 7.9,12 -0.9,1.4 -4.2,6.3 -12.8,19.3l-0.7,-10.4c-0.4,-5.7 -1.2,-13.8 -1.8,-17.9 -0.6,-4.1 -1.3,-8.6 -1.7,-10 -0.4,-1.9 1.8,-0.2 9.1,7zM410,304.2c3,-0.1 7.1,0.4 9,1.1 2.4,0.8 4.1,2.3 5.2,4.7 1.2,2.3 1.9,6.3 2,11.6 0.3,7 0,8.5 -1.7,10.3 -1.1,1.2 -4.2,2.9 -7,3.7 -2.7,0.8 -8.1,1.4 -12,1.4 -3.8,0 -8.5,-0.4 -10.2,-1 -2.1,-0.6 -3.9,-2.1 -4.8,-4 -0.8,-1.7 -1.8,-6.5 -2.1,-10.8 -0.5,-5 -0.3,-8.5 0.5,-10 0.6,-1.2 2.6,-2.9 4.4,-3.8 1.7,-0.9 5,-2 7.2,-2.4 2.2,-0.4 6.5,-0.8 9.5,-0.8zM397.2,319c-0.2,2.5 -0.1,5.5 0.2,6.7 0.6,2.2 1,2.3 9.6,2 5.5,-0.1 9.4,-0.7 10.2,-1.5 1,-1 1.1,-2.5 0.3,-7l-1,-5.7c-10.8,-0.3 -15.1,0 -16.5,0.4 -2.1,0.6 -2.5,1.4 -2.8,5.1z" />
    </group>
</vector>

================
File: app/src/main/res/drawable/animated_logo.xml
================
<?xml version="1.0" encoding="utf-8"?>
<animated-vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:drawable="@drawable/pillbox_logo">
<target
    android:animation="@animator/logo_animator"
    android:name="main_group"/>
</animated-vector>

================
File: app/src/main/res/drawable/ic_launcher_background.xml
================
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

================
File: app/src/main/res/drawable/ic_launcher_foreground.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="660"
    android:viewportHeight="660">
  <group android:scaleX="0.572"
      android:scaleY="0.572"
      android:translateX="139.49222"
      android:translateY="142.98778">
    <path
        android:pathData="m615.8,215.1c1.7,0 5.6,0.5 8.5,1.1 3.8,0.9 6.3,2.3 9.2,5.3 2.9,2.9 4.4,5.4 5.2,9 0.9,3.9 0.9,6.1 -0.1,10 -0.9,3.7 -6.5,12.9 -40.8,64l6.4,6.5c3.5,3.6 14.7,15 24.9,25.5 10.3,10.4 19.2,20.1 19.9,21.5 0.8,1.4 1.9,4.5 2.5,7 0.9,3.4 0.9,5.6 0,9 -0.6,2.5 -2,5.8 -3.1,7.4 -1,1.5 -3.2,3.6 -4.9,4.6 -1.6,1 -4.8,2.3 -7,2.9 -2.2,0.5 -15,2 -28.5,3.1 -20.5,1.8 -25.5,1.9 -30.5,0.9 -5.8,-1.1 -6.4,-1.5 -15.8,-11.3 -5.9,-6.1 -10.1,-9.7 -10.5,-9.1 -0.5,0.6 -3.5,5.2 -6.8,10.4 -3.2,5.2 -7.2,10.5 -8.9,11.7 -1.6,1.3 -5,2.7 -7.5,3.3 -2.5,0.6 -15.1,2 -28,3.2 -12.9,1.1 -25.7,1.8 -28.5,1.5 -2.7,-0.4 -6.2,-1.3 -7.7,-2.1 -2.6,-1.4 -3.2,-1.3 -9,1.4 -3.5,1.6 -11.2,4 -17.3,5.4 -6,1.4 -15,3.1 -20,3.8 -5.1,0.7 -13.7,0.9 -20,0.6 -7.2,-0.4 -14.9,-1.6 -22.5,-3.5 -6.3,-1.6 -13.5,-3.9 -16,-5.2 -2.5,-1.2 -6.5,-3.8 -9,-5.6 -2.5,-1.8 -4.9,-3.4 -5.5,-3.4 -0.5,0 -1.7,1.1 -2.5,2.6 -0.8,1.5 -3.6,4.5 -6.1,6.8 -2.5,2.2 -7,5.4 -10,7 -3,1.6 -8.5,3.8 -12.4,4.8 -4.6,1.1 -26.2,3.4 -62,6.4 -49.1,4.2 -55.6,4.5 -60.5,3.4 -4.2,-1 -6.5,-2.3 -9.5,-5.4 -3.1,-3.1 -4.3,-5.4 -5.3,-9.6 -0.6,-3 -1.4,-8.6 -1.7,-12.5 -0.4,-3.9 -0.8,-8 -1.1,-9.2 -0.4,-2.3 -0.5,-2.2 -5.6,1.2 -2.9,2 -8,4.4 -11.3,5.4 -3.3,1.1 -9.6,2.4 -14,3 -4.4,0.5 -14.7,1.5 -38,3.4l0.4,8.1c0.2,4.4 -0.2,9.9 -0.7,12.1 -0.7,2.3 -2.7,5.6 -4.9,7.8 -2.2,2.2 -5.7,4.4 -8.3,5.2 -2.5,0.7 -13.7,2.1 -25,3 -17.3,1.5 -21.4,1.6 -26,0.5 -4.2,-1 -6.5,-2.3 -9.5,-5.4 -3.1,-3.1 -4.4,-5.4 -5.3,-9.6 -0.6,-3 -3.9,-34.3 -7.3,-69.5 -4.1,-43.3 -5.9,-66.1 -5.5,-70.5 0.4,-4.2 1.4,-7.6 2.7,-9.5 1.1,-1.6 3.5,-4 5.2,-5.2 1.8,-1.1 5.7,-2.6 8.7,-3.2 3,-0.6 27.1,-2.9 53.5,-5.1 26.4,-2.2 50.1,-4 52.8,-4 2.6,0 8.4,0.9 13,2.1 4.5,1.1 9.8,2.9 11.7,4.1 3.4,1.9 3.5,1.9 4.8,0.1 0.6,-1 2.7,-3.3 4.5,-5.1 1.7,-1.8 4.8,-3.8 6.7,-4.3 1.9,-0.6 15.2,-2.1 29.5,-3.4 14.3,-1.3 38.6,-3.4 54,-4.6 26.9,-2.2 28.3,-2.2 36,-0.6 4.4,1 10.9,3.1 14.5,4.9 3.8,1.9 9,5.6 18.5,15l2.5,-3.4c1.3,-1.8 4,-4.8 6,-6.7 1.9,-1.9 6.2,-5.2 9.5,-7.4 3.3,-2.3 8.7,-5.3 12,-6.8 3.3,-1.6 10.5,-3.9 16,-5.3 5.5,-1.4 13.2,-3 17,-3.7 3.9,-0.6 12.9,-1.2 20,-1.2 10.2,-0.1 15.3,0.4 34,4.6l3,-2c1.7,-1.1 5.5,-2.6 8.5,-3.2 3,-0.6 16.3,-2 29.5,-3.1 20.4,-1.7 24.7,-1.8 29,-0.7 2.8,0.7 6.4,2.3 8,3.6 1.7,1.3 5.4,5.1 8.4,8.5 2.9,3.3 6.1,6.9 7,7.9 1.5,1.7 2,1.2 8.4,-9 4.3,-6.8 8.1,-11.6 10.3,-13 1.8,-1.3 6,-2.8 9.2,-3.4 3.1,-0.6 14.7,-1.9 25.7,-2.9 11,-0.9 21.5,-1.8 23.3,-1.9zM564,229.8c-2.7,1.3 -5.3,4.8 -12.5,16.4 -4.9,8.2 -9.3,14.8 -9.7,14.8 -0.5,0 -6.1,-5.9 -12.5,-13.1 -8.9,-9.8 -12.7,-13.3 -15.3,-14 -2.6,-0.8 -10.1,-0.5 -28.5,1.1 -13.7,1.1 -26.7,2.5 -28.7,3 -2.2,0.6 -4.7,2.2 -5.8,3.8l-2.1,2.7c-12.7,-3.5 -20.9,-5.1 -26.4,-5.7 -7.5,-0.9 -12.9,-0.9 -22,0 -6.6,0.6 -16.5,2.3 -22,3.6 -5.6,1.5 -14.1,4.6 -19.5,7.3 -7.4,3.6 -11.1,6.2 -16.6,11.7 -4.9,5 -8.2,9.4 -11,14.9l-3.9,7.8c-1.6,-5.1 -3.3,-8.7 -4.8,-11.3 -1.5,-2.7 -4.6,-6.7 -6.9,-8.9 -2.4,-2.3 -6.1,-5.2 -8.3,-6.4 -2.2,-1.3 -6.7,-3.1 -10,-3.9 -3.3,-0.9 -8.7,-1.6 -12,-1.6 -3.3,0 -27.8,1.8 -54.5,4.1 -26.7,2.2 -50,4.6 -51.9,5.2 -1.9,0.7 -4.4,2.5 -5.5,4 -1.8,2.4 -2.1,4 -1.8,10.3l0.2,7.4c-5.4,-5.4 -9.4,-8.6 -12.2,-10.5 -2.9,-2 -8.2,-4.4 -11.8,-5.5 -3.7,-1.2 -9.3,-2 -13,-2 -3.6,0 -28.3,1.8 -55,4.1 -26.7,2.2 -50,4.6 -51.9,5.2 -1.9,0.7 -4.4,2.5 -5.5,4 -1.6,2.1 -2.1,4.1 -1.9,8 0.1,2.9 2.9,34 6.3,69.2 3.3,35.2 6.5,65.5 7,67.3 0.6,1.9 2.3,4 4.3,5.2 2.2,1.4 4.9,2 8.7,2 3,0 13,-0.7 22.3,-1.5 9.3,-0.8 18.3,-2.2 20.2,-3 1.9,-0.8 4.2,-2.5 5,-3.7 0.8,-1.3 1.6,-3.9 1.7,-5.8 0.1,-1.9 -0.1,-7.9 -0.5,-13.2 -0.6,-8.9 -0.5,-9.8 1.1,-9.8 0.9,0 12.2,-0.9 25,-2 12.7,-1.1 25.3,-2.5 28,-3.1 2.6,-0.7 6.7,-2.2 9.2,-3.4 2.5,-1.3 6.7,-4.3 9.4,-6.6 2.7,-2.4 6.4,-6.6 8.2,-9.4l3.3,-5c0.8,7.8 1.8,17.6 2.7,27 0.9,9.4 2.2,18.5 3,20.3 0.8,1.7 2.8,3.9 4.4,4.7 1.7,0.8 5.1,1.5 7.8,1.5 2.6,0 28.3,-2 57.2,-4.4 39.9,-3.4 54.1,-5 59,-6.5 3.6,-1.1 8.8,-3.6 11.5,-5.7 2.8,-2 6.7,-5.7 8.8,-8.3 2.1,-2.5 4.5,-6.6 5.4,-9.1l1.7,-4.5c8,7.8 13,11.6 16.2,13.5 3.3,1.9 8.7,4.5 12.2,5.7 3.4,1.3 10.1,3 15,3.8 4.8,0.8 13.1,1.5 18.5,1.5 5.3,0 13.2,-0.5 17.5,-1.1 4.2,-0.6 12,-2.2 17.2,-3.5 5.2,-1.3 12.9,-4.1 17.1,-6.2l7.7,-3.7c5.7,5.1 7.1,5.5 12,5.5 3.1,0 15.6,-0.9 27.7,-1.9 12.1,-1.1 23.2,-2.4 24.8,-3 1.5,-0.6 3.6,-2.1 4.7,-3.3 1.1,-1.3 5.7,-8.5 10.2,-16l8.3,-13.7c18,20.3 24.5,26.6 26.5,27.6 3.3,1.5 4.9,1.5 26,-0.1 12.4,-1 25.2,-2.2 28.5,-2.7 4.5,-0.7 6.7,-1.6 8.6,-3.7 1.5,-1.5 2.9,-3.8 3.2,-5.2 0.4,-1.4 0.2,-4.1 -0.3,-6 -0.8,-2.6 -8.1,-10.7 -28.8,-31.9l-27.7,-28.5c34.5,-51.2 43.7,-65.9 44.1,-67.8 0.3,-2 0,-4.8 -1,-7 -1.1,-2.6 -2.7,-4.3 -5.1,-5.3 -1.9,-0.8 -5.9,-1.4 -8.7,-1.4 -2.9,0.1 -15,1 -26.8,2.1 -15.2,1.3 -22.5,2.4 -25,3.6zM616.3,235.1c2,0 3.7,0.1 3.7,0.4 0,0.3 -10.6,16.3 -23.5,35.5 -12.9,19.3 -23.5,35.3 -23.5,35.8 0,0.4 13.5,14.6 30,31.7 16.5,17.1 29.9,31.1 29.7,31.2 -0.1,0.1 -10.8,1.1 -23.7,2.3 -12.9,1.1 -24.4,2 -25.5,2 -1.3,0 -7.4,-5.9 -34.5,-36l-1.8,2.8c-1,1.5 -6.7,10.7 -23.2,38.2l-5.2,0.5c-2.9,0.3 -12.9,1.2 -22.3,2 -9.3,0.8 -18.7,1.5 -24.5,1.5l23.3,-34.8c12.9,-19.1 23.7,-35.3 24,-36 0.5,-0.7 -7.1,-9.2 -20,-22.4 -11.4,-11.7 -25,-25.7 -30.3,-31 -5.2,-5.4 -9.3,-9.9 -9,-10.2 0.3,-0.2 9.3,-1.1 20,-2 10.7,-0.9 22,-1.9 30.5,-2.9l16.5,18.2c9.1,10 16.6,18.2 16.8,18.1 0.1,0 5.7,-9.1 12.5,-20.1 6.7,-11.1 12.7,-20.4 13.2,-20.6 0.6,-0.2 10.5,-1.2 22,-2.2 11.6,-1 22.7,-1.9 24.8,-2zM416,249.6c5.9,0.2 14,1.3 18.5,2.4 4.4,1.2 10.9,3.6 14.5,5.5 3.6,1.9 8.6,5.6 11.2,8.2 2.6,2.7 6.3,7.5 8.3,10.8 2,3.3 4.6,9.4 5.9,13.5 1.3,4.1 3,11.8 3.7,17 0.7,5.2 1.3,15.1 1.3,22 0.1,7.5 -0.4,14.7 -1.3,18 -0.7,3 -2.6,8.3 -4.2,11.8 -1.6,3.4 -5.3,8.8 -8.3,11.9 -2.9,3.2 -8.2,7.5 -11.7,9.6 -3.5,2.1 -10,4.9 -14.4,6.3 -4.4,1.4 -12.3,3.2 -17.5,4 -5.2,0.7 -13.5,1.4 -18.5,1.4 -4.9,0 -13,-0.7 -18,-1.5 -6.2,-1.1 -11.7,-2.8 -17.5,-5.6 -6,-2.9 -10.2,-5.8 -14.1,-9.8 -3.4,-3.5 -7.1,-8.6 -9.6,-13.6 -2.2,-4.4 -4.7,-11.4 -5.7,-15.5 -0.9,-4.1 -2,-11.6 -2.6,-16.5 -0.5,-4.9 -1,-13.3 -1,-18.5 0,-6.1 0.7,-12.2 1.9,-17 1,-4.1 3.1,-10 4.6,-13 1.6,-3 5.1,-7.9 7.9,-10.8 2.8,-3 7.1,-6.7 9.6,-8.2 2.5,-1.6 7.4,-4.1 11,-5.5 3.6,-1.4 9.9,-3.2 14,-4.1 4.1,-0.9 10.7,-2 14.5,-2.5 3.9,-0.4 11.7,-0.6 17.5,-0.3zM386.5,298.4c-2.2,1.2 -5.1,4.1 -6.5,6.2 -2.3,3.5 -2.5,4.9 -2.4,13.9 0,5.5 0.5,11.9 1.2,14.3 0.7,2.3 2.9,6 5,8.2 2.2,2.5 5.5,4.7 8.2,5.6 2.5,0.8 8.1,1.4 12.5,1.4 4.4,0 10.5,-0.6 13.5,-1.3 3,-0.7 7.5,-2.4 10,-3.8q4.5,-2.4 7,-6.9c2.2,-3.9 2.5,-5.6 2.4,-13 -0.1,-4.7 -0.7,-10.5 -1.3,-13 -0.7,-2.5 -2.5,-6.2 -3.9,-8.3 -1.6,-2.2 -4.6,-4.7 -7.2,-5.9 -3.2,-1.5 -7,-2.2 -13,-2.5 -5.1,-0.1 -11.1,0.3 -15,1.2 -3.6,0.9 -8.3,2.6 -10.5,3.9zM285,263.3c7.9,0.2 10.4,0.7 15,2.9 3.1,1.4 7.2,4.5 9.3,6.9 2.1,2.4 4.7,6.4 5.8,8.9 1.2,2.5 2.6,7 3.1,10 0.6,3 0.8,8.6 0.6,12.5 -0.3,4.8 -1.3,8.7 -3.1,12.5 -1.5,3 -3.2,6.3 -3.9,7.4 -0.8,1.1 -0.9,2 -0.3,2.2 0.6,0.2 3.2,1.8 5.9,3.6 2.7,1.8 6.3,5.3 8,7.8 1.6,2.5 3.8,7.2 4.9,10.5 1.2,3.9 1.9,9 1.9,14.5 0,6.5 -0.5,9.9 -2.3,14.5 -1.4,3.9 -3.9,7.6 -6.8,10.6 -3,3 -6.6,5.3 -10.6,6.8 -5.1,1.9 -13.8,2.9 -61.2,6.9 -30.3,2.6 -55.4,4.5 -55.7,4.2 -0.3,-0.3 -3.2,-29.2 -6.5,-64.3 -3.4,-35 -6.1,-65.3 -6.1,-67.2 0,-3.1 0.3,-3.5 2.8,-3.6 1.5,0 22.3,-1.8 46.2,-3.9 23.9,-2.1 47.8,-3.8 53,-3.7zM227.5,300.5c0,4.3 0.1,7.6 0.3,10.3 0.1,2.6 0.6,5.2 1,5.8 0.5,0.8 6.3,0.6 21.2,-0.7 11.3,-1 21.7,-1.8 23.3,-1.9 1.5,0 3.6,-0.9 4.7,-2 1.2,-1.2 2,-3.3 2,-5.5 0,-1.9 -0.5,-4.5 -1.1,-5.7 -0.7,-1.3 -1.7,-2.6 -2.3,-3 -0.6,-0.4 -3.6,-0.7 -6.6,-0.6 -3,0 -13.8,0.8 -24,1.7zM233.8,352.9c-1.6,0.1 -1.7,0.9 -1.2,7.8 0.4,4.3 0.9,8.1 1.3,8.5 0.3,0.4 12.5,-0.2 27.1,-1.4 16.9,-1.3 27.3,-2.6 28.8,-3.5 1.2,-0.7 2.5,-2.7 2.8,-4.6 0.4,-1.9 0.1,-4.4 -0.7,-6.1 -0.8,-1.6 -2.3,-3.4 -3.5,-4 -1.5,-0.9 -8.2,-0.6 -27.5,1 -14,1.2 -26.2,2.3 -27.1,2.3zM134.5,276.4c8.8,0.2 10.7,0.6 15.5,3 3,1.6 8,5.4 11,8.5 3,3.1 6.9,8.3 8.7,11.6 1.8,3.3 4.1,9.6 5.3,14 1.3,5 2,11.2 2,16.5 0,4.7 -0.7,11.2 -1.5,14.5 -0.9,3.3 -2.6,8.2 -4,11 -1.3,2.7 -3.8,6.8 -5.6,9 -1.7,2.2 -5,5.4 -7.3,7.2 -2.2,1.8 -6.1,3.9 -8.6,4.8 -2.5,0.8 -18,2.6 -35.5,4 -17,1.5 -31.2,2.9 -31.5,3.1 -0.3,0.3 0.2,7.6 1.1,16.2 0.8,8.6 1.5,15.8 1.5,15.9 -0.1,0.2 -9.2,1.1 -20.3,2 -11.1,1 -20.4,1.6 -20.7,1.3 -0.3,-0.3 -3.2,-29.2 -6.5,-64.3 -3.4,-35 -6.1,-65.3 -6.1,-67.2 0,-3.1 0.3,-3.5 2.8,-3.6 1.5,0 22.3,-1.8 46.2,-3.9 24.5,-2.2 47.9,-3.8 53.5,-3.6zM77.2,321.2c-0.2,0.2 0.1,4.9 0.5,10.4 0.4,5.6 1,10.4 1.3,10.7 0.3,0.3 10.6,-0.3 23,-1.3 12.4,-1.1 23.5,-2 24.8,-2 1.3,0 3.7,-1.4 5.3,-3 2.2,-2.3 2.9,-3.9 2.9,-7 0,-2.2 -0.7,-5.4 -1.5,-7 -0.8,-1.7 -2.4,-3.5 -3.5,-4 -1.1,-0.6 -4.1,-1 -6.7,-0.9 -2.7,0.1 -14,1 -25.3,2 -11.3,1 -20.6,2 -20.8,2.1zM496.4,303c9.5,9.5 9.6,9.5 7.9,12 -0.9,1.4 -4.2,6.3 -12.8,19.3l-0.7,-10.4c-0.4,-5.7 -1.2,-13.8 -1.8,-17.9 -0.6,-4.1 -1.3,-8.6 -1.7,-10 -0.4,-1.9 1.8,-0.2 9.1,7zM410,304.2c3,-0.1 7.1,0.4 9,1.1 2.4,0.8 4.1,2.3 5.2,4.7 1.2,2.3 1.9,6.3 2,11.6 0.3,7 0,8.5 -1.7,10.3 -1.1,1.2 -4.2,2.9 -7,3.7 -2.7,0.8 -8.1,1.4 -12,1.4 -3.8,0 -8.5,-0.4 -10.2,-1 -2.1,-0.6 -3.9,-2.1 -4.8,-4 -0.8,-1.7 -1.8,-6.5 -2.1,-10.8 -0.5,-5 -0.3,-8.5 0.5,-10 0.6,-1.2 2.6,-2.9 4.4,-3.8 1.7,-0.9 5,-2 7.2,-2.4 2.2,-0.4 6.5,-0.8 9.5,-0.8zM397.2,319c-0.2,2.5 -0.1,5.5 0.2,6.7 0.6,2.2 1,2.3 9.6,2 5.5,-0.1 9.4,-0.7 10.2,-1.5 1,-1 1.1,-2.5 0.3,-7l-1,-5.7c-10.8,-0.3 -15.1,0 -16.5,0.4 -2.1,0.6 -2.5,1.4 -2.8,5.1z"
        android:fillColor="#ffffff"
        android:fillType="evenOdd"/>
  </group>
</vector>

================
File: app/src/main/res/drawable/pillbox_logo.xml
================
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="1280dp"
    android:height="1024dp"
    android:viewportWidth="1280"
    android:viewportHeight="1024">
    <group android:name="main_group" android:pivotX="640" android:pivotY="512">
        <path
            android:fillColor="#FFFFFF"
            android:pathData="m151.2,268.8c-1.6,1.7 -3.9,6.5 -5.6,11.8 -1.6,4.9 -3.9,9.8 -5,11 -1.2,1.1 -4.8,3 -8.1,4.2 -3.3,1.2 -7.5,3 -9.4,3.9 -1.9,1 -3.9,2.5 -4.4,3.3 -0.5,0.8 -0.7,2.7 -0.3,4.2 0.5,2.2 1.8,3.4 5.9,5.2 2.8,1.3 7.2,3 9.7,3.9 2.5,0.9 5.5,2.7 6.6,3.9 1.2,1.3 3.2,5.4 4.4,9.3 1.2,3.9 3.3,8.9 4.6,11.2 2,3.6 2.9,4.3 5.4,4.3 2.1,0 3.6,-0.8 5,-2.8 1.2,-1.5 3.4,-6.9 5,-12 2.3,-6.9 3.7,-9.7 5.8,-11.2 1.5,-1.2 5,-2.8 7.7,-3.7 2.8,-0.9 6.7,-2.4 8.8,-3.4 2,-1.1 4.1,-2.8 4.7,-3.9 0.7,-1.5 0.6,-2.7 -0.5,-4.5 -0.8,-1.4 -3.9,-3.6 -6.7,-5 -2.9,-1.4 -5.9,-2.5 -6.5,-2.5 -0.7,0 -3,-0.8 -5,-1.9 -2.8,-1.3 -4.4,-3.1 -6,-6.7 -1.2,-2.7 -2.5,-6.3 -2.9,-7.9 -0.4,-1.6 -1.5,-4.7 -2.5,-6.8 -1.1,-2 -2.9,-4.4 -4.1,-5.2 -1.3,-0.8 -2.7,-1.5 -3.1,-1.5 -0.5,0 -2.1,1.3 -3.5,2.8z" />
        <path
            android:fillColor="#FFFFFF"
            android:pathData="m227.3,192.5c-1.3,0.8 -3.4,3.4 -4.7,5.8 -1.3,2.3 -4.3,10 -6.7,17.2 -2.6,7.8 -5.3,14.2 -6.9,15.9 -1.4,1.6 -3.2,3.2 -4,3.7 -0.8,0.4 -6.7,2.6 -13,4.9 -6.3,2.2 -13,5.1 -14.9,6.3 -1.9,1.2 -4.1,3.7 -4.8,5.5 -0.9,2.3 -1,3.9 -0.3,5.7 0.6,1.4 2.5,3.6 4.2,4.9 1.8,1.3 7.8,4 13.3,6 5.5,2 11.8,4.4 13.9,5.4 2.2,0.9 4.9,3.1 6.2,4.7 1.2,1.6 4.1,8.6 6.4,15.5 2.3,6.9 4.9,13.9 5.7,15.5 0.8,1.6 2.7,4.2 4.2,5.8 1.7,1.8 3.6,2.7 5.6,2.8 1.6,0 4.2,-0.9 5.7,-2.1 1.6,-1.1 3.9,-4.4 5.2,-7.3 1.3,-2.8 4,-10.1 5.9,-16.2 2,-6.1 4.5,-12.2 5.7,-13.8 1.1,-1.5 3.7,-3.5 5.7,-4.6 2.1,-1 7.6,-3.2 12.3,-4.9 4.7,-1.6 10.4,-3.9 12.7,-5.1 2.4,-1.1 5,-3.1 5.8,-4.4 0.8,-1.2 1.5,-3.6 1.5,-5.2 0,-1.7 -0.9,-4 -2,-5.3 -1.1,-1.2 -3,-2.9 -4.3,-3.6 -1.2,-0.8 -6.9,-3.1 -12.7,-5.1 -5.8,-2 -12.3,-4.7 -14.5,-5.9 -2.9,-1.7 -4.6,-3.7 -6.2,-7.2 -1.2,-2.7 -3.4,-8.7 -4.8,-13.4 -1.5,-4.7 -3.9,-10.8 -5.3,-13.5 -1.4,-2.8 -3.6,-6 -4.9,-7.3 -1.3,-1.2 -3.5,-2.2 -5.1,-2.2 -1.5,0 -3.7,0.7 -5,1.5z" />
        <path
            android:fillColor="#FFFFFF"
            android:fillType="evenOdd"
            android:pathData="m917.5,238.6c2.2,0.2 13.2,1.3 24.5,2.4 11.3,1.1 27.3,2.9 35.5,4 8.3,1.2 22.9,3.4 32.5,5.1 9.6,1.6 24.9,4.6 34,6.5 9.1,1.9 23,5.3 31,7.4 8,2.2 20.1,5.7 27,7.8 6.9,2.2 17.5,5.7 23.5,8 6,2.2 15,5.7 20,7.7 5,2 15.1,6.6 22.5,10.1 7.4,3.6 18.7,9.6 25,13.4 6.3,3.7 15.8,9.8 21,13.6 5.2,3.7 11.3,8.3 13.5,10.2 2.2,2 8.9,8.6 14.9,14.6 6.1,6.2 13.5,15.1 16.8,20.1 3.3,4.9 8,13.2 10.4,18.3 2.4,5 4.4,9.9 4.4,10.7 0,0.8 0.6,2.7 1.4,4.3 0.7,1.5 2.1,7 3,12.2 0.9,5.2 1.6,13.4 1.6,18.3 0,4.8 -0.7,13.1 -1.6,18.5 -0.8,5.3 -2.6,12.8 -3.9,16.7 -1.2,3.9 -3.5,9.9 -4.9,13.5 -1.5,3.6 -4,9.1 -8.6,18l6.4,6.3c4.8,4.6 6.7,7.3 7.6,10.7 0.7,2.5 1.2,5.4 1.2,6.5 0,1.1 -0.5,3.9 -1.1,6.3 -0.6,2.4 -2.6,5.7 -4.6,7.7 -2.2,2.2 -5.4,4 -8.8,5 -2.8,0.8 -11.7,2 -19.7,2.6 -8,0.7 -15,1.5 -15.7,1.8 -0.6,0.3 -5.4,4.7 -10.5,9.6 -5.1,5 -13.8,12.9 -19.3,17.6 -5.5,4.7 -15,12.3 -21,16.9 -6,4.5 -18,12.8 -26.5,18.5 -8.5,5.6 -16.9,11 -21.8,14l15.7,18 17.8,4.9c9.8,2.6 18.7,5.3 19.8,5.8 1.1,0.6 3.3,2.2 4.8,3.7 1.6,1.4 3.5,4.2 4.3,6.1 0.8,1.9 1.4,5.1 1.4,7 0,1.9 -1.2,5.5 -2.7,8 -1.5,2.5 -4.9,7.6 -7.6,11.5 -2.8,3.9 -7,9.6 -13.7,18.5l1.1,17.3c0.6,9.4 1.2,19 1.1,21.2 0,2.2 -0.7,6.3 -1.7,9 -0.9,2.8 -3.1,8.1 -4.9,12 -1.7,3.8 -4.9,10.6 -7.2,15 -3,6 -5.1,8.7 -8.3,11 -3.4,2.4 -5.6,3.1 -10.4,3.3 -5.6,0.3 -8.2,-0.3 -26.2,-6.7 -11,-3.9 -20.7,-7.1 -21.5,-7.1 -0.8,0 -10.4,3.1 -21.3,7 -15,5.3 -21,7 -25,7 -2.8,0 -7,-0.8 -9.2,-1.8 -2.2,-1 -5.2,-3.4 -6.7,-5.3 -1.4,-1.9 -3.2,-5.6 -3.9,-8.4 -1,-3.9 -1,-7.8 -0.1,-18 0.7,-7.1 1.3,-16.6 1.5,-29l-11.2,-15.2c-7.1,-9.8 -11.6,-16.9 -12.4,-19.8 -0.9,-3.5 -0.9,-5.1 0,-7.7 0.7,-1.8 1.3,-3.9 1.3,-4.5 0,-0.9 -0.5,-1 -1.8,-0.4 -0.9,0.5 -9.6,3.8 -19.2,7.4 -9.6,3.6 -18.6,6.8 -20,7.1 -2.1,0.5 -2.2,0.5 -0.5,-0.3 1.1,-0.6 11.2,-4.9 22.5,-9.6 11.3,-4.8 21.3,-9.4 22.3,-10.3 1,-0.9 4.4,-6.2 7.6,-11.7 3.3,-5.5 7.4,-11.4 9.2,-13.1 1.9,-1.6 4.3,-3.3 5.4,-3.7 1.1,-0.3 9.7,-2.7 19,-5.2 9.3,-2.5 17.5,-5.1 18.1,-5.8 0.6,-0.7 6.7,-7.7 13.6,-15.7 9.5,-11.1 13.4,-14.9 16.6,-16.2 2.3,-1 5.9,-1.8 7.9,-1.8 2.1,0 5.4,0.5 7.3,1 1.9,0.6 4.9,2.5 9.9,7.5l4.3,-3.5c2.4,-1.9 7.9,-6.3 12.3,-9.9 4.4,-3.5 11.4,-9.3 15.5,-13 4.1,-3.6 11.3,-10.4 16,-15.1 4.7,-4.7 11.8,-12.2 15.8,-16.7 3.9,-4.6 6.6,-8.3 5.9,-8.3 -0.6,0 -2.9,-0.5 -5,-1 -2.4,-0.7 -7.4,-4.2 -14.4,-10.2 -5.8,-5.1 -12.2,-10.7 -17.8,-15.7l-11,13.6c-6,7.4 -12.3,14.5 -14,15.7 -1.7,1.3 -5.7,2.8 -9,3.4 -3.3,0.7 -19.7,2.4 -36.5,3.8 -25.3,2 -31.4,2.3 -35.5,1.3 -2.8,-0.6 -6.1,-2 -7.5,-2.9 -2.3,-1.7 -2.7,-1.7 -5.5,-0.2 -1.7,0.8 -5.5,2.4 -8.5,3.4 -3,1.1 -10.7,3.2 -17,4.8 -6.3,1.5 -17.6,3.6 -25,4.5 -10.3,1.3 -17.9,1.6 -32,1.2 -16.9,-0.4 -19.7,-0.8 -32,-3.9 -7.4,-2 -16.2,-4.9 -19.5,-6.6 -3.3,-1.7 -8.3,-4.6 -16,-9.9l-4.3,5.9c-2.3,3.2 -6.9,7.7 -10.5,10.2 -3.4,2.4 -7.8,5.1 -9.7,6.1 -1.9,1 -7.8,2.9 -13,4.2 -7.8,2 -22.5,3.5 -80,8.4 -46.6,3.9 -72.2,5.7 -75.5,5.2 -2.8,-0.4 -5.5,-0.5 -6,-0.4 -0.5,0.2 -3.5,1 -6.5,1.7 -3,0.8 -40.4,4.3 -83,7.9 -57.3,4.8 -78.5,6.2 -81.5,5.5 -2.9,-0.6 -5.7,-0.5 -10,0.6 -3.3,0.8 -40.9,4.3 -83.5,7.9 -59.6,5 -78.5,6.2 -81.8,5.5 -2.3,-0.6 -5.3,-1.7 -6.7,-2.5 -1.4,-0.8 -2.5,-1.2 -2.5,-0.7 0,0.4 -1.5,1.7 -3.3,2.9 -1.7,1.2 -5.9,2.6 -9.2,3.2 -3.3,0.6 -16.7,2 -29.8,3.1 -19.3,1.6 -24.7,1.8 -29,0.8 -3.8,-0.9 -6.3,-2.2 -9.3,-5.2 -2.5,-2.4 -4.7,-5.7 -5.3,-8.1 -0.6,-2.2 -1.7,-10.1 -3.5,-31l-6.5,4.9c-3.6,2.7 -8.3,5.7 -10.4,6.7 -2,1.1 -7.9,3 -13,4.4 -6.9,1.9 -16.5,3.1 -38.7,5 -16.2,1.4 -29.8,2.5 -30.3,2.5 -0.4,0 -0.6,3.7 -0.6,8.3 0.1,4.5 -0.3,10 -0.9,12.2 -0.6,2.3 -2.7,5.6 -4.9,7.8 -2.1,2.1 -5.4,4.2 -7.3,4.8 -1.9,0.5 -5.8,1.3 -8.7,1.7 -4.7,0.6 -5.1,0.9 -4.1,2.7 0.6,1.1 3.4,4.9 6.3,8.5 2.9,3.6 7.9,9.2 11.2,12.5 3.2,3.3 9.2,8.9 13.3,12.5 4.1,3.6 10,8.4 13,10.7 3,2.3 10.4,7.4 16.5,11.4 6.1,4 18.2,11 27,15.5 8.8,4.6 21.4,10.6 28,13.4 6.6,2.8 19,7.6 27.5,10.7 8.5,3 23.8,7.9 34,10.8 10.2,2.9 25.9,7 35,9 9.1,2 23.7,5 32.5,6.6 8.8,1.6 23.9,4 33.5,5.3 9.6,1.4 21.8,3 27,3.5 5.2,0.6 17.4,1.8 27,2.6 9.6,0.8 31.7,2 49,2.7 24.6,0.9 39.5,0.9 68,0 20.1,-0.7 45,-1.9 55.5,-2.7 10.5,-0.8 22.6,-1.6 27,-1.9 5.8,-0.4 4.2,0 -6,1.4 -7.7,1 -23,2.8 -34,3.9 -11,1.1 -30.6,2.7 -43.5,3.6 -12.9,0.9 -32.7,2 -44,2.5 -11.3,0.4 -41.4,0.7 -67,0.5 -25.6,-0.2 -54.1,-0.8 -63.5,-1.4 -9.4,-0.6 -27.1,-2 -39.5,-3.1 -12.4,-1.1 -33.3,-3.6 -46.5,-5.5 -13.2,-1.9 -30.3,-4.6 -38,-6 -7.7,-1.4 -23,-4.6 -34,-7 -11,-2.5 -27,-6.5 -35.5,-8.9 -8.5,-2.5 -21.1,-6.4 -28,-8.6 -6.9,-2.3 -19.3,-6.9 -27.5,-10.2 -8.3,-3.3 -22.4,-9.8 -31.5,-14.4 -9.1,-4.6 -21.5,-11.6 -27.5,-15.5 -6.1,-3.9 -13.7,-9.2 -17,-11.8 -3.3,-2.5 -7.6,-5.9 -9.5,-7.6 -1.9,-1.6 -6.3,-5.7 -9.8,-9 -3.5,-3.3 -9.4,-9.6 -13.1,-14 -3.7,-4.4 -8,-10.1 -9.7,-12.7 -1.6,-2.5 -3.8,-6.1 -4.8,-8 -1.1,-1.8 -3.3,-6.2 -4.9,-9.8 -1.6,-3.6 -4,-9.9 -5.3,-14 -1.3,-4.1 -2.9,-11.5 -3.5,-16.5 -0.7,-5.2 -0.9,-14.1 -0.5,-21 0.3,-6.6 1.3,-14.7 2.2,-18 0.8,-3.3 2.2,-8 2.9,-10.5 0.7,-2.5 2.1,-6.5 3,-9 0.9,-2.5 4.3,-9.8 7.6,-16.2 3.2,-6.5 7.5,-14.2 9.6,-17 2,-2.9 5.2,-7.3 7,-9.8 2.5,-3.3 3.3,-5.2 2.9,-7 -0.3,-1.4 0.1,-4.7 0.8,-7.5 0.7,-2.7 2.1,-6.3 3.2,-7.9 1,-1.5 3.2,-3.7 4.9,-4.7 1.6,-1 5.8,-2.4 9.2,-3.1 5.6,-1.2 6.8,-1.9 14,-8.8 4.3,-4.2 10.9,-10.3 14.8,-13.6 3.8,-3.4 13.7,-11.2 22,-17.4 8.2,-6.2 21.3,-15.4 29,-20.5 7.7,-5.1 20.7,-13.2 29,-18 8.2,-4.8 24.9,-13.8 37,-20 12.1,-6.1 26.7,-13.3 32.5,-16 5.8,-2.6 17.2,-7.7 25.5,-11.2 8.2,-3.6 20.2,-8.5 26.5,-11 6.3,-2.5 18.5,-7.1 27,-10.3 8.5,-3.2 23.6,-8.5 33.5,-11.9 9.9,-3.3 24.7,-8.1 33,-10.6 8.2,-2.6 25.6,-7.5 38.5,-11.1 12.9,-3.5 24.2,-6.4 25,-6.4 0.8,0.1 -10.4,4 -25,8.9 -14.6,4.8 -34.8,12 -45,15.9 -10.2,3.9 -24.8,9.7 -32.5,13 -7.7,3.3 -19.6,8.6 -26.5,11.7 -6.9,3.2 -18.6,8.9 -26,12.8 -7.4,3.8 -18.7,9.9 -25,13.5 -6.3,3.5 -14.9,8.5 -19,11 -4.1,2.5 -12.4,7.8 -18.5,11.7 -6.1,4 -14.4,9.7 -18.5,12.7 -4.1,2.9 -12.9,9.7 -19.5,15 -6.6,5.3 -13.4,10.8 -15,12.3 -1.7,1.5 -7.7,7.2 -13.5,12.8 -5.7,5.6 -13.9,14.3 -18.2,19.2 -4.3,4.9 -7.7,9.1 -7.6,9.2 0.2,0 14,-1 30.8,-2.4 29.1,-2.4 30.9,-2.5 38.5,-1 4.4,0.9 10.2,2.3 13,3.1 2.7,0.9 7.5,3 16.3,8.1l1,-4c0.6,-2.3 2.7,-5.6 4.9,-7.8 2.4,-2.4 5.6,-4.3 8.8,-5.3 2.7,-0.8 16,-2.4 29.5,-3.5 13.5,-1.2 26.7,-1.9 29.5,-1.6 2.7,0.2 6.5,1.2 8.2,2.1 3.2,1.5 3.4,1.5 6,-0.6 1.6,-1.2 4.8,-2.8 7.3,-3.5 2.5,-0.7 15.1,-2.2 28,-3.3 12.9,-1.1 25.3,-2 27.5,-2 2.2,0 5.8,0.5 8,1.1 2.2,0.6 5.6,2.8 7.6,4.8 2,2 4.2,5.4 4.8,7.6 0.7,2.2 2.6,20.2 4.2,40 1.7,19.8 3.2,36.1 3.3,36.2 0,0.1 18.3,-1.4 40.6,-3.3 22.3,-1.9 40.7,-3.7 41,-4 0.3,-0.3 -0.8,-15.5 -2.3,-33.7 -1.5,-18.3 -2.7,-35 -2.7,-37.2 0,-2.2 0.4,-5.6 1,-7.5 0.5,-1.9 2.6,-5.2 4.7,-7.3 2.5,-2.5 5.6,-4.3 8.8,-5.3 2.7,-0.7 15.6,-2.3 28.5,-3.4 12.9,-1.1 25.3,-2 27.5,-2 2.2,0 5.8,0.5 8,1.1 2.2,0.6 5.6,2.8 7.6,4.8 2,2 4.2,5.4 4.8,7.6 0.7,2.2 2.6,20.2 4.2,40 1.7,19.8 3.2,36.1 3.3,36.2 0,0.1 18.1,-1.4 40.1,-3.2 22,-1.9 40.7,-3.5 41.5,-3.5 1.3,0 1.1,-4.2 -1.3,-32.8 -1.6,-19.5 -2.6,-35.9 -2.3,-40.7 0.4,-6.2 1.1,-8.7 2.8,-11.2 1.3,-1.7 3.7,-4 5.3,-5.1 1.6,-1.1 5.2,-2.5 8,-3.1 2.7,-0.6 34.7,-3.6 71,-6.7 37.8,-3.2 68.1,-5.3 71,-4.9 2.7,0.3 9.3,1.7 14.5,3.1 6.3,1.7 11.5,3.8 15.5,6.4 3.3,2.1 7.6,5.6 9.6,7.7 2,2.1 4.5,5 7.9,9.3l1.9,-3.2c1.1,-1.8 4.6,-5.8 7.8,-8.9 3.2,-3 8.5,-7.3 11.8,-9.6 3.3,-2.2 8,-5 10.5,-6.3 2.5,-1.3 7.6,-3.4 11.5,-4.7 3.9,-1.3 11.5,-3.4 17,-4.7 5.5,-1.4 14.7,-3.1 20.5,-4 5.8,-0.9 16.4,-1.9 23.5,-2.2 8.2,-0.4 16.9,-0.2 23.5,0.5 5.8,0.7 14.3,2.2 19,3.2 4.7,1.1 8.7,1.6 9,1.2 0.3,-0.5 1.8,-1.8 3.5,-3 1.7,-1.1 5.2,-2.5 8,-3.2 2.7,-0.6 18.7,-2.3 35.5,-3.7 16.8,-1.4 32.5,-2.4 35,-2.1 2.5,0.3 6,1.2 7.7,2.1 1.8,0.9 8.9,6.5 15.8,12.6 6.9,6.1 12.8,11 13.2,11 0.5,0.1 5.7,-5.9 11.7,-13.2 5.9,-7.3 12.2,-14.3 14,-15.5 1.7,-1.2 5.6,-2.7 8.6,-3.2 3,-0.6 11.8,-1.5 19.5,-2.2 7.7,-0.6 14.1,-1.2 14.3,-1.3 0.1,0 -2.1,-3.2 -4.9,-7.1 -2.9,-3.9 -10.6,-12.4 -17.3,-19 -6.7,-6.6 -15.9,-15 -20.6,-18.6 -4.7,-3.6 -11.9,-8.8 -16,-11.6 -4.1,-2.7 -12,-7.6 -17.5,-10.8 -5.5,-3.2 -16,-8.7 -23.3,-12.2 -7.2,-3.5 -18.9,-8.6 -26,-11.4 -7,-2.8 -18.5,-7.1 -25.7,-9.5 -7.2,-2.5 -19.1,-6.2 -26.5,-8.4 -7.4,-2.1 -18.2,-5.1 -24,-6.5 -5.8,-1.5 -19,-4.4 -29.5,-6.5 -10.5,-2.1 -26.4,-5 -35.5,-6.4 -9.1,-1.4 -19,-2.8 -22,-3.2 -3,-0.4 -6.2,-1 -7,-1.5 -0.9,-0.4 0.2,-0.6 2.5,-0.3zM1179,383.3c-3.3,0.5 -5.4,1.6 -7.6,3.9 -1.7,1.8 -8.4,9.8 -14.9,17.8 -6.4,8 -12,14.6 -12.4,14.7 -0.3,0.2 -8,-6.3 -17.1,-14.2 -9.1,-8 -17.8,-14.9 -19.5,-15.3 -1.9,-0.6 -15.4,0.2 -36.5,2 -25.5,2.1 -34.3,3.2 -37,4.6 -1.9,0.9 -4.2,3.1 -5,4.8 -1.5,3.1 -1.5,3.1 -5.5,1.7 -2.2,-0.8 -8,-2.4 -13,-3.5 -7.8,-1.9 -11.9,-2.2 -31,-2.2 -16.2,0 -24.6,0.5 -32,1.7 -5.5,1 -14.5,2.9 -20,4.3 -5.5,1.4 -13.4,3.9 -17.5,5.5 -4.1,1.7 -10.5,5.1 -14.3,7.5 -3.7,2.4 -8.6,6.1 -10.8,8.2 -2.3,2 -6.4,6.8 -9.1,10.7 -2.7,3.9 -5.8,9.7 -7,13l-2.2,6c-2.8,-10.9 -5.1,-16.2 -7.1,-19 -1.8,-2.7 -4.6,-6.2 -6.2,-7.7 -1.5,-1.5 -5.5,-4.3 -8.8,-6.2 -3.6,-2.2 -9.3,-4.4 -14.5,-5.6 -4.7,-1.1 -11,-2 -14,-2 -3,0 -34.5,2.5 -70,5.5 -35.5,3.1 -65.6,5.8 -67,6 -1.4,0.3 -3.7,1.8 -5.1,3.3 -1.5,1.5 -2.9,4.1 -3.2,5.7 -0.3,1.6 1,21.5 2.9,44 1.9,22.6 3.3,41.1 3.2,41.2 -0.2,0.1 -1.7,-0.1 -3.3,-0.6 -1.9,-0.5 -20.6,0.7 -50,3.1 -25.9,2.1 -47.1,3.8 -47.1,3.6 -0.1,-0.2 -1.6,-17.8 -3.3,-39.3 -1.8,-21.4 -3.6,-40.6 -4.1,-42.5 -0.5,-1.9 -1.7,-4.3 -2.7,-5.2 -1,-1 -3.2,-2.2 -4.8,-2.7 -2,-0.6 -11.8,-0.1 -30,1.4 -14.9,1.3 -28.1,2.8 -29.5,3.3 -1.4,0.6 -3.5,2 -4.6,3.3 -1.2,1.3 -2.4,3.5 -2.7,4.9 -0.4,1.4 0.9,20.7 2.8,43 1.9,22.3 3.5,40.8 3.5,41.3 0,0.4 -1.2,0.3 -2.8,-0.1 -1.7,-0.6 -19.9,0.5 -49.7,3 -25.9,2.1 -47.1,3.8 -47.1,3.6 -0.1,-0.2 -1.6,-17.8 -3.3,-39.3 -1.8,-21.4 -3.6,-40.6 -4.1,-42.5 -0.5,-1.9 -1.7,-4.3 -2.7,-5.2 -1,-1 -3.2,-2.2 -4.8,-2.7 -2,-0.6 -11.8,-0.1 -30,1.4 -14.9,1.3 -28.1,2.8 -29.5,3.3 -1.4,0.6 -3.5,2 -4.6,3.3 -1.2,1.3 -2.4,3.5 -2.7,4.9 -0.3,1.4 2,33.6 5.3,71.5 5.2,60.9 6.1,69.3 7.8,71.5 1,1.4 3.2,3.1 4.8,3.9 2.6,1.3 10.7,0.8 78.9,-4.8 41.8,-3.4 78.7,-6.7 82,-7.2 3.7,-0.6 6.8,-1.7 8,-2.9 1.8,-1.8 2.2,-1.9 3.5,-0.5 0.8,0.9 3.5,1.8 6,2.1 2.5,0.3 39.1,-2.4 81.5,-6.1 42.4,-3.6 78.1,-6.8 79.5,-7 1.4,-0.3 3.6,-1.6 5,-3l2.5,-2.4c4.3,3.4 6.5,4 10,3.9 2.7,0 34.9,-2.5 71.5,-5.5 41.7,-3.5 69.7,-6.2 75,-7.4 4.7,-1 10.7,-2.9 13.5,-4.2 2.7,-1.3 7.1,-4 9.7,-5.9 2.5,-1.9 6.2,-5.5 8.2,-8 2,-2.5 4.6,-7.1 5.8,-10.2l2.3,-5.8c5.4,5.6 9.7,9.1 13,11.5 3.3,2.4 8.7,5.6 12,7 3.3,1.5 10.5,3.8 16,5.1 5.5,1.3 15.4,2.9 22,3.5 8.8,0.8 16,0.8 27,0 8.2,-0.7 20.6,-2.3 27.5,-3.7 6.9,-1.4 16.5,-3.9 21.5,-5.5 5,-1.7 11.5,-4.4 14.5,-6 4,-2.2 5.6,-2.6 5.9,-1.7 0.3,0.7 1.5,2.3 2.8,3.6 1.3,1.2 4,2.5 6,2.8 2.1,0.4 16,-0.3 30.8,-1.5 14.8,-1.2 30.2,-2.6 34,-3.2 3.8,-0.6 8,-1.8 9.2,-2.7 1.2,-0.9 8,-9 15.2,-17.9 7.2,-9 13.3,-16.3 13.6,-16.3 0.3,0 7.9,6.5 17,14.5 9.1,8 17.7,14.9 19.2,15.4 1.8,0.5 14.8,-0.2 35.8,-2 18.2,-1.5 34.1,-3 35.5,-3.3 1.4,-0.3 3.8,-2 5.5,-3.7 2.4,-2.4 3,-3.9 2.9,-7.2 0,-2.5 -0.8,-5.2 -1.9,-6.7 -1,-1.4 -16.8,-14.5 -35.2,-29.2l-33.3,-26.8c23.6,-26.7 36.7,-41.4 44.3,-50 7.9,-8.9 14.1,-16.8 14.6,-18.5 0.4,-1.6 0.4,-4.4 -0.1,-6 -0.4,-1.6 -1.9,-4.1 -3.3,-5.5 -2.2,-2.2 -3.5,-2.5 -10.3,-2.7 -4.2,-0.1 -19.2,0.9 -33.2,2.1 -14,1.3 -27.5,2.6 -30,2.9zM1226.9,440.4c-2.8,3.4 -7.8,9.1 -11,12.9l-5.9,6.7c14.3,11.5 18.8,14.6 19.3,14.2 0.4,-0.4 1.4,-5.4 2.3,-11.2 0.9,-5.8 1.8,-13.2 2.1,-16.5 0.3,-3.3 0,-7.4 -0.6,-9.1l-1.1,-3zM248,461.3c-1.4,0.4 -3.8,2 -5.5,3.7 -2.9,3 -3,3.3 -2.8,12.3 0.2,5 0.6,10.5 1,12.1 0.6,2.9 0.5,2.8 -3.8,-1.8 -2.4,-2.7 -7.1,-6.9 -10.4,-9.2 -3.3,-2.4 -8,-5.2 -10.5,-6.2 -2.5,-1.1 -7.8,-2.7 -11.7,-3.6 -4,-0.9 -9.9,-1.7 -13,-1.7 -3.2,0 -34.8,2.5 -70.3,5.6 -35.5,3 -65.6,5.7 -67,6 -1.4,0.3 -3.7,1.7 -5.1,3.2 -1.5,1.5 -2.9,4.1 -3.2,5.7 -0.3,1.7 1.9,32.1 4.9,67.5 3,35.5 5.7,66.6 6,69 0.5,3.4 1.5,5.4 4,7.8 3,2.8 4.1,3.2 8.7,3.2 2.8,0 15.6,-0.9 28.2,-2 12.7,-1.1 24.1,-2.2 25.5,-2.6 1.4,-0.4 3.7,-1.8 5.3,-3.3 1.5,-1.4 2.9,-4.1 3.2,-6.1 0.3,-1.9 0.1,-8 -0.4,-13.5 -0.5,-5.5 -0.9,-10 -0.8,-10.1 0.1,-0.1 15.1,-1.4 33.2,-2.9 19.9,-1.6 36.4,-3.4 41.5,-4.6 4.7,-1.1 11.4,-3.5 15,-5.4 3.6,-1.9 9,-5.6 12,-8.3 3,-2.6 7.4,-7.7 9.8,-11.2 2.4,-3.6 4.3,-6.2 4.4,-6 0,0.3 1.1,12 2.4,26 1.9,21.3 2.6,25.9 4.2,28 1,1.4 3.2,3.2 4.8,4 2.5,1.2 5.8,1.2 25.4,-0.4 12.4,-0.9 25.7,-2.2 29.5,-2.7 5.5,-0.7 7.6,-1.5 9.7,-3.7 1.5,-1.4 3,-4 3.2,-5.7 0.3,-1.6 -2,-32.9 -5,-69.5 -3,-36.5 -6,-68.2 -6.7,-70.4 -0.7,-2.1 -2.3,-4.7 -3.7,-5.7 -1.4,-1 -4.1,-2 -6,-2.2 -1.9,-0.3 -14.7,0.6 -28.5,1.8 -13.7,1.3 -26.1,2.6 -27.5,2.9zM1083,634c-11.7,13.8 -14,16.1 -17.5,17 -2.2,0.6 -10.7,2.9 -19,5.1 -9.9,2.7 -15.8,4.8 -17.2,6.2 -1.3,1.2 -2.5,3.1 -2.8,4.4 -0.3,1.2 0.4,3.7 1.4,5.5 1.1,1.8 6.7,9.5 12.5,17.2l10.6,14c0,12.4 -0.5,22.3 -1.1,30 -0.7,9.8 -0.7,14.8 0,16.5 0.6,1.4 2.7,3.4 4.7,4.5l3.5,2 45.4,-15.6c37,12.5 45.9,15 47.5,14.7 1.4,-0.3 3.6,-1.7 5,-3.1 1.9,-2 2.5,-3.7 2.5,-6.8 -0.1,-2.3 -0.7,-12.5 -1.4,-22.7l-1.3,-18.5c23.3,-31.7 24.3,-33.3 24,-36.9 -0.2,-2.8 -1,-4.4 -2.8,-5.7 -1.4,-1.1 -10.8,-4.1 -21,-6.9 -13.8,-3.7 -19,-5.6 -20.5,-7.2 -1.1,-1.3 -4.7,-5.4 -8,-9.3 -3.3,-3.8 -7.6,-8.7 -9.5,-10.9 -1.9,-2.1 -5.1,-5.6 -7,-7.7 -2.8,-3 -4.2,-3.8 -7,-3.8 -1.9,0.1 -4.4,0.5 -5.5,1.1 -1.1,0.5 -8.1,8.2 -15.5,16.9z" />
        <path
            android:fillColor="#FFFFFF"
            android:fillType="evenOdd"
            android:pathData="m189.3,478.1c3.7,0 9.1,0.4 11.9,1 2.9,0.6 8.2,2.5 11.8,4.2 3.8,1.8 9.2,5.7 13,9.3 3.6,3.4 7.9,8.7 9.7,12 1.7,3.2 3.9,8.8 4.7,12.4 0.9,3.6 1.6,9.1 1.6,12.2 0,3.2 -0.5,8.2 -1.1,11 -0.6,2.9 -2.4,8.1 -4,11.5 -1.6,3.5 -5.3,8.9 -8.2,12 -3,3.2 -7.6,7.2 -10.3,9 -2.7,1.8 -7.6,4.1 -10.9,5.3 -4.7,1.6 -14.8,2.8 -47.5,5.6 -22.8,2 -41.6,3.6 -41.7,3.7 -0.1,0.1 0.5,7.4 1.2,16.2 0.8,8.8 1.3,16.1 1.2,16.2 -0.1,0.1 -11,1.1 -24.2,2.3 -13.2,1.2 -25.1,2 -29,1.5l-5.6,-67c-3.1,-36.9 -5.6,-67.1 -5.5,-67.2 0,-0.1 28.4,-2.7 63.1,-5.7 34.6,-2.9 66,-5.4 69.7,-5.5zM113.7,525c-0.3,0.3 -0.2,5.2 0.4,11 0.5,5.8 1.1,10.6 1.2,10.6 0.2,0.1 14.9,-1.1 32.8,-2.6 17.9,-1.5 33.5,-3.2 34.7,-3.8 1.3,-0.7 3,-2.2 3.8,-3.5 0.8,-1.2 1.5,-4 1.5,-6.2 0,-2.2 -0.8,-5.1 -1.7,-6.4 -1,-1.4 -3.3,-3.1 -5.1,-3.8 -1.7,-0.7 -3.5,-1.2 -4,-1.2 -0.4,0.1 -14.7,1.3 -31.9,2.8 -17.1,1.4 -31.4,2.8 -31.7,3.1zM303.1,468c0.4,0.3 3.2,30.6 6.3,67.5 3.1,36.9 5.5,67.1 5.4,67.1 -0.1,0.1 -11.9,1.1 -26.2,2.3 -14.3,1.2 -26.2,1.9 -26.5,1.5 -0.3,-0.3 -3,-30.6 -6.1,-67.2 -3.1,-36.7 -5.6,-66.8 -5.5,-67 0,-0.2 11.8,-1.3 26,-2.5 14.3,-1.2 26.2,-2 26.6,-1.7z" />
        <path
            android:fillColor="#FFFFFF"
            android:fillType="evenOdd"
            android:pathData="m813.5,425.1c3.3,-0.1 8.5,0.4 11.5,0.9 3,0.6 8.2,2.3 11.4,3.8 3.8,1.7 7.7,4.6 10.8,7.9 3.8,4.2 5.3,6.8 6.9,12.5 1.7,5.6 2.1,8.8 1.6,13.8 -0.3,3.6 -1.5,8.6 -2.6,11.2 -1.2,2.7 -3.7,6.5 -5.6,8.5 -1.9,2.1 -3.4,4.1 -3.5,4.5 0,0.5 0.6,0.8 1.2,0.8 0.7,0 3.7,1.1 6.5,2.5 2.9,1.4 7.2,4.4 9.5,6.7 2.3,2.4 5.3,6.8 6.6,9.8 1.5,3.4 2.7,8.2 3,12.5 0.3,5 0,8.6 -1.2,12.5 -1,3 -3.3,7.6 -5.2,10.2 -1.9,2.7 -5.8,6.4 -8.7,8.3 -2.8,2 -8.1,4.5 -11.7,5.6 -5.2,1.6 -20.7,3.3 -76,8 -38.2,3.3 -70.9,5.8 -75.5,5.4l-5.6,-67c-3.1,-36.9 -5.6,-67.1 -5.5,-67.2 0,-0.1 28.5,-2.7 63.1,-5.7 34.6,-2.9 65.7,-5.4 69,-5.5zM383,461c0.4,0.3 2.4,20.7 4.5,45.5 2,24.7 3.8,45.1 3.9,45.3 0,0.1 23.6,-1.7 52.3,-4 28.8,-2.4 52.3,-4.3 52.3,-4.3 0.1,0 0.9,9.7 2,21.5 1,11.8 1.8,21.6 1.7,21.7 -0.1,0.1 -35.3,3.2 -78.2,6.8 -42.9,3.6 -78.4,6.4 -79,6.2 -0.6,-0.2 -3.4,-28.8 -6.6,-67.3 -3.1,-36.8 -5.6,-67 -5.5,-67.2 0,-0.2 11.8,-1.3 26,-2.5 14.3,-1.2 26.2,-2 26.6,-1.7zM558,447c0.4,0.3 2.4,20.7 4.5,45.5 2,24.7 3.8,45.1 3.9,45.3 0,0.1 23.6,-1.7 52.3,-4 28.8,-2.4 52.3,-4.3 52.3,-4.3 0.1,0 0.9,9.7 2,21.5 1,11.8 1.8,21.6 1.7,21.7 -0.1,0.1 -35.3,3.2 -78.2,6.8 -42.9,3.6 -78.5,6.4 -79,6.2 -0.6,-0.2 -3.4,-28.8 -6.6,-67.3 -3.1,-36.8 -5.6,-67 -5.5,-67.2 0,-0.2 11.8,-1.3 26,-2.5 14.3,-1.2 26.2,-2 26.6,-1.7zM1066.7,444c0.2,0 7.1,5.4 15.3,12 8.3,6.6 15.2,12.3 15.4,12.7 0.3,0.5 -4.5,6.4 -10.5,13.3 -6.1,6.9 -12.1,13.6 -15.7,17.5l0.5,-10c0.3,-5.5 0.1,-15 -0.6,-21 -0.6,-6.1 -1.9,-14 -2.9,-17.8 -1,-3.7 -1.7,-6.7 -1.5,-6.7zM1080,468.7c0,1.8 0.2,4 0.5,4.8 0.4,1.2 0.9,1 2.5,-1 1.1,-1.4 1.9,-2.6 1.8,-2.8 -0.2,-0.1 -1.3,-1.1 -2.6,-2.2l-2.3,-2zM863.1,479l0.9,3.2c0.5,1.8 0.7,3.5 0.5,3.7 -0.2,0.3 -1.1,0 -1.9,-0.7 -1.2,-1 -1.3,-1.8 -0.5,-3.7zM737.2,464.4c0.7,8.6 1.2,12.4 1.4,14l0.4,3c62,-5.2 62.2,-5.2 64.6,-7.8 1.5,-1.6 2.4,-3.9 2.4,-5.7q0,-3 -3,-6c-1.6,-1.6 -3.7,-2.9 -4.7,-2.8 -1,0 -15.1,1.3 -31.4,2.7zM743,516.8c-1.3,0.1 -1.4,1.3 -0.7,8.4 0.5,4.5 1,8.3 1,8.4 0.1,0.2 16.4,-1.1 36.2,-2.8 35.1,-2.9 36,-3 38.2,-5.4 1.5,-1.6 2.3,-3.7 2.3,-6 0,-2.4 -0.8,-4.3 -2.5,-6 -1.9,-1.9 -3.4,-2.5 -6.7,-2.4 -2.4,0.1 -18.2,1.4 -35.3,3 -17,1.5 -31.7,2.8 -32.5,2.8zM979.5,408.1c6.6,-0.1 15.4,0.3 19.5,0.9 4.1,0.5 10.4,1.6 14,2.5 3.6,0.9 10.3,3.4 15,5.7 6.4,3 10.2,5.7 15.1,10.6 4.7,4.7 7.7,8.8 10.2,14.1 2,4.1 4.4,11.3 5.3,16 1.2,5.9 1.8,13.3 1.8,24 0.1,13.5 -0.2,16.4 -2.1,22 -1.2,3.6 -4,9.2 -6.1,12.5 -2.1,3.3 -6.5,8.4 -9.8,11.3 -3.4,3.1 -9.7,7.2 -14.9,9.8 -4.9,2.4 -13,5.5 -18,6.9 -4.9,1.4 -12.8,3.2 -17.5,4 -4.7,0.8 -14.8,1.9 -22.5,2.4 -8.5,0.6 -18.7,0.6 -26,0 -6.6,-0.5 -15.6,-1.8 -20,-2.9 -4.4,-1.1 -11.4,-3.7 -15.5,-5.7 -4.8,-2.4 -10,-6.1 -14.3,-10.2 -4.9,-4.7 -7.8,-8.6 -10.3,-13.6 -1.8,-3.8 -4,-9.5 -4.8,-12.5 -0.8,-3 -1.9,-11.1 -2.6,-18 -0.7,-7.1 -0.9,-15.5 -0.5,-19.5 0.4,-3.8 1.4,-9.2 2.2,-12 0.8,-2.7 2.9,-7.6 4.6,-10.9 1.8,-3.3 6,-8.5 9.7,-12 3.6,-3.4 9.4,-7.8 13,-9.8 3.6,-2 10.3,-5 15,-6.6 4.7,-1.7 13.5,-4 19.5,-5.1 6.1,-1.2 14.8,-2.5 19.5,-3 4.7,-0.4 13.9,-0.9 20.5,-0.9zM942.6,457.7c-3.2,1.5 -7.1,4.1 -8.5,5.7 -1.5,1.7 -3.3,4.8 -4,7 -0.9,2.6 -1.2,6.6 -0.9,11.5 0.3,4.3 1.4,9.4 2.5,12 1.1,2.5 3.1,5.5 4.4,6.7 1.3,1.2 4.1,2.9 6.2,3.8 2,0.8 7,2 11,2.5 5.1,0.8 10.4,0.8 18.2,0 6.1,-0.7 13.7,-2 17,-3 3.3,-1 7.9,-3.3 10.3,-4.9 2.7,-2 5,-4.8 6.3,-7.8 1.8,-4.1 2.1,-6.1 1.7,-13.8 -0.3,-6.6 -1,-10.1 -2.6,-13.2 -1.2,-2.4 -3.9,-5.4 -5.9,-6.8 -2.1,-1.4 -6.5,-3.2 -9.8,-4 -3.3,-0.8 -10,-1.4 -15,-1.4 -4.9,0.1 -12.6,0.7 -17,1.5 -4.4,0.8 -10.7,2.7 -13.9,4.2z" />
        <path
            android:fillColor="#FFFFFF"
            android:fillType="evenOdd"
            android:pathData="m976.5,463.4c6.9,0.2 11,0.8 13.3,1.9 1.7,1 3.9,3.1 4.7,4.7 0.8,1.7 1.5,5.8 1.5,9.3 0.1,4.7 -0.4,6.9 -2,9 -1.2,1.6 -4.3,3.6 -7.8,4.8 -4.5,1.8 -8.6,2.3 -20.2,2.7 -11.9,0.3 -15.2,0.1 -18.3,-1.2 -2,-0.9 -4.5,-2.8 -5.4,-4.3 -1,-1.6 -1.9,-5.6 -2.1,-9.3 -0.4,-6 -0.2,-6.7 2.4,-9.8 1.7,-1.9 4.8,-3.9 7.4,-4.8 2.5,-0.8 7.2,-1.8 10.5,-2.3 3.3,-0.6 10.5,-0.9 16,-0.7zM953.7,474.5c-4.6,1.5 -4.7,1.6 -4.7,5.8 -0.1,2.3 0.5,4.7 1.2,5.3 0.7,0.6 3.3,1.4 5.8,1.7 2.5,0.3 8.9,0.2 14.3,-0.4 5.3,-0.5 11.3,-1.6 13.2,-2.4 3.3,-1.4 3.5,-1.8 3.5,-6 0,-3.5 -0.4,-4.7 -2,-5.5 -1.1,-0.5 -5.9,-0.9 -10.8,-0.8 -4.8,0 -10.3,0.3 -12.2,0.5 -1.9,0.2 -5.6,1 -8.3,1.8z" />
        <path
            android:fillColor="#FFFFFF"
            android:pathData="m1209.5,391.5c-14.3,1.3 -27,2.5 -28.1,2.6 -1.4,0.3 -8,7.6 -17.9,19.9 -8.7,10.7 -16.4,20.2 -17.1,21 -1,1.3 -4,-1 -21.1,-16.2 -19.4,-17.3 -19.9,-17.7 -24.3,-17.7 -2.5,-0.1 -17.3,1.1 -33,2.4 -15.7,1.4 -28.7,2.8 -29,3 -0.3,0.3 0,0.9 0.5,1.4 0.5,0.4 17.2,13.8 37,29.6 19.8,15.8 36.5,29.2 37,29.6 0.6,0.4 -12.3,15.7 -31.4,37.1 -28.4,31.8 -32.1,36.3 -30,36.6 1.3,0.2 15.7,-0.8 31.9,-2.3 16.2,-1.4 30.1,-2.5 30.8,-2.5 0.6,0 8.7,-9.4 18,-20.9 9.2,-11.6 16.9,-21 17.2,-21.1 0.3,0 9.6,8 20.7,17.7l20.2,17.8c50.1,-4.2 65,-5.6 65.5,-5.7 0.5,-0.2 -16.3,-14.1 -37.3,-31.1l-38.1,-30.7c39.7,-44.6 54.3,-61 58,-65.3l6.7,-7.7c-7.9,0.2 -21.9,1.3 -36.2,2.5z" />
    </group>
</vector>

================
File: app/src/main/res/anim/overshoot_interpolator.xml
================
<?xml version="1.0" encoding="utf-8"?>
<overshootInterpolator xmlns:android="http://schemas.android.com/apk/res/android">

</overshootInterpolator>

================
File: app/src/main/res/animator/logo_animator.xml
================
<?xml version="1.0" encoding="utf-8"?>
<objectAnimator xmlns:android="http://schemas.android.com/apk/res/android"
    android:duration="1000"
    android:interpolator="@anim/overshoot_interpolator">

    <propertyValuesHolder
        android:propertyName="scaleX"
        android:valueFrom="0"
        android:valueTo="0.55"
        android:valueType="floatType" />
    <propertyValuesHolder
        android:propertyName="scaleY"
        android:valueFrom="0"
        android:valueTo="0.55"
        android:valueType="floatType" />
</objectAnimator>

================
File: app/src/main/java/com/daniela/pillbox/MainApplication.kt
================
package com.daniela.pillbox

import android.app.Application
import com.daniela.pillbox.data.module.alarmModule
import com.daniela.pillbox.data.module.authModule
import com.daniela.pillbox.data.module.storageModule
import org.koin.android.ext.koin.androidContext
import org.koin.android.ext.koin.androidLogger
import org.koin.core.context.startKoin

/**
 * @suppress
 * Main application class.
 */
class MainApplication : Application() {
    override fun onCreate() {
        super.onCreate()

        // Initialize Koin
        startKoin {
            androidLogger()
            androidContext(this@MainApplication)
            modules(
                authModule, storageModule, alarmModule
            )
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/Appwrite.kt
================
package com.daniela.pillbox

import android.content.Context
import android.util.Log
import io.appwrite.Client
import io.appwrite.services.Databases

/**
 * Singleton class for Appwrite client and database services.
 */
object Appwrite {
    private var client: Client? = null
    private var dbs: Databases? = null

    /**
     * Returns the Appwrite client instance.
     */
    fun getClient(ctx: Context): Client {
        synchronized(this) {
            if (client == null) {
                client = Client(ctx)
                    .setEndpoint(BuildConfig.ENDPOINT)
                    .setProject(BuildConfig.PROJECT_ID)
                    .setSelfSigned(true)
            }
            return client!!
        }
    }

    /**
     * Returns the Appwrite database services instance.
     */
    fun getDatabases(ctx: Context): Databases {
        synchronized(this) {
            if (dbs == null) {
                dbs = Databases(getClient(ctx))
            }
            return dbs!!
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/AddScheduleViewModel.kt
================
package com.daniela.pillbox.viewmodels

import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.data.models.Schedule
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.data.models.toSchedule
import com.daniela.pillbox.data.repository.MedicationRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch

class AddScheduleViewModel(
    private val medsRepository: MedicationRepository,
    private val medicationId: String,
    private val schedulesToEdit: List<ScheduleWithDocId>?,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    private val _uiState = mutableStateOf(AddScheduleUiState(medicationId))
    val uiState: State<AddScheduleUiState> = _uiState

    private fun updateUiState(update: AddScheduleUiState.() -> AddScheduleUiState) {
        _uiState.value = _uiState.value.update()
    }

    init {
        schedulesToEdit?.let { schedules ->
            updateUiState {
                copy(
                    schedules = if (schedules.isEmpty())
                        listOf(ScheduleWithDocId(medicationId = medicationId))
                    else
                        schedules,
                    asNeeded = schedules.any { it.asNeeded }
                )
            }
        }
    }

    fun toggleAsNeeded() {
        updateUiState {
            copy(
                asNeeded = !_uiState.value.asNeeded,
                schedules = if (!_uiState.value.asNeeded) {
                    // When enabling "as needed", clear other schedules
                    listOf(
                        ScheduleWithDocId(
                            docId = _uiState.value.schedules.firstOrNull()?.docId,
                            asNeeded = true,
                            medicationId = medicationId
                        )
                    )
                } else {
                    // When disabling "as needed", add a default schedule
                    listOf(
                        ScheduleWithDocId(
                            docId = _uiState.value.schedules.firstOrNull()?.docId,
                            medicationId = medicationId
                        )
                    )
                }
            )
        }
    }

    fun updateSchedule(index: Int, schedule: ScheduleWithDocId) {
        val updatedSchedules = _uiState.value.schedules.toMutableList().apply {
            set(index, schedule)
        }
        updateUiState { copy(schedules = updatedSchedules) }
    }

    fun removeSchedule(index: Int) {
        val scheduleToRemove = _uiState.value.schedules[index]
        val updatedSchedules = _uiState.value.schedules.toMutableList().apply {
            removeAt(index)
        }

        // Delete from DB if it was an existing schedule
        scheduleToRemove.docId?.let { docId ->
            coroutineScope.launch {
                medsRepository.deleteMedicationSchedule(docId)
            }
        }

        updateUiState {
            copy(
                schedules = if (updatedSchedules.isEmpty())
                    listOf(ScheduleWithDocId(medicationId = medicationId))
                else
                    updatedSchedules
            )
        }
    }

    fun addSchedule() {
        val updatedSchedules =
            _uiState.value.schedules + ScheduleWithDocId(medicationId = medicationId)
        updateUiState { copy(schedules = updatedSchedules) }
    }

    fun saveSchedule() {
        coroutineScope.launch {
            // Process all schedules
            _uiState.value.schedules.forEach { scheduleWithDocId ->
                val schedule = scheduleWithDocId.toSchedule().copy(medicationId = medicationId)

                if (scheduleWithDocId.docId != null) {
                    // Update existing schedule
                    medsRepository.updateMedicationSchedule(
                        docId = scheduleWithDocId.docId,
                        schedule = schedule,
                    )
                } else {
                    // Create new schedule
                    medsRepository.addMedicationSchedule(schedule)
                }
            }

            // Handle "as needed" special case
            if (_uiState.value.asNeeded) {
                val asNeededSchedule = Schedule(
                    asNeeded = true,
                    medicationId = medicationId
                )
                // Find existing "as needed" schedule or create new
                _uiState.value.schedules
                    .firstOrNull { it.asNeeded }
                    ?.docId
                    ?.let { docId ->
                        medsRepository.updateMedicationSchedule(asNeededSchedule, docId)
                    } ?: medsRepository.addMedicationSchedule(asNeededSchedule)
            } else {
                // Delete any existing "as needed" schedule
                _uiState.value.schedules
                    .firstOrNull { it.asNeeded }
                    ?.docId
                    ?.let { docId ->
                        medsRepository.deleteMedicationSchedule(docId)
                    }
            }
        }
    }

    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }

    data class AddScheduleUiState(
        val schedules: List<ScheduleWithDocId> = emptyList(),
        val asNeeded: Boolean = false,
    ) {
        constructor(medicationId: String) : this(
            schedules = listOf(ScheduleWithDocId(medicationId = medicationId)),
            asNeeded = false
        )
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/AddMedicationViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.util.Log
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.graphics.Color
import androidx.lifecycle.SavedStateHandle
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.data.models.Medication
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.data.repository.MedicationRepository
import com.daniela.pillbox.libs.colorpicker.ext.toHex
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel for the AddMedicationScreen.
 */
class AddMedicationViewModel(
    private val authRepository: AuthRepository,
    private val medsRepository: MedicationRepository,
    private val savedStateHandle: SavedStateHandle,
    private val medicationToEdit: MedicationWithDocId?,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    // Form state
    var name by mutableStateOf(savedStateHandle["name"] ?: "")
        private set

    var dosage by mutableStateOf(savedStateHandle["dosage"] ?: "")
        private set

    var dosageUnit by mutableStateOf(savedStateHandle["dosageUnit"] ?: "mg")
        private set

    var type by mutableStateOf(savedStateHandle["type"] ?: "tablet")
        private set

    var instructions by mutableStateOf(savedStateHandle["instructions"] ?: "")
        private set

    var stock by mutableStateOf(savedStateHandle["stock"] ?: "")
        private set

    var notes by mutableStateOf(savedStateHandle["notes"] ?: "")
        private set

    var color by mutableStateOf(savedStateHandle["color"] ?: "#ff0000")
        private set

    val success = MutableStateFlow(false)

    // Validation state
    val isFormValid: Boolean
        get() = name.isNotBlank() && dosage.isNotBlank()

    // Available medication types
    val medicationTypes = listOf("tablet", "capsule", "liquid", "injection", "cream", "other")

    // Setters
    fun onNameChange(newValue: String) {
        name = newValue
        savedStateHandle["name"] = newValue
    }

    fun onDosageChange(newValue: String) {
        dosage = newValue
        savedStateHandle["dosage"] = newValue
    }

    fun onDosageUnitChange(newValue: String) {
        dosageUnit = newValue
        savedStateHandle["dosageUnit"] = newValue
    }

    fun onTypeChange(newValue: String) {
        type = newValue
        savedStateHandle["type"] = newValue
    }

    fun onInstructionsChange(newValue: String) {
        instructions = newValue
        savedStateHandle["instructions"] = newValue
    }

    fun onStockChange(newValue: String) {
        stock = newValue
        savedStateHandle["stock"] = newValue
    }

    fun onNotesChange(newValue: String) {
        notes = newValue
        savedStateHandle["notes"] = newValue
    }

    fun onColorChange(newValue: Color) {
        color = '#' + newValue.toHex(includeAlpha = false)
        savedStateHandle["color"] = color
    }

    init {
        medicationToEdit?.let {
            name = it.name
            dosage = it.dosage.toString()
            dosageUnit = it.dosageUnit
            type = it.type
            instructions = it.instructions ?: ""
            stock = it.stock?.toString() ?: ""
            notes = it.notes ?: ""
            color = it.color ?: "#ff0000"
            savedStateHandle["name"] = name
            savedStateHandle["dosage"] = dosage
            savedStateHandle["dosageUnit"] = dosageUnit
            savedStateHandle["type"] = type
            savedStateHandle["instructions"] = instructions
            savedStateHandle["stock"] = stock
            savedStateHandle["notes"] = notes
        }
    }

    /**
     * Submits the medication form and save it to the database.
     */
    fun onSubmit() {
        if (!isFormValid) return

        // Get userId from current logged in session
        val userID = authRepository.user.value?.id
        if (userID == null) return

        var newMedication = Medication(
            userId = userID,
            name = name,
            dosage = dosage,
            dosageUnit = dosageUnit,
            type = type,
            instructions = instructions.ifEmpty { null },
            stock = stock.toIntOrNull(),
            notes = notes.ifEmpty { null },
            color = color
        )

        medicationToEdit?.let {
            update(newMedication, it.docId)
        } ?: run {
            save(newMedication)
        }

    }

    /**
     * Saves a new medication to the database.
     */
    private fun save(med: Medication) {
        coroutineScope.launch {
            try {
                medsRepository.addUserMedication(med)
                success.value = true
            } catch (e: Exception) {
                Log.e("TAG", "onSubmit: $e")
            }

        }
    }

    /**
     * Updates an existing medication in the database.
     */
    private fun update(med: Medication, docId: String?) {
        if (docId.isNullOrEmpty()) return

        coroutineScope.launch {
            try {
                medsRepository.updateUserMedication(med, docId)
                success.value = true
            } catch (e: Exception) {
                Log.e("TAG", "update: $e")
            }
        }
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/RegisterViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.content.Context
import android.util.Patterns
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.R
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.utils.Helper
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel for the Register screen.
 */
class RegisterViewModel(
    private val authRepository: AuthRepository,
    private val authErrorHandler: Helper,
    private val ctx: Context,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
    val registerSuccess = MutableStateFlow(false)

    // Input values
    var name by mutableStateOf("")
        private set
    var email by mutableStateOf("")
        private set
    var password by mutableStateOf("")
        private set
    var confirmPassword by mutableStateOf("")
        private set

    // Individual error states
    var nameError by mutableStateOf<Int?>(null)
        private set
    var emailError by mutableStateOf<Int?>(null)
        private set
    var passwordError by mutableStateOf<Int?>(null)
        private set
    var confirmPasswordError by mutableStateOf<Int?>(null)
        private set

    // Api handling
    var isLoading by mutableStateOf(false)
        private set
    var apiError by mutableStateOf<String?>(null)
        private set

    // Setters
    fun updateName(newName: String) {
        name = newName
        nameError = null
    }

    fun updateEmail(newEmail: String) {
        email = newEmail
        emailError = null
    }

    fun updatePassword(newPassword: String) {
        password = newPassword
        passwordError = null
    }

    fun updateConfirmPassword(newConfirmPassword: String) {
        confirmPassword = newConfirmPassword
        confirmPasswordError = null
    }

    /**
     * Registers the user with the provided email and password.
     */
    fun register() {
        if (!validateInputs()) return

        isLoading = true
        apiError = null

        coroutineScope.launch {
            try {
                val success = authRepository.register(email, password, name)
                if (success)
                    loginAfterRegister()
                else
                    apiError = ctx.getString(R.string.error_409)

            } catch (e: Exception) {
                apiError = authErrorHandler.handleRegistrationError(e)
            } finally {
                isLoading = false
            }
        }
    }

    /**
     * Logs in the user after registration.
     */
    private fun loginAfterRegister() {
        coroutineScope.launch {
            try {
                val loggedIn = authRepository.login(email, password)
                if (loggedIn)
                    registerSuccess.value = true
                else
                    apiError = ctx.getString(R.string.error_409)

            } catch (e: Exception) {
                apiError = authErrorHandler.handleRegistrationError(e)
            } finally {
                isLoading = false
            }
        }
    }

    /**
     * Validates form inputs and returns true if they are valid.
     */
    private fun validateInputs(): Boolean {
        // Reset all errors
        nameError = null
        emailError = null
        passwordError = null
        confirmPasswordError = null

        var isValid = true

        if (name.isBlank()) {
            nameError = R.string.error_name_required
            isValid = false
        }

        if (email.isBlank()) {
            emailError = R.string.error_email_required
            isValid = false
        } else if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            emailError = R.string.error_email_invalid
            isValid = false
        }

        if (password.isBlank()) {
            passwordError = R.string.error_password_required
            isValid = false
        } else if (password.length < 8) {
            passwordError = R.string.error_password_length
            isValid = false
        }

        if (confirmPassword.isBlank()) {
            confirmPasswordError = R.string.error_confirm_password_required
            isValid = false
        } else if (password != confirmPassword) {
            confirmPasswordError = R.string.error_passwords_mismatch
            isValid = false
        }

        return isValid
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/AuthViewModel.kt
================
package com.daniela.pillbox.viewmodels

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.daniela.pillbox.data.repository.AuthRepository
import kotlinx.coroutines.launch

class AuthViewModel(val repository: AuthRepository) : ViewModel() {
    val user = repository.user
    val session = repository.session

    fun register(email: String, password: String, name: String) {
        viewModelScope.launch {
            repository.register(email, password, name)
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/HomeViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateMapOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.R
import com.daniela.pillbox.activity.MainActivity
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.data.repository.MedicationRepository
import com.daniela.pillbox.receivers.AlarmReceiver
import com.daniela.pillbox.utils.AlarmScheduler
import com.daniela.pillbox.utils.capitalized
import io.appwrite.models.User
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.util.Calendar
import java.util.Date

// TODO: replace variables with UIState and give a loading icon

/**
 * ViewModel for the Home screen.
 */
class HomeViewModel(
    private val authRepository: AuthRepository,
    private val alarmScheduler: AlarmScheduler,
    private val medsRepository: MedicationRepository,
    private val ctx: Context,
) : ScreenModel {
    sealed class AuthState {
        object Loading : AuthState()
        data class Authenticated(val user: User<Map<String, Any>>) : AuthState()
        object Unauthenticated : AuthState()
    }

    // Coroutine
    // TODO: Create a BaseScreenModel class and replace this
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    // Auth variables
    private val _authState = MutableStateFlow<AuthState>(AuthState.Loading)
    val authState: StateFlow<AuthState> = _authState.asStateFlow()

    private val _user = MutableStateFlow<User<Map<String, Any>>?>(null)
    val user: StateFlow<User<Map<String, Any>>?> = _user.asStateFlow()

    // Api handling
    var isLoading by mutableStateOf(true)

    // Attributes
    var showMenu by mutableStateOf(false)

    // Medication List
    private val _medications = mutableStateListOf<MedicationWithDocId>()
    val medications: List<MedicationWithDocId> get() = _medications
    private val _checkedStates = mutableStateMapOf<String, Boolean>()

    // Setters
    fun isMedicationTaken(id: String) = _checkedStates[id] == true

    fun toggleMedication(id: String) {
        _checkedStates[id] = !isMedicationTaken(id)
    }

    init {
        checkAuthState()
        loadMedications()
    }

    /**
     * Checks the authentication state of the user.
     */
    private fun checkAuthState() {
        coroutineScope.launch {
            _authState.value = AuthState.Loading
            _authState.value = try {
                authRepository.getLoggedInUser()?.let { user ->
                    _user.value = user
                    AuthState.Authenticated(user)
                } ?: AuthState.Unauthenticated
            } catch (_: Exception) {
                AuthState.Unauthenticated
            }
            isLoading = false
        }
    }

    /**
     * Loads the list of medications from the repository.
     */
    private fun loadMedications() {
        coroutineScope.launch {
            _user.value?.id?.let { userId ->
                _medications.addAll(medsRepository.getUserMedicationsForToday(userId))
            }
        }
    }

    /**
     * Returns a greeting message with the user's name.
     */
    fun getGreeting(): String {
        return ctx.getString(
            R.string.greeting_format,
            getTimeBasedGreeting(),
            getDisplayName()
        )
    }

    /**
     * Logs out the current user and sets the loggedOut flag to true.
     */
    fun logout() {
        coroutineScope.launch {
            authRepository.logout()
            _authState.value = AuthState.Unauthenticated
        }
    }


    /**
     * Returns the appropriate greeting based on the current time.
     */
    private fun getTimeBasedGreeting(): String {
        val resources = ctx.resources
        val hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY)

        return when (hour) {
            in 5..11 -> resources.getString(R.string.morning_greeting)
            in 12..17 -> resources.getString(R.string.afternoon_greeting)
            in 18..21 -> resources.getString(R.string.evening_greeting)
            else -> resources.getString(R.string.night_greeting)
        }
    }

    /**
     * Returns the display name of the current user.
     */
    private fun getDisplayName(): String {
        val currentUser = _user.value ?: return "User" // Early return if null

        return when {
            currentUser.name.isNotEmpty() -> currentUser.name.capitalized()
            currentUser.email.isNotEmpty() -> currentUser.email.substringBefore("@").capitalized()
            else -> "User" // Fallback
        }
    }

    // Testing func
    fun testAlarmSystem() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val alarmManager = ctx.getSystemService(AlarmManager::class.java)
            if (!alarmManager.canScheduleExactAlarms()) {
                Log.e("ALARM_TEST", "Exact alarms not permitted")
                Toast.makeText(ctx, "Enable exact alarms in settings", Toast.LENGTH_LONG).show()
                return
            }
        }

        sendAlarm()
        Toast.makeText(ctx, "Test alarm scheduled for 10 seconds from now", Toast.LENGTH_SHORT)
            .show()
    }

    // Testing func
    fun sendAlarm() {
        coroutineScope.launch {
            println("⏳ Starting alarm test...")

            val activity = ctx as? MainActivity ?: run {
                println("❌ Could not access MainActivity")
                return@launch
            }

            activity.checkAndRequestPermissions(
                action = {
                    // Generate unique request code each time
                    val requestCode = System.currentTimeMillis().toInt()
                    val alarmTime =
                        Calendar.getInstance().apply { add(Calendar.SECOND, 10) }.timeInMillis

                    println("⏰ Scheduling test alarm #$requestCode for ${Date(alarmTime)}")

                    val intent = Intent(ctx, AlarmReceiver::class.java).apply {
                        action = "com.daniela.pillbox.TEST_ALARM_$requestCode" // Unique action
                        putExtra("test_alarm", true)
                        putExtra("request_code", requestCode)
                    }

                    val pendingIntent = PendingIntent.getBroadcast(
                        ctx,
                        requestCode,
                        intent,
                        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                    )

                    ctx.getSystemService(AlarmManager::class.java).apply {
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                            if (canScheduleExactAlarms()) {
                                setExactAndAllowWhileIdle(
                                    AlarmManager.RTC_WAKEUP,
                                    alarmTime,
                                    pendingIntent
                                )
                            }
                        } else {
                            setExact(
                                AlarmManager.RTC_WAKEUP,
                                alarmTime,
                                pendingIntent
                            )
                        }
                    }

                    Toast.makeText(ctx, "Alarm #$requestCode scheduled", Toast.LENGTH_SHORT).show()
                },
                onDenied = {
                    println("🔒 Permissions not granted")
                    Toast.makeText(ctx, "Permissions required", Toast.LENGTH_LONG).show()
                }
            )
        }
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/StorageViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.content.Context
import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.R
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.data.repository.MedicationRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch

class StorageViewModel(
    private val authRepository: AuthRepository,
    private val medsRepository: MedicationRepository,
    private val ctx: Context
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    // UiSate
    private val _uiState = mutableStateOf(StorageUiState())
    val uiState: State<StorageUiState> = _uiState

    // Available filters
    val filters = ctx.getString(R.string.filters).split(",")

    init {
        loadMedications()
        setupMedicationObserver()
    }

    // Setters
    fun onFilterSelected(filter: String) {
        _uiState.value = _uiState.value.copy(selectedFilter = filter)
        applyFilters()
    }

    fun onSearchQueryChanged(query: String) {
        _uiState.value = _uiState.value.copy(searchQuery = query)
        applyFilters()
    }

    fun onSortOrderChanged(order: String) {
        _uiState.value = _uiState.value.copy(sortOrder = order)
        applyFilters()
    }

    // Methods
    private fun setupMedicationObserver() {
        coroutineScope.launch {
            medsRepository.medications.collect { meds ->
                _uiState.value =
                    _uiState.value.copy(allMedications = meds, isLoading = false, error = null)
                applyFilters()
            }
        }
    }

    /**
     * Loads the list of medications from the repository.
     */
    fun loadMedications() {
        _uiState.value = _uiState.value.copy(isLoading = true)

        coroutineScope.launch {
            try {
                authRepository.user.value?.id?.let { userId ->
                    medsRepository.getUserMedications(userId)
                    _uiState.value = _uiState.value.copy(isLoading = false)
                } ?: run {
                    _uiState.value = _uiState.value.copy(
                        error = ctx.getString(R.string.user_not_authenticated), isLoading = false
                    )
                }
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    error = ctx.getString(
                        R.string.failed_to_load_medications,
                        e.localizedMessage
                    ), isLoading = false
                )
            }
        }
    }

    /**
     * Deletes a medication from the repository.
     */
    fun deleteMedication(medDocId: String) {
        _uiState.value = _uiState.value.copy(
            showDeleteDialog = true, selectedMedicationId = medDocId
        )
    }

    /**
     * Called when the user confirms the deletion of a medication.
     */
    fun confirmDeleteMedication() {
        _uiState.value.selectedMedicationId?.let { medDocId ->
            coroutineScope.launch {
                medsRepository.deleteUserMedication(medDocId)
            }
        }
    }

    /**
     * Called when the user cancels the deletion of a medication.
     */
    fun dismissDialog() {
        _uiState.value = _uiState.value.copy(showDeleteDialog = false, selectedMedicationId = null)
    }

    /**
     * Applies the current filters to the medication list.
     */
    private fun applyFilters() {
        _uiState.value = _uiState.value.copy(
            filteredMedications = _uiState.value.allMedications
                .filter { med ->
                    // Search filter
                    _uiState.value.searchQuery.isEmpty() ||
                            med.name.contains(_uiState.value.searchQuery, ignoreCase = true) ||
                            med.type.contains(_uiState.value.searchQuery, ignoreCase = true)
                }
                .filter { med ->
                    // Category filter
                    when (_uiState.value.selectedFilter) {
                        "Low Stock" -> med.stock?.let { it < 5 } == true
                        "Tablets" -> med.type.equals("tablet", true)
                        "Liquids" -> med.type.equals("liquid", true)
                        "Capsules" -> med.type.equals("capsule", true)
                        "Injections" -> med.type.equals("injection", true)
                        "Creams" -> med.type.equals("cream", true)
                        "Others" -> med.type.equals("other", true)
                        else -> true // "All"
                    }
                }
                .sortedWith(getSortComparator())
        )
    }

    /**
     * Returns the comparator for sorting the medication list.
     */
    private fun getSortComparator(): Comparator<MedicationWithDocId> {
        return when (_uiState.value.sortOrder) {
            "Z-A" -> compareByDescending { it.name }
            "Most Stock" -> compareByDescending { it.stock ?: 0 }
            "Least Stock" -> compareBy { it.stock ?: Int.MAX_VALUE }
            else -> compareBy { it.name } // "A-Z"
        }
    }

    /**
     * Refreshes the medication list.
     */
    fun refresh() {
        loadMedications()
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }

    /**
     * Represents the UI state for the Storage screen.
     */
    data class StorageUiState(
        val allMedications: List<MedicationWithDocId> = emptyList(), // Original unfiltered list
        val filteredMedications: List<MedicationWithDocId> = emptyList(), // Filtered results
        val searchQuery: String = "",
        val selectedFilter: String = "All",
        val sortOrder: String = "A-Z",
        val isLoading: Boolean = false,
        val error: String? = null,
        val showDeleteDialog: Boolean = false,
        val selectedMedicationId: String? = null,
    )
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/MedicationDetailsViewModel.kt
================
package com.daniela.pillbox.viewmodels

import androidx.compose.runtime.State
import androidx.compose.runtime.mutableStateOf
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.data.repository.MedicationRepository
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch

class MedicationDetailsViewModel(
    private val med: MedicationWithDocId,
    private val medsRepository: MedicationRepository,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    private val _uiState = mutableStateOf(MedicationDetailsUiState())
    val uiState: State<MedicationDetailsUiState> = _uiState

    // Helper function to update state
    private fun updateUiState(update: MedicationDetailsUiState.() -> MedicationDetailsUiState) {
        _uiState.value = _uiState.value.update()
    }

    init {
        loadSchedules()
    }

    /**
     * Called when the user confirms the deletion of a schedule.
     */
    fun loadSchedules() {
        _uiState.value = _uiState.value.copy(isLoading = true)

        coroutineScope.launch {
            try {
                med.docId?.let {
                    val schedules = medsRepository.getMedicationSchedules(it)
                    updateUiState { copy(schedules = schedules, isLoading = false) }
                }
            } catch (e: Exception) {
                updateUiState {
                    copy(
                        error = "Failed to load schedules: ${e.localizedMessage}",
                        isLoading = false
                    )
                }
            }

        }
    }



    /**
     * Called when the user confirms the deletion of a schedule.
     */
    fun deleteSchedule(docId: String) {
        updateUiState { copy(showDeleteDialog = true, selectedSchedule = docId) }
    }

    /**
     * Called when the user confirms the deletion of a schedule.
     */
    fun confirmDeleteSchedule() {
        val docIdToDelete = _uiState.value.selectedSchedule ?: run {
            updateUiState {
                copy(
                    isLoading = false,
                    error = "No schedule selected for deletion",
                    showDeleteDialog = false
                )
            }
            return
        }

        updateUiState { copy(isLoading = true) }

        coroutineScope.launch {
            try {
                medsRepository.deleteMedicationSchedule(docIdToDelete)
                updateUiState {
                    copy(
                        schedules = schedules.filter { it.docId != docIdToDelete },
                        isLoading = false,
                        showDeleteDialog = false,
                        selectedSchedule = null,
                        error = null
                    )
                }
            } catch (e: Exception) {
                updateUiState {
                    copy(
                        isLoading = false,
                        error = "Delete failed: ${e.localizedMessage}",
                        showDeleteDialog = true
                    )
                }
            }
        }
    }

    /**
     * Called when the user confirms the deletion of a schedule.
     */
    fun dismissDialog() {
        updateUiState {
            copy(
                showDeleteDialog = false,
                selectedSchedule = null
            )
        }
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }

    /**
     * Represents the UI state for the MedicationDetails screen.
     */
    data class MedicationDetailsUiState(
        val schedules: List<ScheduleWithDocId> = emptyList(),
        val showAddDialog: Boolean = true,
        val showDeleteDialog: Boolean = false,
        val editingSchedule: ScheduleWithDocId? = null,
        val isLoading: Boolean = false,
        val error: String? = null,
        val selectedSchedule: String? = null,
    )
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/AlarmViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.content.Context
import android.content.Intent
import android.os.Build
import android.provider.Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.activity.MainActivity
import com.daniela.pillbox.data.models.Medication
import com.daniela.pillbox.data.models.Schedule
import com.daniela.pillbox.data.models.toMedication
import com.daniela.pillbox.data.models.toSchedule
import com.daniela.pillbox.data.repository.MedicationRepository
import com.daniela.pillbox.utils.AlarmScheduler
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.launch
import java.util.Calendar
import kotlin.coroutines.EmptyCoroutineContext.get

/**
 * ViewModel for managing alarms.
 */
class AlarmViewModel(
    private val alarmScheduler: AlarmScheduler,
    private val medicationRepository: MedicationRepository,
    private val ctx: Context,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)

    /**
     * Schedules all alarms for a medication.
     */
    fun scheduleAllAlarmsForMedication(medicationId: String) {
        coroutineScope.launch {
            val medication = medicationRepository.getMedication(medicationId)
            val schedules =
                medicationRepository.getMedicationSchedules(medicationId).map { it.toSchedule() }

            medication?.let { med ->
                alarmScheduler.scheduleAll(med.toMedication(), schedules)
            }
        }
    }

    /**
     * Cancels all alarms for a medication.
     */
    fun cancelAllAlarmsForMedication(medicationId: String) {
        coroutineScope.launch {
            val medication = medicationRepository.getMedication(medicationId)
            val schedules =
                medicationRepository.getMedicationSchedules(medicationId).map { it.toSchedule() }

            medication?.let { med ->
                alarmScheduler.cancelAll(med.toMedication(), schedules)
            }
        }
    }

    /**
     * Updates all alarms for a medication.
     */
    fun updateAllAlarmsForMedication(medicationId: String) {
        cancelAllAlarmsForMedication(medicationId)
        scheduleAllAlarmsForMedication(medicationId)
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/viewmodels/LoginViewModel.kt
================
package com.daniela.pillbox.viewmodels

import android.content.Context
import android.util.Patterns
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import cafe.adriel.voyager.core.model.ScreenModel
import com.daniela.pillbox.R
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.utils.Helper
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.cancel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.launch

/**
 * ViewModel for the Login screen.
 */
class LoginViewModel(
    private val authRepository: AuthRepository,
    private val authErrorHandler: Helper,
    private val ctx: Context,
) : ScreenModel {
    private val coroutineScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
    val loginSuccess = MutableStateFlow(false)

    // Input values
    var email by mutableStateOf("")
        private set
    var password by mutableStateOf("")
        private set

    // Individual error states
    var emailError by mutableStateOf<Int?>(null)
        private set
    var passwordError by mutableStateOf<Int?>(null)
        private set

    // Api handling
    var isLoading by mutableStateOf(false)
        private set
    var apiError by mutableStateOf<String?>(null)
        private set

    // Setters
    fun updateEmail(newEmail: String) {
        email = newEmail
        emailError = null
    }

    fun updatePassword(newPassword: String) {
        password = newPassword
        passwordError = null
    }

    // Methods
    /**
     * Logs in the user with the provided email and password.
     */
    fun login() {
        if (!validateInputs()) return

        isLoading = true
        apiError = null

        coroutineScope.launch {
            try {
                val success = authRepository.login(email, password)
                if (success)
                    loginSuccess.value = true
                else
                    apiError = ctx.getString(R.string.error_invalid_credentials)
            } catch (e: Exception) {
                apiError = authErrorHandler.handleRegistrationError(e)

            } finally {
                isLoading = false
            }
        }
    }

    /**
     * Returns the current logged in user or null if none is.
     */
    suspend fun getLoggedInUser() = authRepository.getLoggedInUser()

    /**
     * Validates the input fields and returns true if they are valid.
     */
    private fun validateInputs(): Boolean {
        // Reset errors
        emailError = null
        passwordError = null

        var isValid = true

        if (email.isBlank()) {
            emailError = R.string.error_email_required
            isValid = false
        } else if (!Patterns.EMAIL_ADDRESS.matcher(email).matches()) {
            emailError = R.string.error_email_invalid
            isValid = false
        }

        if (password.isBlank()) {
            passwordError = R.string.error_password_required
            isValid = false
        } else if (password.length < 8) {
            passwordError = R.string.error_password_length
            isValid = false
        }

        return isValid
    }

    /**
     * Called when the ViewModel is no longer used and will be destroyed.
     */
    override fun onDispose() {
        super.onDispose()
        coroutineScope.cancel()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/ColorPicker.kt
================
package com.daniela.pillbox.libs.colorpicker

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import com.daniela.pillbox.libs.colorpicker.ext.toHex
import com.daniela.pillbox.libs.colorpicker.ext.transparentBackground
import com.daniela.pillbox.libs.colorpicker.pickers.CircleColorPicker
import com.daniela.pillbox.libs.colorpicker.pickers.ClassicColorPicker
import com.daniela.pillbox.libs.colorpicker.pickers.RingColorPicker
import com.daniela.pillbox.libs.colorpicker.pickers.SimpleRingColorPicker

sealed class ColorPickerType {
    /**
     * @param showAlphaBar Sets the visibility of the alpha bar.
     */
    class Classic(val showAlphaBar: Boolean = true, val initialColor: Color = Color.Red) : ColorPickerType()

    /**
     * @param showBrightnessBar Sets the visibility of the brightness bar.
     * @param showAlphaBar Sets the visibility of the alpha bar.
     * @param lightCenter Changes the center of the circle to black or white.
     */
    class Circle(
        val showBrightnessBar: Boolean = true,
        val showAlphaBar: Boolean = true,
        val lightCenter: Boolean = true
    ) : ColorPickerType()

    /**
     * @param ringWidth Sets the color ring width.
     * @param previewRadius Sets the radius of the center color preview circle.
     * @param showLightnessBar Sets the visibility of the lightness bar.
     * @param showDarknessBar Sets the visibility of the darkness bar.
     * @param showAlphaBar Sets the visibility of the alpha bar.
     * @param showColorPreview Sets the visibility of the center color preview circle.
     */
    class Ring(
        val ringWidth: Dp = 10.dp,
        val previewRadius: Dp = 80.dp,
        val showLightnessBar: Boolean = true,
        val showDarknessBar: Boolean = true,
        val showAlphaBar: Boolean = true,
        val initialColor: Color = Color.Red,
        val showColorPreview: Boolean = true
    ) : ColorPickerType()

    /**
     * @param colorWidth Arc width of all colors.
     * @param tracksCount Amount of the tracks.
     * @param sectorsCount Amount of the sectors for each track.
     */
    class SimpleRing(
        val colorWidth: Dp = 20.dp,
        val tracksCount: Int = 5,
        val sectorsCount: Int = 24,
    ) : ColorPickerType()
}

/**
 * @param type Color picker type example [ColorPickerType.Circle].
 * @param onPickedColor Executes when the user selects a color.
 */
@ExperimentalComposeUiApi
@Composable
fun ColorPicker(
    modifier: Modifier = Modifier,
    type: ColorPickerType = ColorPickerType.Classic(),
    onPickedColor: (Color) -> Unit
) {
    Box(modifier = modifier) {
        when (type) {
            is ColorPickerType.Classic -> ClassicColorPicker(
                showAlphaBar = type.showAlphaBar,
                onPickedColor = onPickedColor,
                initialColor = type.initialColor
            )
            is ColorPickerType.Circle -> CircleColorPicker(
                showAlphaBar = type.showAlphaBar,
                showBrightnessBar = type.showBrightnessBar,
                lightCenter = type.lightCenter,
                onPickedColor = onPickedColor
            )
            is ColorPickerType.Ring -> RingColorPicker(
                ringWidth = type.ringWidth,
                initialColor = type.initialColor,
                previewRadius = type.previewRadius,
                showLightColorBar = type.showLightnessBar,
                showDarkColorBar = type.showDarknessBar,
                showAlphaBar = type.showAlphaBar,
                showColorPreview = type.showColorPreview,
                onPickedColor = onPickedColor
            )
            is ColorPickerType.SimpleRing -> SimpleRingColorPicker(
                colorWidth = type.colorWidth,
                tracksCount = type.tracksCount,
                sectorsCount = type.sectorsCount,
                onPickedColor = onPickedColor
            )
        }
    }
}

/**
 * @param show Dialog Visibility.
 * @param onDismissRequest Executes when the user tries to dismiss the dialog.
 * @param properties [DialogProperties] for further customization of this dialog's behavior.
 * @param type Color picker type example [ColorPickerType.Classic].
 * @param onPickedColor Executes when the user selects a color from the color picker dialog.
 */
@ExperimentalComposeUiApi
@Composable
fun ColorPickerDialog(
    show: Boolean,
    onDismissRequest: () -> Unit,
    properties: DialogProperties = DialogProperties(),
    type: ColorPickerType = ColorPickerType.Classic(),
    onPickedColor: (Color) -> Unit
) {
    var showDialog by remember(show) {
        mutableStateOf(show)
    }
    var color by remember {
        mutableStateOf(Color.White)
    }
    if (showDialog) {
        Dialog(onDismissRequest = {
            onDismissRequest()
            showDialog = false
        }, properties = properties) {
            Box(
                modifier = Modifier
                    .width(IntrinsicSize.Max)
                    .clip(RoundedCornerShape(32.dp))
                    .background(Color.White)
            ) {
                Box(modifier = Modifier.padding(32.dp)) {
                    Column {
                        ColorPicker(type = type, onPickedColor = {
                            color = it
                        })
                        Spacer(modifier = Modifier.height(16.dp))
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(16.dp)
                        ) {
                            Box(
                                modifier = Modifier
                                    .size(50.dp, 30.dp)
                                    .clip(RoundedCornerShape(50))
                                    .border(0.3.dp, Color.LightGray, RoundedCornerShape(50))
                                    .transparentBackground(verticalBoxesAmount = 4)
                                    .background(color)
                            )
                            Text(
                                text = buildAnnotatedString {
                                    withStyle(SpanStyle(color = Color.Gray)) {
                                        append("#")
                                    }
                                    withStyle(SpanStyle(fontWeight = FontWeight.Bold)) {
                                        append(color.toHex())
                                    }
                                },
                                fontSize = 14.sp,
                                fontFamily = FontFamily.Monospace,
                            )
                        }
                        Spacer(modifier = Modifier.height(16.dp))
                        OutlinedButton(
                            modifier = Modifier.fillMaxWidth(),
                            onClick = {
                                onPickedColor(color)
                                showDialog = false
                            },
                            shape = RoundedCornerShape(50)
                        ) {
                            Text(text = "Select")
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview(showBackground = true, name = "Classic Color Picker")
@Composable
private fun ClassicColorPickerPreview() {
    ColorPicker(type = ColorPickerType.Classic()) {}
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview(showBackground = true, name = "Circle Color Picker")
@Composable
private fun CircleColorPickerPreview() {
    ColorPicker(type = ColorPickerType.Circle()) {}
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview(showBackground = true, name = "Ring Color Picker")
@Composable
private fun RingColorPickerPreview() {
    ColorPicker(type = ColorPickerType.Ring()) {}
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview(showBackground = true, name = "Simple Color Picker")
@Composable
private fun SimpleColorPickerPreview() {
    ColorPicker(type = ColorPickerType.SimpleRing()) {}
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview(showBackground = true, name = "Color Picker Dialog")
@Composable
private fun ColorPickerDialogPreview() {
    ColorPickerDialog(show = true, onDismissRequest = {}, onPickedColor = {})
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/helper/ColorPickerHelper.kt
================
package com.daniela.pillbox.libs.colorpicker.helper

import com.daniela.pillbox.libs.colorpicker.data.ColorRange


internal object ColorPickerHelper {
    fun calculateRangeProgress(progress: Double): Pair<Double, ColorRange> {
        val range: ColorRange
        return progress * 6 - when {
            progress < 1f / 6 -> {
                range = ColorRange.RedToYellow
                0
            }
            progress < 2f / 6 -> {
                range = ColorRange.YellowToGreen
                1
            }
            progress < 3f / 6 -> {
                range = ColorRange.GreenToCyan
                2
            }
            progress < 4f / 6 -> {
                range = ColorRange.CyanToBlue
                3
            }
            progress < 5f / 6 -> {
                range = ColorRange.BlueToPurple
                4
            }
            else -> {
                range = ColorRange.PurpleToRed
                5
            }
        } to range
    }
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/helper/MathHelper.kt
================
package com.daniela.pillbox.libs.colorpicker.helper

import androidx.compose.ui.geometry.Offset
import kotlin.math.atan2
import kotlin.math.cos
import kotlin.math.sin
import kotlin.math.sqrt

internal enum class BoundedPointStrategy {
    Edge,
    Inside,
    Outside
}

internal object MathHelper {
    fun getLength(x: Float, y: Float, radius: Float): Float {
        return sqrt((x - radius) * (x - radius) + (y - radius) * (y - radius))
    }

    fun getBoundedPointWithInRadius(
        x: Float,
        y: Float,
        length: Float,
        radius: Float,
        strategy: BoundedPointStrategy
    ): Offset {
        return if (strategy == BoundedPointStrategy.Edge ||
            (strategy == BoundedPointStrategy.Inside && length > radius) ||
            (strategy == BoundedPointStrategy.Outside && length < radius)
        ) {
            val angle = atan2(y - radius, x - radius)
            Offset(x - (length - radius) * cos(angle), y - (length - radius) * sin(angle))
        } else {
            Offset(x, y)
        }
    }

}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/data/ColorRange.kt
================
package com.daniela.pillbox.libs.colorpicker.data

internal enum class ColorRange {
    RedToYellow,
    YellowToGreen,
    GreenToCyan,
    CyanToBlue,
    BlueToPurple,
    PurpleToRed
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/data/Colors.kt
================
package com.daniela.pillbox.libs.colorpicker.data

import androidx.compose.ui.graphics.Color

internal object Colors {
    val gradientColors = listOf(
        Color(0xffff0000),
        Color(0xffffff00),
        Color(0xff00ff00),
        Color(0xff00ffff),
        Color(0xff0000ff),
        Color(0xffff00ff),
        Color(0xffff0000),
    )
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/ext/drawExt.kt
================
package com.daniela.pillbox.libs.colorpicker.ext

import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.drawBehind
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.DrawScope
import androidx.compose.ui.graphics.drawscope.Stroke
import kotlin.math.roundToInt

internal fun DrawScope.drawColorSelector(color: Color, location: Offset) {
    drawCircle(color, radius = 30f, center = location)
    drawCircle(Color.White, radius = 30f, center = location, style = Stroke(5f))
    drawCircle(Color.LightGray, radius = 30f, center = location, style = Stroke(1f))
}

internal fun DrawScope.drawTransparentBackground(verticalBoxesSize: Int = 10) {
    val boxSize = size.height / verticalBoxesSize
    repeat((size.width / boxSize).roundToInt() + 1) { x ->
        repeat(verticalBoxesSize) { y ->
            drawRect(
                if ((y + x) % 2 == 0) {
                    Color.LightGray
                } else {
                    Color.White
                }, topLeft = Offset(x * boxSize, y * boxSize), size = Size(boxSize, boxSize)
            )
        }
    }
}

/**
 * Draw behind the composable a transparent effect background.
 * @param verticalBoxesAmount Amount of the white and gray boxes for a single column.
 */
fun Modifier.transparentBackground(verticalBoxesAmount: Int = 10) = this.drawBehind {
    drawTransparentBackground(verticalBoxesAmount)
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/ext/ColorExt.kt
================
package com.daniela.pillbox.libs.colorpicker.ext

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import kotlin.math.roundToInt

/**
 * Returns an integer array for all color channels value.
 */
fun Color.argb(): Array<Int> {
    val argb = toArgb()
    val alpha = argb shr 24 and 0xff
    val red = argb shr 16 and 0xff
    val green = argb shr 8 and 0xff
    val blue = argb and 0xff
    return arrayOf(alpha, red, green, blue)
}

/**
 * Returns the red value as an integer.
 */
fun Color.red(): Int {
    return toArgb() shr 16 and 0xff
}

/**
 * Returns the green value as an integer.
 */
fun Color.green(): Int {
    return toArgb() shr 8 and 0xff
}

/**
 * Returns the blue value as an integer.
 */
fun Color.blue(): Int {
    return toArgb() and 0xff
}

/**
 * Returns the alpha value as an integer.
 */
fun Color.alpha(): Int {
    return toArgb() shr 24 and 0xff
}

/**
 * Returns ARGB color as a hex string.
 * @param hexPrefix Add # char before the hex number.
 * @param includeAlpha Include the alpha value within the hex string.
 */
fun Color.toHex(hexPrefix: Boolean = false, includeAlpha: Boolean = true): String {
    val (alpha, red, green, blue) = argb()
    return buildString {
        if (hexPrefix) {
            append("#")
        }
        if (includeAlpha) {
            append(alpha.toHex())
        }
        append(red.toHex())
        append(green.toHex())
        append(blue.toHex())
    }
}

private fun Int.toHex(): String {
    return Integer.toHexString(this).let {
        if (it.length == 1) {
            "0$it"
        } else {
            it
        }
    }
}

internal fun Double.lighten(lightness: Float): Double {
    return this + (255 - this) * lightness
}

internal fun Float.lighten(lightness: Float): Float {
    return this + (255 - this) * lightness
}

internal fun Int.lighten(lightness: Float): Int {
    return (this + (255 - this) * lightness).roundToInt()
}

internal fun Double.darken(darkness: Float): Double {
    return this - this * darkness
}

internal fun Float.darken(darkness: Float): Float {
    return this - this * darkness
}

internal fun Int.darken(darkness: Float): Int {
    return (this - this * darkness).roundToInt()
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/pickers/SimpleRingColorPicker.kt
================
package com.daniela.pillbox.libs.colorpicker.pickers

import android.view.MotionEvent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.size
import androidx.compose.runtime.*
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.geometry.Size
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Paint
import androidx.compose.ui.graphics.PaintingStyle
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.graphics.drawscope.drawIntoCanvas
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.libs.colorpicker.data.ColorRange
import com.daniela.pillbox.libs.colorpicker.ext.darken
import com.daniela.pillbox.libs.colorpicker.helper.ColorPickerHelper
import com.daniela.pillbox.libs.colorpicker.helper.MathHelper
import kotlin.math.atan2
import kotlin.math.roundToInt

@ExperimentalComposeUiApi
@Composable
internal fun SimpleRingColorPicker(
    modifier: Modifier = Modifier,
    colorWidth: Dp,
    tracksCount: Int,
    sectorsCount: Int,
    onPickedColor: (Color) -> Unit
) {
    val density = LocalDensity.current
    val colorWidthPx = remember {
        with(density) { colorWidth.toPx() }
    }
    val selectColorWidth = remember {
        with(density) { colorWidthPx + 5.dp.toPx() }
    }
    var pickerLocation by remember {
        mutableStateOf(IntOffset(0, 0))
    }
    var radius by remember {
        mutableStateOf(0f)
    }
    LaunchedEffect(pickerLocation) {
        onPickedColor(
            getColorAt(
                pickerLocation.x / sectorsCount.toFloat(),
                (pickerLocation.y / tracksCount.toFloat()).coerceIn(0f, 1f)
            )
        )
    }
    Canvas(modifier = modifier
        .size(280.dp)
        .aspectRatio(1f)
        .onSizeChanged {
            radius = it.width / 2f
        }
        .pointerInteropFilter {
            when (it.action) {
                MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                    val length = MathHelper.getLength(it.x, it.y, radius)
                    val offset = radius - colorWidthPx * tracksCount
                    val trackProgress =
                        ((length - offset) / (radius - offset)).coerceIn(0f, 1f)
                    val progress = ((Math.toDegrees(
                        atan2(
                            it.y - radius,
                            it.x - radius
                        ).toDouble()
                    ) + 360) % 360) / 360f
                    pickerLocation =
                        IntOffset(
                            (sectorsCount * progress)
                                .roundToInt()
                                .coerceIn(0, sectorsCount),
                            ((tracksCount.toFloat()) * (1 - trackProgress))
                                .roundToInt()
                                .coerceIn(0, tracksCount - 1)
                        )
                }
            }
            return@pointerInteropFilter true
        }) {
        repeat(tracksCount) { track ->
            repeat(sectorsCount) {
                val degree = 360f / sectorsCount * it
                drawArc(
                    getColorAt(
                        it / sectorsCount.toFloat(),
                        (track / tracksCount.toFloat()).coerceIn(0f, 1f)
                    ),
                    degree,
                    360f / sectorsCount,
                    false,
                    topLeft = Offset(
                        track * colorWidthPx + colorWidthPx / 2 + selectColorWidth / 2,
                        track * colorWidthPx + colorWidthPx / 2 + selectColorWidth / 2
                    ),
                    size = Size(
                        size.width - (track * colorWidthPx * 2) - colorWidthPx - selectColorWidth,
                        size.height - (track * colorWidthPx * 2) - colorWidthPx - selectColorWidth
                    ),
                    style = Stroke(colorWidthPx)
                )
            }
        }
        this.drawIntoCanvas {
            val paint = Paint()
            paint.style = PaintingStyle.Stroke
            paint.strokeWidth = selectColorWidth
            val frameworkPaint = paint.asFrameworkPaint()
            frameworkPaint.color = getColorAt(
                pickerLocation.x / sectorsCount.toFloat(),
                (pickerLocation.y / tracksCount.toFloat()).coerceIn(0f, 1f)
            ).toArgb()
            frameworkPaint.setShadowLayer(50f, 0f, 0f, Color.Black.copy(alpha = 0.4f).toArgb())
            it.drawArc(
                pickerLocation.y * colorWidthPx + colorWidthPx / 2 + selectColorWidth / 2,
                pickerLocation.y * colorWidthPx + colorWidthPx / 2 + selectColorWidth / 2,
                (pickerLocation.y * colorWidthPx) + colorWidthPx / 2 + selectColorWidth / 2 + size.width - (pickerLocation.y * colorWidthPx * 2) - colorWidthPx - selectColorWidth,
                (pickerLocation.y * colorWidthPx) + colorWidthPx / 2 + selectColorWidth / 2 + size.height - (pickerLocation.y * colorWidthPx * 2) - colorWidthPx - selectColorWidth,
                360 / sectorsCount.toFloat() * pickerLocation.x,
                360f / sectorsCount,
                false,
                paint
            )
        }
    }
}

private fun getColorAt(progress: Float, deepProgress: Float): Color {
    val (rangeProgress, range) = ColorPickerHelper.calculateRangeProgress(progress.toDouble())
    val red: Int
    val green: Int
    val blue: Int
    val dark: Float = 0.5f * deepProgress
    when (range) {
        ColorRange.RedToYellow -> {
            red = 255
            green = (255f * rangeProgress)
                .roundToInt()
            blue = 0.0
                .roundToInt()
        }
        ColorRange.YellowToGreen -> {
            red = (255 * (1 - rangeProgress))
                .roundToInt()
            green = 255
            blue = 0.0
                .roundToInt()
        }
        ColorRange.GreenToCyan -> {
            red = 0.0
                .roundToInt()
            green = 255
            blue = (255 * rangeProgress)
                .roundToInt()
        }
        ColorRange.CyanToBlue -> {
            red = 0.0
                .roundToInt()
            green = (255 * (1 - rangeProgress))
                .roundToInt()
            blue = 255
        }
        ColorRange.BlueToPurple -> {
            red = (255 * rangeProgress)
                .roundToInt()
            green = 0.0
                .roundToInt()
            blue = 255
        }
        ColorRange.PurpleToRed -> {
            red = 255
            green = 0.0
                .roundToInt()
            blue = (255 * (1 - rangeProgress))
                .roundToInt()
        }
    }
    return Color(
        red.darken(dark),
        green.darken(dark),
        blue.darken(dark)
    )
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview
@Composable
private fun SimpleRingColorPickerPreview() {
    SimpleRingColorPicker(
        modifier = Modifier,
        colorWidth = 10.dp,
        tracksCount = 5,
        sectorsCount = 24,
        onPickedColor = {}
    )
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/pickers/CircleColorPicker.kt
================
package com.daniela.pillbox.libs.colorpicker.pickers

import android.view.MotionEvent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.RadialGradientShader
import androidx.compose.ui.graphics.ShaderBrush
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.libs.colorpicker.ext.blue
import com.daniela.pillbox.libs.colorpicker.ext.darken
import com.daniela.pillbox.libs.colorpicker.ext.drawColorSelector
import com.daniela.pillbox.libs.colorpicker.ext.green
import com.daniela.pillbox.libs.colorpicker.ext.lighten
import com.daniela.pillbox.libs.colorpicker.ext.red
import com.daniela.pillbox.libs.colorpicker.data.ColorRange
import com.daniela.pillbox.libs.colorpicker.data.Colors.gradientColors
import com.daniela.pillbox.libs.colorpicker.helper.BoundedPointStrategy
import com.daniela.pillbox.libs.colorpicker.helper.ColorPickerHelper
import com.daniela.pillbox.libs.colorpicker.helper.MathHelper.getBoundedPointWithInRadius
import com.daniela.pillbox.libs.colorpicker.helper.MathHelper.getLength
import kotlin.math.atan2
import kotlin.math.roundToInt

@ExperimentalComposeUiApi
@Composable
internal fun CircleColorPicker(
    modifier: Modifier = Modifier,
    showAlphaBar: Boolean,
    showBrightnessBar: Boolean,
    lightCenter: Boolean,
    onPickedColor: (Color) -> Unit
) {
    var radius by remember {
        mutableStateOf(0f)
    }
    var pickerLocation by remember(radius) {
        mutableStateOf(Offset(radius, radius))
    }
    var pickerColor by remember {
        mutableStateOf(
            if (lightCenter) {
                Color.White
            } else {
                Color.Black
            }
        )
    }
    var brightness by remember {
        mutableStateOf(0f)
    }
    var alpha by remember {
        mutableStateOf(1f)
    }
    LaunchedEffect(brightness, pickerColor, alpha) {
        onPickedColor(
            Color(
                pickerColor.red().moveColorTo(!lightCenter, brightness),
                pickerColor.green().moveColorTo(!lightCenter, brightness),
                pickerColor.blue().moveColorTo(!lightCenter, brightness),
                (255 * alpha).roundToInt()
            )
        )
    }
    Column(modifier = Modifier.width(IntrinsicSize.Max)) {
        Canvas(modifier = modifier
            .size(200.dp)
            .onSizeChanged {
                radius = it.width / 2f
            }
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                        val angle =
                            (Math.toDegrees(
                                atan2(
                                    it.y - radius,
                                    it.x - radius
                                ).toDouble()
                            ) + 360) % 360
                        val length = getLength(it.x, it.y, radius)
                        val radiusProgress = 1 - (length / radius).coerceIn(0f, 1f)
                        val angleProgress = angle / 360f
                        val (rangeProgress, range) = ColorPickerHelper.calculateRangeProgress(
                            angleProgress
                        )
                        pickerColor = when (range) {
                            ColorRange.RedToYellow -> {
                                Color(
                                    red = 255.moveColorTo(lightCenter, radiusProgress),
                                    green = (255f * rangeProgress)
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                    blue = 0.moveColorTo(lightCenter, radiusProgress),
                                )
                            }
                            ColorRange.YellowToGreen -> {
                                Color(
                                    red = (255 * (1 - rangeProgress))
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                    green = 255.moveColorTo(lightCenter, radiusProgress),
                                    blue = 0.moveColorTo(lightCenter, radiusProgress),
                                )
                            }
                            ColorRange.GreenToCyan -> {
                                Color(
                                    red = 0.moveColorTo(lightCenter, radiusProgress),
                                    green = 255.moveColorTo(lightCenter, radiusProgress),
                                    blue = (255 * rangeProgress)
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                )
                            }
                            ColorRange.CyanToBlue -> {
                                Color(
                                    red = 0.moveColorTo(lightCenter, radiusProgress),
                                    green = (255 * (1 - rangeProgress))
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                    blue = 255.moveColorTo(lightCenter, radiusProgress),
                                )
                            }
                            ColorRange.BlueToPurple -> {
                                Color(
                                    red = (255 * rangeProgress)
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                    green = 0.moveColorTo(lightCenter, radiusProgress),
                                    blue = 255.moveColorTo(lightCenter, radiusProgress),
                                )
                            }
                            ColorRange.PurpleToRed -> {
                                Color(
                                    red = 255.moveColorTo(lightCenter, radiusProgress),
                                    green = 0.moveColorTo(lightCenter, radiusProgress),
                                    blue = (255 * (1 - rangeProgress))
                                        .moveColorTo(lightCenter, radiusProgress)
                                        .roundToInt(),
                                )
                            }
                        }
                        pickerLocation = getBoundedPointWithInRadius(
                            it.x,
                            it.y,
                            length,
                            radius,
                            BoundedPointStrategy.Inside
                        )
                    }
                }
                return@pointerInteropFilter true
            }) {
            drawCircle(
                Brush.sweepGradient(gradientColors)
            )
            drawCircle(
                ShaderBrush(
                    RadialGradientShader(
                        Offset(size.width / 2f, size.height / 2f),
                        colors = listOf(
                            if (lightCenter) {
                                Color.White
                            } else {
                                Color.Black
                            }, Color.Transparent
                        ),
                        radius = size.width / 2f
                    )
                )
            )
            drawColorSelector(pickerColor, pickerLocation)
        }
        if (showBrightnessBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(
                colors = listOf(
                    if (lightCenter) {
                        Color.Black
                    } else {
                        Color.White
                    }, pickerColor
                )
            ) {
                brightness = 1 - it
            }
        }
        if (showAlphaBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(colors = listOf(Color.Transparent, pickerColor)) {
                alpha = it
            }
        }
    }
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview
@Composable
private fun CircleColorPickerPreview() {
    CircleColorPicker(
        modifier = Modifier,
        showAlphaBar = true,
        showBrightnessBar = true,
        lightCenter = true,
        onPickedColor = {}
    )
}

private fun Int.moveColorTo(toWhite: Boolean, progress: Float): Int {
    return if (toWhite) {
        lighten(progress)
    } else {
        darken(progress)
    }
}

private fun Double.moveColorTo(toWhite: Boolean, progress: Float): Double {
    return if (toWhite) {
        lighten(progress)
    } else {
        darken(progress)
    }
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/pickers/ClassicColorPicker.kt
================
package com.daniela.pillbox.libs.colorpicker.pickers

import android.view.MotionEvent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.*
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.libs.colorpicker.ext.blue
import com.daniela.pillbox.libs.colorpicker.ext.darken
import com.daniela.pillbox.libs.colorpicker.ext.drawColorSelector
import com.daniela.pillbox.libs.colorpicker.ext.green
import com.daniela.pillbox.libs.colorpicker.ext.lighten
import com.daniela.pillbox.libs.colorpicker.ext.red
import com.daniela.pillbox.libs.colorpicker.data.ColorRange
import com.daniela.pillbox.libs.colorpicker.data.Colors.gradientColors
import com.daniela.pillbox.libs.colorpicker.helper.ColorPickerHelper
import kotlin.math.roundToInt

@ExperimentalComposeUiApi
@Composable
internal fun ClassicColorPicker(
    modifier: Modifier = Modifier,
    showAlphaBar: Boolean,
    onPickedColor: (Color) -> Unit,
    initialColor: Color = Color.Red
) {
    var pickerLocation by remember {
        mutableStateOf(Offset.Zero)
    }
    var colorPickerSize by remember {
        mutableStateOf(IntSize.Zero)
    }
    var alpha by remember {
        mutableStateOf(1f)
    }
    var rangeColor by remember {
        mutableStateOf(initialColor)
    }
    var color by remember {
        mutableStateOf(initialColor)
    }
    LaunchedEffect(rangeColor, pickerLocation, colorPickerSize, alpha) {
        val xProgress = 1 - (pickerLocation.x / colorPickerSize.width)
        val yProgress = pickerLocation.y / colorPickerSize.height
        color = Color(
            rangeColor
                .red()
                .lighten(xProgress)
                .darken(yProgress),
            rangeColor
                .green()
                .lighten(xProgress)
                .darken(yProgress),
            rangeColor
                .blue()
                .lighten(xProgress)
                .darken(yProgress),
            alpha = (255 * alpha).roundToInt()
        )
    }
    LaunchedEffect(color) {
        onPickedColor(color)
    }
    Column(modifier = Modifier.width(IntrinsicSize.Max)) {
        Box(
            modifier = modifier
                .onSizeChanged {
                    colorPickerSize = it
                }
                .pointerInteropFilter {
                    when (it.action) {
                        MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                            val x = it.x.coerceIn(0f, colorPickerSize.width.toFloat())
                            val y = it.y.coerceIn(0f, colorPickerSize.height.toFloat())
                            pickerLocation = Offset(x, y)
                        }
                    }
                    return@pointerInteropFilter true
                }
                .size(200.dp)
        ) {
            Canvas(
                modifier = Modifier
                    .fillMaxSize()
                    .clip(RoundedCornerShape(8.dp))
            ) {
                drawRect(Brush.horizontalGradient(listOf(Color.White, rangeColor)))
                drawRect(Brush.verticalGradient(listOf(Color.Transparent, Color.Black)))
            }
            Canvas(modifier = Modifier.fillMaxSize()) {
                this.drawColorSelector(color.copy(alpha = 1f), pickerLocation)
            }
        }
        Spacer(modifier = Modifier.height(16.dp))
        ColorSlideBar(colors = gradientColors) {
            val (rangeProgress, range) = ColorPickerHelper.calculateRangeProgress(it.toDouble())
            val red: Int
            val green: Int
            val blue: Int
            when (range) {
                ColorRange.RedToYellow -> {
                    red = 255
                    green = (255 * rangeProgress).roundToInt()
                    blue = 0
                }

                ColorRange.YellowToGreen -> {
                    red = (255 * (1 - rangeProgress)).roundToInt()
                    green = 255
                    blue = 0
                }

                ColorRange.GreenToCyan -> {
                    red = 0
                    green = 255
                    blue = (255 * rangeProgress).roundToInt()
                }

                ColorRange.CyanToBlue -> {
                    red = 0
                    green = (255 * (1 - rangeProgress)).roundToInt()
                    blue = 255
                }

                ColorRange.BlueToPurple -> {
                    red = (255 * rangeProgress).roundToInt()
                    green = 0
                    blue = 255
                }

                ColorRange.PurpleToRed -> {
                    red = 255
                    green = 0
                    blue = (255 * (1 - rangeProgress)).roundToInt()
                }
            }
            rangeColor = Color(red, green, blue)
        }
        if (showAlphaBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(colors = listOf(Color.Transparent, rangeColor)) {
                alpha = it
            }
        }
    }
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview
@Composable
private fun ClassicColorPickerPreview() {
    ClassicColorPicker(
        modifier = Modifier,
        showAlphaBar = true,
        onPickedColor = {}
    )
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/pickers/ColorSlideBar.kt
================
package com.daniela.pillbox.libs.colorpicker.pickers

import android.view.MotionEvent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.remember
import androidx.compose.runtime.mutableStateOf
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.clipToBounds
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.IntSize
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.libs.colorpicker.data.Colors
import com.daniela.pillbox.libs.colorpicker.ext.drawTransparentBackground

private const val thumbRadius = 20f

@ExperimentalComposeUiApi
@Composable
internal fun ColorSlideBar(colors: List<Color>, onProgress: (Float) -> Unit) {
    var progress by remember {
        mutableStateOf(1f)
    }
    var slideBarSize by remember {
        mutableStateOf(IntSize.Zero)
    }
    LaunchedEffect(progress) {
        onProgress(progress)
    }
    Canvas(
        modifier = Modifier
            .fillMaxWidth()
            .height(22.dp)
            .onSizeChanged {
                slideBarSize = it
            }
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                        progress = (it.x / slideBarSize.width).coerceIn(0f, 1f)
                    }
                }
                return@pointerInteropFilter true
            }
            .clipToBounds()
            .clip(RoundedCornerShape(100))
            .border(0.2.dp, Color.LightGray, RoundedCornerShape(100))
    ) {
        drawTransparentBackground(3)
        drawRect(Brush.horizontalGradient(colors, startX = size.height/2, endX = size.width - size.height/2))
        drawCircle(
            Color.White,
            radius = thumbRadius,
            center = Offset(
                thumbRadius + (size.height / 2 - thumbRadius) + ((size.width - (thumbRadius + (size.height / 2 - thumbRadius)) * 2) * progress),
                size.height / 2
            )
        )
    }
}

@OptIn(ExperimentalComposeUiApi::class)
@Composable
@Preview
private fun ColorSlideBarPreview() {
    ColorSlideBar(Colors.gradientColors) {}
}

================
File: app/src/main/java/com/daniela/pillbox/libs/colorpicker/pickers/RingColorPicker.kt
================
package com.daniela.pillbox.libs.colorpicker.pickers

import android.view.MotionEvent
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.layout.*
import androidx.compose.runtime.*
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.layout.onSizeChanged
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Dp
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.libs.colorpicker.ext.blue
import com.daniela.pillbox.libs.colorpicker.ext.darken
import com.daniela.pillbox.libs.colorpicker.ext.drawColorSelector
import com.daniela.pillbox.libs.colorpicker.ext.green
import com.daniela.pillbox.libs.colorpicker.ext.lighten
import com.daniela.pillbox.libs.colorpicker.ext.red
import com.daniela.pillbox.libs.colorpicker.data.ColorRange
import com.daniela.pillbox.libs.colorpicker.data.Colors.gradientColors
import com.daniela.pillbox.libs.colorpicker.helper.BoundedPointStrategy
import com.daniela.pillbox.libs.colorpicker.helper.ColorPickerHelper
import com.daniela.pillbox.libs.colorpicker.helper.MathHelper.getBoundedPointWithInRadius
import com.daniela.pillbox.libs.colorpicker.helper.MathHelper.getLength
import kotlin.math.atan2
import kotlin.math.roundToInt

@ExperimentalComposeUiApi
@Composable
internal fun RingColorPicker(
    modifier: Modifier = Modifier,
    ringWidth: Dp,
    previewRadius: Dp,
    showLightColorBar: Boolean,
    showDarkColorBar: Boolean,
    showAlphaBar: Boolean,
    showColorPreview: Boolean,
    initialColor: Color,
    onPickedColor: (Color) -> Unit,
) {
    val density = LocalDensity.current
    val ringWidthPx = remember {
        with(density) { ringWidth.toPx() }
    }
    val previewRadiusPx = remember {
        with(density) { previewRadius.toPx() }
    }
    var radius by remember {
        mutableStateOf(0f)
    }
    var pickerLocation by remember(radius) {
        mutableStateOf(
            getBoundedPointWithInRadius(
                radius * 2,
                radius,
                getLength(radius * 2, radius, radius),
                radius - ringWidthPx / 2,
                BoundedPointStrategy.Edge
            )
        )
    }
    var selectedColor by remember {
        mutableStateOf(initialColor)
    }
    var color by remember {
        mutableStateOf(initialColor)
    }
    var lightColor by remember {
        mutableStateOf(initialColor)
    }
    var darkColor by remember {
        mutableStateOf(initialColor)
    }
    var lightness by remember {
        mutableStateOf(0f)
    }
    var darkness by remember {
        mutableStateOf(0f)
    }
    var alpha by remember {
        mutableStateOf(1f)
    }
    LaunchedEffect(selectedColor, lightness, darkness, alpha) {
        var red = selectedColor.red().lighten(lightness)
        var green = selectedColor.green().lighten(lightness)
        var blue = selectedColor.blue().lighten(lightness)
        lightColor = Color(red, green, blue, 255)
        red = red.darken(darkness)
        green = green.darken(darkness)
        blue = blue.darken(darkness)
        darkColor = Color(red, green, blue, 255)
        color = Color(red, green, blue, (255 * alpha).roundToInt())
        onPickedColor(color)
    }
    Column(modifier = Modifier.width(IntrinsicSize.Max)) {
        Canvas(modifier = modifier
            .size(200.dp)
            .onSizeChanged {
                radius = it.width.toFloat() / 2
            }
            .pointerInteropFilter {
                when (it.action) {
                    MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                        val red: Int
                        val green: Int
                        val blue: Int
                        val angle =
                            (Math.toDegrees(
                                atan2(
                                    it.y - radius,
                                    it.x - radius
                                ).toDouble()
                            ) + 360) % 360
                        val length = getLength(it.x, it.y, radius)
                        val progress = angle / 360f
                        val (rangeProgress, range) = ColorPickerHelper.calculateRangeProgress(
                            progress
                        )
                        when (range) {
                            ColorRange.RedToYellow -> {
                                red = 255
                                green = (255f * rangeProgress).roundToInt()
                                blue = 0
                            }
                            ColorRange.YellowToGreen -> {
                                red = (255 * (1 - rangeProgress)).roundToInt()
                                green = 255
                                blue = 0
                            }
                            ColorRange.GreenToCyan -> {
                                red = 0
                                green = 255
                                blue = (255 * rangeProgress).roundToInt()
                            }
                            ColorRange.CyanToBlue -> {
                                red = 0
                                green = (255 * (1 - rangeProgress)).roundToInt()
                                blue = 255
                            }
                            ColorRange.BlueToPurple -> {
                                red = (255 * rangeProgress).roundToInt()
                                green = 0
                                blue = 255
                            }
                            ColorRange.PurpleToRed -> {
                                red = 255
                                green = 0
                                blue = (255 * (1 - rangeProgress)).roundToInt()
                            }
                        }
                        pickerLocation = getBoundedPointWithInRadius(
                            it.x,
                            it.y,
                            length,
                            radius - ringWidthPx / 2,
                            BoundedPointStrategy.Edge
                        )
                        selectedColor = Color(red, green, blue)
                    }
                }
                return@pointerInteropFilter true
            }) {
            drawCircle(
                Brush.sweepGradient(gradientColors),
                radius = radius - ringWidthPx / 2f,
                style = Stroke(ringWidthPx)
            )
            if (showColorPreview) {
                drawCircle(
                    color,
                    radius = previewRadiusPx
                )
            }
            drawColorSelector(selectedColor, pickerLocation)
        }
        if (showLightColorBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(
                colors = listOf(
                    Color.White,
                    selectedColor
                )
            ) {
                lightness = 1 - it
            }
        }
        if (showDarkColorBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(colors = listOf(Color.Black, lightColor)) {
                darkness = 1 - it
            }
        }
        if (showAlphaBar) {
            Spacer(modifier = Modifier.height(16.dp))
            ColorSlideBar(colors = listOf(Color.Transparent, darkColor)) {
                alpha = it
            }
        }
    }
}

@OptIn(ExperimentalComposeUiApi::class)
@Preview
@Composable
private fun RingColorPickerPreview() {
    RingColorPicker(
        modifier = Modifier,
        ringWidth = 20.dp,
        previewRadius = 70.dp,
        showLightColorBar = true,
        showDarkColorBar = true,
        showAlphaBar = true,
        showColorPreview = true,
        initialColor = Color.Blue,
        onPickedColor = {}
    )
}

================
File: app/src/main/java/com/daniela/pillbox/utils/Helper.kt
================
package com.daniela.pillbox.utils

import android.content.Context
import com.daniela.pillbox.R
import io.appwrite.exceptions.AppwriteException
import java.io.IOException
import java.time.DayOfWeek
import java.time.format.TextStyle
import java.util.Locale

/**
 * Helper class with utility functions.
 */
class Helper(private val ctx: Context) {
    /**
     * Handles registration errors.
     */
    fun handleRegistrationError(e: Exception): String {
        return when (e) {
            is AppwriteException -> {
                when (e.code?.toInt()) {
                    400 -> ctx.getString(R.string.error_400)
                    401 -> ctx.getString(R.string.error_401)
                    409 -> ctx.getString(R.string.error_409)
                    500 -> ctx.getString(R.string.error_500)
                    else -> ctx.getString(R.string.error_unknown, e.message)
                }
            }

            is IOException -> ctx.getString(R.string.error_network)
            else -> ctx.getString(R.string.error_unknown)
        }
    }
}

fun getLocalizedWeekDayName(
    dayIndex: Int,
    locale: Locale = Locale.getDefault(),
    short: Boolean = false,
): String {
    val dayOfWeek = DayOfWeek.of(((dayIndex + 1) % 7).let { if (it == 0) 7 else it })
    return dayOfWeek.getDisplayName(if (short) TextStyle.SHORT else TextStyle.FULL, locale)
}

fun formatDayList(
    dayIndices: List<Int>,
    locale: Locale = Locale.getDefault(),
    finalSeparator: String = "and",
): String {
    if (dayIndices.isEmpty()) return ""
    if (dayIndices.size == 7) return "Everyday"

    val dayNames =
        dayIndices.sorted().map { getLocalizedWeekDayName(it, locale = locale, short = true) }

    return when (dayNames.size) {
        1 -> dayNames.first()
        else -> {
            val allButLast = dayNames.dropLast(1).joinToString(", ")
            "$allButLast $finalSeparator ${dayNames.last()}"
        }
    }
}

/**
 * Replacement for Kotlin's deprecated `capitalize()` function.
 * https://stackoverflow.com/questions/67843986/is-there-a-shorter-replacement-for-kotlins-deprecated-string-capitalize-funct
 */
fun String.capitalized(): String {
    return this.replaceFirstChar {
        if (it.isLowerCase())
            it.titlecase(Locale.getDefault())
        else it.toString()
    }
}

================
File: app/src/main/java/com/daniela/pillbox/utils/AlarmScheduler.kt
================
package com.daniela.pillbox.utils

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.Intent.FLAG_ACTIVITY_NEW_TASK
import android.os.Build
import android.provider.Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM
import com.daniela.pillbox.data.models.Medication
import com.daniela.pillbox.data.models.Schedule
import com.daniela.pillbox.receivers.AlarmReceiver
import java.util.Calendar

class AlarmScheduler(private val context: Context) {
    // Generate unique request code for each alarm (medicationId + schedule index + time)
    private fun generateRequestCode(medicationId: String, scheduleIndex: Int, time: String): Int {
        return (medicationId + scheduleIndex.toString() + time).hashCode()
    }

    fun scheduleAll(medication: Medication, schedules: List<Schedule>) {
        schedules.forEachIndexed { scheduleIndex, schedule ->
            schedule.times?.forEachIndexed { timeIndex, time ->
                scheduleAlarm(medication, schedule, scheduleIndex, timeIndex, time)
            }
        }
    }

    private fun scheduleAlarm(
        medication: Medication,
        schedule: Schedule,
        scheduleIndex: Int,
        timeIndex: Int,
        timeString: String,
    ) {
        val alarmManager = context.getSystemService(AlarmManager::class.java)

        // Check for Android 12+ requirements
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && !alarmManager.canScheduleExactAlarms()) {
            println("⚠️ Cannot schedule exact alarms - permission needed")
            // Launch permission request intent
            val intent = Intent(ACTION_REQUEST_SCHEDULE_EXACT_ALARM)
            intent.flags = FLAG_ACTIVITY_NEW_TASK
            context.startActivity(intent)
            return
        }

        val intent = Intent(context, AlarmReceiver::class.java).apply {
            putExtra("medicationName", medication.name)
            putExtra(
                "dosage",
                schedule.amounts?.getOrNull(timeIndex)?.toString() ?: medication.dosage
            )
            putExtra("dosageUnit", medication.dosageUnit)
            putExtra("medicationId", medication.userId)
            putExtra("scheduleIndex", scheduleIndex)
        }

        val requestCode = generateRequestCode(medication.userId, scheduleIndex, timeString)

        val pendingIntent = PendingIntent.getBroadcast(
            context,
            requestCode,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        val timeParts = timeString.split(":")
        val hour = timeParts[0].toInt()
        val minute = timeParts.getOrNull(1)?.toInt() ?: 0

        val calendar = Calendar.getInstance().apply {
            set(Calendar.HOUR_OF_DAY, hour)
            set(Calendar.MINUTE, minute)
            set(Calendar.SECOND, 0)

            if (timeInMillis <= System.currentTimeMillis()) {
                add(Calendar.DATE, 1)
            }
        }

        alarmManager.setExactAndAllowWhileIdle(
            AlarmManager.RTC_WAKEUP,
            calendar.timeInMillis,
            pendingIntent
        )
    }

    fun cancelAll(medication: Medication, schedules: List<Schedule>) {
        schedules.forEachIndexed { scheduleIndex, schedule ->
            schedule.times?.forEach { time ->
                val requestCode = generateRequestCode(medication.userId, scheduleIndex, time)
                val alarmManager = context.getSystemService(AlarmManager::class.java)
                val intent = Intent(context, AlarmReceiver::class.java)
                val pendingIntent = PendingIntent.getBroadcast(
                    context,
                    requestCode,
                    intent,
                    PendingIntent.FLAG_NO_CREATE or PendingIntent.FLAG_IMMUTABLE
                )
                pendingIntent?.let {
                    alarmManager.cancel(it)
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/receivers/BootReceiver.kt
================
package com.daniela.pillbox.receivers

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent

/**
 * Broadcast receiver for handling boot events
 */
class BootReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action == Intent.ACTION_BOOT_COMPLETED) {
            // TODO Fetch all medications from your database
            // and reschedule all alarms
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/receivers/AlarmReceiver.kt
================
package com.daniela.pillbox.receivers

import android.Manifest
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.media.AudioAttributes
import android.os.Build
import android.os.Vibrator
import android.provider.Settings
import androidx.annotation.RequiresPermission
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.daniela.pillbox.R

/**
 * Broadcast receiver for handling alarm notifications
 */
class AlarmReceiver : BroadcastReceiver() {
    @RequiresPermission(Manifest.permission.POST_NOTIFICATIONS)
    override fun onReceive(context: Context, intent: Intent) {
        println("ðŸ”¥ AlarmReceiver triggered!")

        val medicationName = intent.getStringExtra("medicationName") ?: "Medication"
        val dosage = intent.getStringExtra("dosage") ?: "1"
        val dosageUnit = intent.getStringExtra("dosageUnit") ?: "unit"
        val requestCode = intent.getIntExtra("request_code", -1)

        // 1. Create notification channel
        createHighPriorityChannel(context)

        (context.getSystemService(Context.VIBRATOR_SERVICE) as? Vibrator)?.vibrate(500)

        // 2. Build notification with high priority
        val notification = NotificationCompat.Builder(context, "HIGH_PRIORITY_CHANNEL_ID")
            .setSmallIcon(R.drawable.pill)
            .setContentTitle("Time for your medication")
            .setContentText("Take $dosage $dosageUnit of $medicationName")
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setCategory(NotificationCompat.CATEGORY_REMINDER)
            .setAutoCancel(true)
            .setOnlyAlertOnce(false)
            .setVibrate(longArrayOf(1000, 1000))
            .build()

        // 3. Gives a unique ID for each notification
        NotificationManagerCompat.from(context).notify(
            requestCode, notification
        )
    }

    /**
     * Creates a notification channel for high priority notifications
     */
    private fun createHighPriorityChannel(context: Context) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                "HIGH_PRIORITY_CHANNEL_ID",
                "Important Alerts",
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Medication reminder alerts"
                enableLights(true)
                lightColor = Color.RED
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 500, 200, 500)
                lockscreenVisibility = Notification.VISIBILITY_PUBLIC
                setSound(
                    Settings.System.DEFAULT_NOTIFICATION_URI,
                    AudioAttributes.Builder()
                        .setUsage(AudioAttributes.USAGE_NOTIFICATION)
                        .build()
                )
            }

            context.getSystemService(NotificationManager::class.java)
                .createNotificationChannel(channel)
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/LoginScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.ui.components.LabelTextField
import com.daniela.pillbox.ui.components.MyButton
import com.daniela.pillbox.viewmodels.LoginViewModel

/**
 * The login screen where users can sign in into their account.
 */
class LoginScreen : BaseScreen() {
    @Composable
    override fun Content() {
        val vm = rememberVoyagerScreenModel<LoginViewModel>()
        val navigator = LocalNavigator.currentOrThrow

        LaunchedEffect(vm.loginSuccess) {
            vm.loginSuccess.collect { success ->
                if (success) {
                    vm.getLoggedInUser().let { user ->
                        navigator.replaceAll(HomeScreen())
                    }
                }
            }
        }

        Column(
            modifier = Modifier.verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.SpaceAround
        ) {
            // Logo
            Icon(
                painter = painterResource(R.drawable.pillbox_logo),
                contentDescription = stringResource(R.string.logo),
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier
                    .fillMaxWidth()
                    .heightIn(max = 200.dp)
            )

            // Form
            Column(
                modifier = Modifier.padding(horizontal = 8.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Spacer(modifier = Modifier.height(32.dp))

                // Email TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.email),
                    value = vm.email,
                    placeholder = stringResource(R.string.email_example),
                    onValueChange = { vm.updateEmail(it) },
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Email,
                        imeAction = ImeAction.Next
                    ),
                    isError = vm.emailError != null,
                    supportingText = vm.emailError?.let { stringResource(it) },
                )

                Spacer(Modifier.height(16.dp))

                // Password TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.password),
                    value = vm.password,
                    placeholder = stringResource(R.string.password_example),
                    onValueChange = { vm.updatePassword(it) },
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Password,
                        imeAction = ImeAction.Done,
                    ),
                    visualTransformation = PasswordVisualTransformation(),
                    isError = vm.passwordError != null,
                    supportingText = vm.passwordError?.let { stringResource(it) },
                    keyboardActions = KeyboardActions(
                        onDone = { vm.login() }
                    ),
                )

                vm.apiError?.let { error ->
                    Spacer(Modifier.height(16.dp))
                    Text(
                        text = error,
                        color = MaterialTheme.colorScheme.error,
                    )
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Login Button
                MyButton(
                    onClick = { vm.login() },

                    modifier = Modifier.fillMaxWidth(),
                    enabled = !vm.isLoading
                ) {
                    Text(stringResource(R.string.login), fontSize = 16.sp)
                }

                Spacer(modifier = Modifier.height(16.dp))

                // Create Account Text
                TextButton(
                    onClick = { navigator.replaceAll(RegisterScreen()) }) {
                    Text(stringResource(R.string.no_account_signup), fontSize = 14.sp)
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/HomeScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.MoreVert
import androidx.compose.material3.Button
import androidx.compose.material3.DropdownMenu
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.unit.dp
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.Navigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.ui.components.FullScreenLoader
import com.daniela.pillbox.ui.components.MedicationItem
import com.daniela.pillbox.viewmodels.HomeViewModel
import com.daniela.pillbox.viewmodels.HomeViewModel.AuthState
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale

/**
 * The main screen of the application, displaying the user's medications for the current day.
 */
class HomeScreen : BaseScreen() {
    @Composable
    override fun Content() {
        val navigator = LocalNavigator.currentOrThrow
        val vm = rememberVoyagerScreenModel<HomeViewModel>()
        val authState = vm.authState.collectAsState()

        // Observe changes in the authentication state and navigate accordingly.
        LaunchedEffect(authState) {
            vm.authState.collect { state ->
                when (state) {
                    is AuthState.Loading -> {} /* Show loading if needed */
                    is AuthState.Authenticated -> {} /* User is logged in */
                    is AuthState.Unauthenticated -> navigator.replaceAll(LoginScreen())
                }
            }
        }

        if (vm.isLoading)
            FullScreenLoader()
        else
            MainContent(vm, navigator)
    }

    /**
     * Displays the main content of the HomeScreen, including the header, date, greeting, and medication list.
     *
     * @param vm The HomeViewModel instance.
     * @param navigator The Voyager navigator for handling screen transitions.
     */
    @Composable
    fun MainContent(vm: HomeViewModel, navigator: Navigator) {
        // Header with date and menu
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Header
            Column {
                // Date
                Text(
                    text = SimpleDateFormat("EEEE, MMM d", Locale.getDefault()).format(Date()),
                    style = MaterialTheme.typography.headlineMedium,
                    color = MaterialTheme.colorScheme.primary
                )

                // Greeting
                Text(
                    text = vm.getGreeting(),
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.75f),
                    modifier = Modifier.padding(top = 4.dp)
                )
            }

            // Options Menu
            Box {
                IconButton(onClick = { vm.showMenu = true }) {
                    Icon(Icons.Default.MoreVert, contentDescription = stringResource(R.string.menu))
                }
                DropdownMenu(
                    expanded = vm.showMenu,
                    onDismissRequest = { vm.showMenu = false }
                ) {
                    DropdownMenuItem(
                        text = { Text(stringResource(R.string.storage)) },
                        onClick = { navigator.push(StorageScreen()) }
                    )
                    DropdownMenuItem(
                        text = { Text(stringResource(R.string.reload)) },
                        onClick = { /*navigator.push(StorageScreen())*/ }
                    )
                    DropdownMenuItem(
                        text = { Text(stringResource(R.string.logout)) },
                        onClick = { vm.logout() }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(24.dp))

        // Today's medications
        Text(
            text = stringResource(R.string.today_s_medications),
            style = MaterialTheme.typography.titleMedium,
            modifier = Modifier.padding(bottom = 8.dp)
        )

        // Scrollable Medication List
        LazyColumn(
            modifier = Modifier.fillMaxWidth(),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            item {
                Button(
                    onClick = {
                        vm.testAlarmSystem()
                    }
                ) {
                    Text(stringResource(R.string.add_alarm))
                }
            }

            items(vm.medications) { med ->
                MedicationItem(
                    medication = med,
                    isChecked = vm.isMedicationTaken(med.name),
                    onCheckedChange = { vm.toggleMedication(med.name) }

                )
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/BaseScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext
import cafe.adriel.voyager.core.model.ScreenModel
import cafe.adriel.voyager.core.model.rememberScreenModel
import cafe.adriel.voyager.core.screen.Screen
import org.koin.compose.getKoin
import org.koin.core.parameter.parametersOf

/**
 * Base class for all screens in the application.
 */
abstract class BaseScreen : Screen {
    /**
     * Creates and remembers a [ScreenModel] instance.
     */
    @Composable
    inline fun <reified T : ScreenModel> rememberVoyagerScreenModel(): T {
        val koin = getKoin()
        val context = LocalContext.current
        return rememberScreenModel {
            koin.get(parameters = { parametersOf(context) })
        }
    }

    /**
     * Creates and remembers a [ScreenModel] instance with parameters.
     */
    @Composable
    inline fun <reified T : ScreenModel> rememberVoyagerScreenModel(vararg params: Any?): T {
        val koin = getKoin()
        val context = LocalContext.current
        return rememberScreenModel {
            koin.get(parameters = { parametersOf(context, *params) })
        }
    }

    /**
     * Content of the screen
     */
    @Composable
    abstract override fun Content()
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/AddScheduleScreen.kt
================
package com.daniela.pillbox.ui.screens

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.ChevronLeft
import androidx.compose.material.icons.rounded.Close
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.Checkbox
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.ui.components.LabelTextField
import com.daniela.pillbox.ui.components.TimePickerButton
import com.daniela.pillbox.viewmodels.AddScheduleViewModel

class AddScheduleScreen(
    private val medicationId: String,
    private val schedulesToEdit: List<ScheduleWithDocId>? = null,
) : BaseScreen() {
    @Composable
    override fun Content() {
        val navigator = LocalNavigator.currentOrThrow
        val vm = rememberVoyagerScreenModel<AddScheduleViewModel>(medicationId, schedulesToEdit)
        val state by vm.uiState

        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Top Bar
            Row(
                modifier = Modifier
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                IconButton(onClick = { navigator.pop() }) {
                    Icon(
                        imageVector = Icons.Rounded.ChevronLeft,
                        contentDescription = stringResource(R.string.back),
                        tint = MaterialTheme.colorScheme.onSurface
                    )
                }
                Spacer(modifier = Modifier.width(16.dp))
                Text(
                    text = "New Schedule",
                    style = MaterialTheme.typography.headlineSmall,
                    modifier = Modifier.weight(1f)
                )
            }

            // Toggle for "As Needed" schedule
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                Checkbox(
                    checked = state.asNeeded,
                    onCheckedChange = { vm.toggleAsNeeded() }
                )
                Text(
                    text = "Take as needed",
                    style = MaterialTheme.typography.bodyLarge,
                    modifier = Modifier.clickable { vm.toggleAsNeeded() }
                )
            }

            // List of schedule entries
            if (!state.asNeeded) {
                state.schedules.forEachIndexed { index, schedule ->
                    ScheduleEntryItem(
                        schedule = schedule,
                        state = state,
                        index = index,
                        vm = vm
                    )
                }

                if (schedulesToEdit == null)
                    // Add new schedule pattern button
                    Button(
                        onClick = vm::addSchedule,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Text(stringResource(R.string.add_another_schedule_pattern))
                    }
            }

            // Action buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.End
            ) {
                TextButton(onClick = { }) {
                    Text(stringResource(R.string.cancel))
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(
                    onClick = { vm.saveSchedule(); navigator.pop() }
                ) {
                    Text(stringResource(R.string.save_schedule))
                }
            }
        }
    }

    @Composable
    private fun ScheduleEntryItem(
        vm: AddScheduleViewModel,
        state: AddScheduleViewModel.AddScheduleUiState,
        schedule: ScheduleWithDocId,
        index: Int,
    ) {
        Card(
            shape = MaterialTheme.shapes.medium,
            modifier = Modifier.fillMaxWidth(),
        ) {
            Column(
                modifier = Modifier.padding(16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                Text(stringResource(R.string.on_these_days))
                // Days selection
                val days = schedule.weekDays ?: emptyList()
                WeekDaySelector(
                    selectedDays = days,
                    onDaySelected = { day ->
                        val newDays = if (days.contains(day)) {
                            days - day
                        } else {
                            days + day
                        }
                        vm.updateSchedule(index, schedule.copy(weekDays = newDays))
                    }
                )

                // Times with amounts
                val timesWithAmounts =
                    (schedule.times ?: listOf("00:00")).zip((schedule.amounts ?: listOf(1)))

                timesWithAmounts.forEachIndexed { timeIndex, (time, amount) ->
                    Row(
                        verticalAlignment = Alignment.Top,
                        horizontalArrangement = Arrangement.SpaceBetween,
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        // Time input
                        TimePickerButton(
                            onTimeSelected = { hour, min ->
                                val newTime = String.format(null, "%02d:%02d", hour, min)
                                val updatedTimes = timesWithAmounts.toMutableList().apply {
                                    set(timeIndex, newTime to amount)
                                }
                                vm.updateSchedule(
                                    index, schedule.copy(
                                        times = updatedTimes.map { it.first },
                                    )
                                )
                            },
                            initialTime = time.split(":").map { it.toInt() }
                        )

                        // Amount input
                        LabelTextField(
                            modifier = Modifier.width(80.dp),
                            label = stringResource(R.string.amount),
                            value = amount.toString(),
                            onValueChange = { newAmount ->
                                val updatedTimes =
                                    timesWithAmounts.toMutableList().apply {
                                        set(timeIndex, time to (newAmount.toIntOrNull() ?: 1))
                                    }
                                vm.updateSchedule(
                                    index, schedule.copy(
                                        amounts = updatedTimes.map { it.second }
                                    ))
                            },
                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
                        )

                        // Remove time button
                        if (timeIndex > 0) {
                            IconButton(onClick = {
                                val updatedTimes =
                                    timesWithAmounts.toMutableList().apply {
                                        removeAt(timeIndex)
                                    }
                                vm.updateSchedule(
                                    index, schedule.copy(
                                        times = updatedTimes.map { it.first },
                                    )
                                )
                            }) {
                                Icon(Icons.Rounded.Close, stringResource(R.string.remove_time))
                            }
                        }
                    }
                }

                // Add time button
                Button(
                    onClick = {
                        val updatedTimes = timesWithAmounts + ("00:00" to 1)
                        Log.i("TAG", "ScheduleEntryItem: $updatedTimes")
                        vm.updateSchedule(
                            index, schedule.copy(
                                times = updatedTimes.map { it.first },
                                amounts = updatedTimes.map { it.second }
                            )
                        )
                    },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(stringResource(R.string.add_another_time))
                }


                // Remove entire schedule pattern button
                if (schedule !== state.schedules.first()) {
                    OutlinedButton(
                        onClick = { vm.removeSchedule(index) },
                        modifier = Modifier.fillMaxWidth(),
                        colors = ButtonDefaults.outlinedButtonColors(
                            contentColor = MaterialTheme.colorScheme.error
                        )
                    ) {
                        Text(stringResource(R.string.remove_this_pattern))
                    }
                }
            }
        }
    }

    @Composable
    private fun WeekDaySelector(
        selectedDays: List<Int>,
        onDaySelected: (Int) -> Unit,
    ) {
        // Days labels starting with Monday
        // TODO: Translate this
        // TODO: Change colors
        val days = listOf("M", "T", "W", "T", "F", "S", "S")
        // Day indices now Monday(0) to Sunday(6) - adjusted to start with Monday
        val dayIndices = listOf(0, 1, 2, 3, 4, 5, 6)

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            dayIndices.forEachIndexed { index, day ->
                val isSelected = selectedDays.contains(day)
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .clip(CircleShape)
                        .background(
                            if (isSelected) MaterialTheme.colorScheme.primary
                            else MaterialTheme.colorScheme.primaryContainer
                        )
                        .clickable { onDaySelected(day) },
                    contentAlignment = Alignment.Center
                ) {
                    Text(
                        text = days[index],
                        color = if (isSelected) MaterialTheme.colorScheme.onPrimary
                        else MaterialTheme.colorScheme.onSurface,
                        fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal
                    )
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/StorageScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.WindowInsets
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Medication
import androidx.compose.material.icons.rounded.Add
import androidx.compose.material.icons.rounded.ChevronLeft
import androidx.compose.material.icons.rounded.Close
import androidx.compose.material.icons.rounded.Delete
import androidx.compose.material.icons.rounded.Search
import androidx.compose.material3.Badge
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FilterChip
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.SearchBar
import androidx.compose.material3.SearchBarDefaults
import androidx.compose.material3.Text
import androidx.compose.material3.pulltorefresh.PullToRefreshBox
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.core.graphics.toColorInt
import androidx.lifecycle.SavedStateHandle
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.Navigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.ui.components.DeleteConfirmationDialog
import com.daniela.pillbox.ui.components.FullScreenLoader
import com.daniela.pillbox.utils.capitalized
import com.daniela.pillbox.viewmodels.StorageViewModel

/**
 * Screen for managing medication storage.
 */
class StorageScreen : BaseScreen() {
    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    override fun Content() {
        val navigator = LocalNavigator.currentOrThrow
        val ssh = SavedStateHandle()
        val vm = rememberVoyagerScreenModel<StorageViewModel>(ssh)
        val state by vm.uiState

        PullToRefreshBox(
            modifier = Modifier.fillMaxSize(),
            isRefreshing = state.isLoading,
            onRefresh = vm::refresh
        ) {
            if (state.showDeleteDialog)
                DeleteConfirmationDialog(
                    description = stringResource(R.string.are_you_sure_you_want_to_delete_this_medication),
                    title = stringResource(R.string.ask_delete_medication),
                    onDismiss = vm::dismissDialog,
                    onConfirm = vm::confirmDeleteMedication
                )

            Column(modifier = Modifier.fillMaxSize()) {
                // Top Bar
                Row(
                    modifier = Modifier
                        .fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    IconButton(onClick = { navigator.pop() }) {
                        Icon(
                            imageVector = Icons.Rounded.ChevronLeft,
                            contentDescription = stringResource(R.string.back),
                            tint = MaterialTheme.colorScheme.onSurface
                        )
                    }
                    Spacer(modifier = Modifier.width(16.dp))
                    Text(
                        text = stringResource(R.string.medication_storage),
                        style = MaterialTheme.typography.headlineSmall,
                        modifier = Modifier.weight(1f)
                    )
                }

                // Search bar
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp)
                ) {
                    SearchBar(
                        query = state.searchQuery,
                        onQueryChange = vm::onSearchQueryChanged,
                        onSearch = { },
                        active = false,
                        onActiveChange = { },
                        modifier = Modifier
                            .fillMaxWidth()
                            .align(Alignment.TopStart),
                        placeholder = { Text(stringResource(R.string.search_medications)) },
                        leadingIcon = { Icon(Icons.Rounded.Search, contentDescription = null) },
                        trailingIcon = {
                            if (state.searchQuery.isNotEmpty()) {
                                IconButton(onClick = { vm.onSearchQueryChanged("") }) {
                                    Icon(Icons.Rounded.Close, contentDescription = stringResource(R.string.clear))
                                }
                            }
                        },
                        colors = SearchBarDefaults.colors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        ),
                        windowInsets = WindowInsets(0.dp) // Remove system insets
                    ) {
                        // Empty content since we're not using suggestions
                    }
                }

                // Filter chips
                LazyRow(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    items(vm.filters) { filter ->
                        FilterChip(
                            selected = state.selectedFilter == filter,
                            onClick = { vm.onFilterSelected(filter) },
                            label = { Text(filter) }
                        )
                    }
                }

                when {
                    state.isLoading -> FullScreenLoader()
                    state.error != null -> ErrorView(state.error)
                    else -> MedicationList(state.filteredMedications, navigator, vm)
                }

            }
        }
    }

    @Composable
    private fun ErrorView(error: String?) {
        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
            Text(
                error ?: stringResource(R.string.there_was_an_error),
                style = MaterialTheme.typography.bodyLarge,
                color = MaterialTheme.colorScheme.error
            )
        }
    }

    @Composable
    private fun MedicationList(
        filteredMedications: List<MedicationWithDocId>,
        navigator: Navigator,
        vm: StorageViewModel, // Add ViewModel parameter
    ) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.BottomEnd
        ) {
            // Display
            if (filteredMedications.isEmpty()) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Text(stringResource(R.string.no_medications_found), style = MaterialTheme.typography.bodyLarge)
                }
            } else {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxSize(),
                    contentPadding = PaddingValues(top = 16.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    items(filteredMedications) { medication ->
                        MedicationStorageItem(
                            medication = medication,
                            onClick = {
                                navigator.push(MedicationDetailsScreen(medication))
                            },
                            onDelete = {
                                medication.docId?.let { docId ->
                                    vm.deleteMedication(docId)
                                }
                            },
                        )
                    }
                }
            }

            // Add button
            FloatingActionButton(
                onClick = { navigator.push(AddMedicationScreen()) },
                modifier = Modifier.padding(16.dp),
                containerColor = MaterialTheme.colorScheme.primary
            ) {
                Icon(Icons.Rounded.Add, contentDescription = stringResource(R.string.add_medication))
            }
        }
    }
}

/**
 * Medication card item in the storage screen.
 */
@Composable
private fun MedicationStorageItem(
    medication: MedicationWithDocId,
    onClick: () -> Unit,
    onDelete: () -> Unit,
    modifier: Modifier = Modifier,
) {
    Card(
        onClick = onClick,
        modifier = modifier.fillMaxWidth(),
        shape = MaterialTheme.shapes.large
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                // Medication icon/color indicator
                Box(
                    modifier = Modifier
                        .size(40.dp)
                        .background(
                            color = medication.color?.let { Color(it.toColorInt()) }
                                ?: MaterialTheme.colorScheme.primaryContainer,
                            shape = CircleShape
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.Medication,
                        contentDescription = null,
                        tint = MaterialTheme.colorScheme.onPrimaryContainer
                    )
                }

                Spacer(modifier = Modifier.width(16.dp))

                // Main info
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = medication.name,
                        style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold)
                    )
                    Text(
                        text = "${medication.dosage}${medication.dosageUnit} ${medication.type.capitalized()}",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }

                // Delete button
                IconButton(
                    onClick = onDelete,
                    modifier = Modifier.size(24.dp)
                ) {
                    Icon(
                        imageVector = Icons.Rounded.Delete,
                        contentDescription = stringResource(R.string.delete_medication),
                        tint = MaterialTheme.colorScheme.error
                    )
                }
            }

            // Bottom Row: Notes + Stock
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 5.dp)
            ) {
                // Notes (if exists)
                medication.notes?.let { notes ->
                    Text(
                        text = notes,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.8f),
                        modifier = Modifier.weight(1f),
                        maxLines = 2
                    )
                } ?: Spacer(modifier = Modifier.weight(1f))

                // Stock Indicator
                StockIndicator(stock = medication.stock)
            }
        }
    }
}


/**
 * Stock indicator for the medication card.
 */
@Composable
private fun StockIndicator(stock: Int?) {
    // If stock is null, don't show the indicator
    if (stock == null) return
    Badge(
        containerColor = when {
            stock <= 0 -> MaterialTheme.colorScheme.errorContainer
            stock < 5 -> MaterialTheme.colorScheme.errorContainer.copy(alpha = 0.5f)
            else -> MaterialTheme.colorScheme.surfaceVariant
        },
        contentColor = when {
            stock <= 0 -> MaterialTheme.colorScheme.onErrorContainer
            stock < 5 -> MaterialTheme.colorScheme.onErrorContainer
            else -> MaterialTheme.colorScheme.onSurfaceVariant
        }
    ) {
        Text(
            text = when {
                stock <= 0 -> stringResource(R.string.out)
                stock < 5 -> stringResource(R.string.low, stock)
                else -> stringResource(R.string.left, stock)
            },
            style = MaterialTheme.typography.labelSmall
        )
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/AddMedicationScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.rounded.ArrowBack
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.ExperimentalComposeUiApi
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.core.graphics.toColorInt
import androidx.lifecycle.SavedStateHandle
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.libs.colorpicker.ColorPicker
import com.daniela.pillbox.libs.colorpicker.ColorPickerType
import com.daniela.pillbox.ui.components.DropDownMenu
import com.daniela.pillbox.ui.components.LabelTextField
import com.daniela.pillbox.ui.components.MyButton
import com.daniela.pillbox.viewmodels.AddMedicationViewModel

/**
 * Screen for adding a new medication.
 */
class AddMedicationScreen(private val medicationToEdit: MedicationWithDocId? = null) : BaseScreen() {
    @OptIn(ExperimentalComposeUiApi::class)
    @Composable
    override fun Content() {
        val ssh = SavedStateHandle()
        val vm = rememberVoyagerScreenModel<AddMedicationViewModel>(ssh, medicationToEdit)

        val scrollState = rememberScrollState()
        val navigator = LocalNavigator.currentOrThrow

        LaunchedEffect(vm.success) {
            vm.success.collect { success ->
                if (success) {
                    navigator.pop()
                }
            }
        }

        Column(modifier = Modifier.fillMaxSize()) {
            // ActionBar and Title
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Back button
                IconButton(onClick = { navigator.pop() }) {
                    Icon(
                        Icons.AutoMirrored.Rounded.ArrowBack,
                        contentDescription = stringResource(R.string.back),
                        tint = MaterialTheme.colorScheme.primary
                    )
                }

                // Title
                Text(
                    text = stringResource(R.string.new_medication),
                    style = MaterialTheme.typography.headlineMedium,
                    color = MaterialTheme.colorScheme.primary
                )
            }

            // Form content
            Column(
                modifier = Modifier
                    .weight(1f)
                    .verticalScroll(scrollState),
            ) {
                // Medication Name
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.medication_name),
                    value = vm.name,
                    onValueChange = { vm.onNameChange(it) },
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
                )

                // Dosage Information
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    LabelTextField(
                        modifier = Modifier.weight(1f),
                        label = stringResource(R.string.dosage),
                        value = vm.dosage,
                        onValueChange = { vm.onDosageChange(it) },
                        keyboardOptions = KeyboardOptions(
                            keyboardType = KeyboardType.Number, imeAction = ImeAction.Next
                        ),
                    )

                    LabelTextField(
                        modifier = Modifier.weight(1f),
                        label = stringResource(R.string.unit),
                        value = vm.dosageUnit,
                        onValueChange = { vm.onDosageUnitChange(it) },
                    )
                }

                // Medication Type Dropdown
                DropDownMenu(
                    list = vm.medicationTypes,
                    label = stringResource(R.string.type),
                    onSelected = { vm.onTypeChange(vm.medicationTypes[it]) },
                )

                // Stock Quantity
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    value = vm.stock,
                    onValueChange = { vm.onStockChange(it) },
                    label = stringResource(R.string.stock_quantity),
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Number,
                        imeAction = ImeAction.Next
                    )
                )

                // Instructions
                LabelTextField(
                    value = vm.instructions,
                    onValueChange = { vm.onInstructionsChange(it) },
                    label = stringResource(R.string.instructions),
                    modifier = Modifier.fillMaxWidth(),
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Text,
                        imeAction = ImeAction.Next
                    )
                )

                // Notes
                LabelTextField(
                    value = vm.notes,
                    onValueChange = { vm.onNotesChange(it) },
                    label = stringResource(R.string.notes),
                    modifier = Modifier.fillMaxWidth(),
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Text,
                        imeAction = ImeAction.Next
                    )
                )

                // Color Picker
                Box(
                    modifier = Modifier.fillMaxWidth(),
                    contentAlignment = Alignment.Center
                ) {
                    ColorPicker(
                        onPickedColor = vm::onColorChange,
                        type = ColorPickerType.Ring(
                            showAlphaBar = false,
                            initialColor = Color(vm.color.toColorInt()),
                            ringWidth = 20.dp
                        ),
                    )
                }

                // Save Button
                MyButton(
                    onClick = vm::onSubmit,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(16.dp),
                    enabled = true
                ) {
                    Text(stringResource(R.string.save_medication))
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/MedicationDetailsScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Medication
import androidx.compose.material.icons.rounded.ChevronLeft
import androidx.compose.material.icons.rounded.Delete
import androidx.compose.material.icons.rounded.Edit
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.core.graphics.toColorInt
import cafe.adriel.voyager.core.annotation.ExperimentalVoyagerApi
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.Navigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.ui.components.DayIndicator
import com.daniela.pillbox.ui.components.DeleteConfirmationDialog
import com.daniela.pillbox.ui.components.FullScreenLoader
import com.daniela.pillbox.viewmodels.MedicationDetailsViewModel

class MedicationDetailsScreen(
    private val medication: MedicationWithDocId,
) : BaseScreen() {
    @OptIn(ExperimentalVoyagerApi::class)
    @Composable
    override fun Content() {
        val navigator = LocalNavigator.currentOrThrow
        val vm = rememberVoyagerScreenModel<MedicationDetailsViewModel>(medication)
        val state by vm.uiState

        // Reload schedule list when the screen is resumed
        LaunchedEffect(navigator) {
            // if the screen is at the top of the pile
            if (navigator.items.last() is MedicationDetailsScreen) {
                vm.loadSchedules()
            }
        }

        if (state.showDeleteDialog)
            DeleteConfirmationDialog(
                description = stringResource(R.string.are_you_sure_you_want_to_delete_this_schedule),
                title = stringResource(R.string.delete_schedule),
                onDismiss = vm::dismissDialog,
                onConfirm = vm::confirmDeleteSchedule
            )

        LazyColumn(
            modifier = Modifier.fillMaxSize(),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Top Bar
            item {
                TopBar(navigator)
            }

            // Content
            item {
                Column(
                    modifier = Modifier.padding(horizontal = 16.dp),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    // Header with name and type
                    Header()

                    // Details
                    DetailsCard {
                        navigator.replace(AddMedicationScreen(medication))
                    }

                    // Action Buttons
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        OutlinedButton(
                            onClick = { navigator.push(AddScheduleScreen(medication.docId!!, state.schedules)) },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text(stringResource(R.string.edit_schedules))
                        }

                        Button(
                            onClick = { navigator.push(AddScheduleScreen(medication.docId!!)) },
                            modifier = Modifier.weight(1f)
                        ) {
                            Text(stringResource(R.string.add_schedule))
                        }
                    }
                }
            }

            // Schedules
            if (state.isLoading)
                item {
                    FullScreenLoader()
                }
            else
                items(state.schedules) { schedule ->
                    ScheduleItem(
                        schedule = schedule,
                        onDelete = {
                            schedule.docId?.let {
                                vm.deleteSchedule(it)
                            }
                        }
                    )
                }
        }
    }

    @Composable
    private fun TopBar(navigator: Navigator) {
        Row(
            modifier = Modifier
                .fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(onClick = { navigator.pop() }) {
                Icon(
                    imageVector = Icons.Rounded.ChevronLeft,
                    contentDescription = stringResource(R.string.back),
                    tint = MaterialTheme.colorScheme.onSurface
                )
            }
            Spacer(modifier = Modifier.width(16.dp))
            Text(
                text = stringResource(R.string.medication_details),
                style = MaterialTheme.typography.headlineSmall,
                modifier = Modifier.weight(1f)
            )
        }
    }

    @Composable
    private fun Header() {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier.fillMaxWidth()
        ) {
            // Color indicator
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .background(
                        color = medication.color?.let { Color(it.toColorInt()) }
                            ?: MaterialTheme.colorScheme.primaryContainer,
                        shape = CircleShape
                    ),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.Medication,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onPrimaryContainer,
                    modifier = Modifier.size(24.dp)
                )
            }

            Spacer(modifier = Modifier.width(16.dp))

            Column {
                Text(
                    text = medication.name,
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold
                )
                Text(
                    text = medication.type.replaceFirstChar { it.uppercase() },
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                )
            }
        }
    }

    @Composable
    private fun DetailsCard(
        onClick: () -> Unit,
    ) {
        Card(
            shape = MaterialTheme.shapes.medium,
            modifier = Modifier.fillMaxWidth(),
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Box(modifier = Modifier.fillMaxWidth()) {
                IconButton(
                    onClick = onClick,
                    modifier = Modifier
                        .align(Alignment.TopEnd)
                        .padding(8.dp)
                ) {
                    Icon(
                        imageVector = Icons.Rounded.Edit,
                        contentDescription = stringResource(R.string.edit),
                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                Column(
                    modifier = Modifier.padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // Dosage Information
                    DetailRow(
                        label = stringResource(R.string.dosage),
                        value = "${medication.dosage} ${medication.dosageUnit}"
                    )

                    // Stock Information with warning for low stock
                    DetailRow(
                        label = stringResource(R.string.current_stock),
                        value = when {
                            medication.stock == null -> stringResource(R.string.not_tracked)
                            medication.stock <= 0 -> stringResource(R.string.out_of_stock)
                            else -> stringResource(R.string.remaining, medication.stock)
                        },
                        isWarning = medication.stock?.let { it < 5 } == true
                    )

                    // Medication Type
                    DetailRow(
                        label = stringResource(R.string.medication_type),
                        value = medication.type.replaceFirstChar { it.uppercase() }
                    )

                    // Instructions (if available)
                    medication.instructions?.let { instructions ->
                        DetailRow(
                            label = stringResource(R.string.instructions),
                            value = instructions,
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }

                    // Notes (if available)
                    medication.notes?.let { notes ->
                        DetailRow(
                            label = stringResource(R.string.additional_notes),
                            value = notes,
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }
            }
        }
    }

    @Composable
    private fun DetailRow(
        modifier: Modifier = Modifier,
        label: String,
        value: String,
        isWarning: Boolean = false,
        textStyle: TextStyle = MaterialTheme.typography.bodyLarge,
    ) {
        Column(modifier = modifier.padding(horizontal = 16.dp)) {
            Text(
                text = label,
                style = MaterialTheme.typography.labelMedium,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
            )
            Text(
                text = value,
                style = textStyle,
                color = when {
                    isWarning -> MaterialTheme.colorScheme.error
                    else -> MaterialTheme.colorScheme.onSurface
                },
                modifier = Modifier.padding(top = 2.dp)
            )
        }
    }

    @Composable
    fun ScheduleItem(
        schedule: ScheduleWithDocId,
        onDelete: () -> Unit,
        modifier: Modifier = Modifier,
    ) {
        Card(
            modifier = modifier
                .fillMaxWidth()
                .padding(horizontal = 8.dp),
            shape = MaterialTheme.shapes.medium,
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                // Days & buttons row
                Row(verticalAlignment = Alignment.CenterVertically) {
                    if (schedule.asNeeded)
                        Text(
                            text = stringResource(R.string.as_needed),
                            style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
                            color = MaterialTheme.colorScheme.onSurface,
                        )
                    else
                        schedule.weekDays?.let { days ->
                            DayIndicator(days = days)
                        }

                    Spacer(Modifier.weight(1f))

                    // Delete button
                    IconButton(onClick = onDelete, modifier = Modifier.padding(0.dp)) {
                        Icon(
                            Icons.Rounded.Delete,
                            stringResource(R.string.delete),
                            tint = MaterialTheme.colorScheme.error,
                            modifier = Modifier.padding(0.dp)
                        )
                    }
                }

                Spacer(modifier = Modifier.height(8.dp))

                // Times and amounts
                if (!schedule.asNeeded)
                    schedule.times?.let { times ->
                        val amounts = schedule.amounts ?: List(times.size) { 1 }

                        Column {
                            Text(
                                text = stringResource(R.string.times),
                                style = MaterialTheme.typography.labelLarge,
                                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                            )
                            times.zip(amounts).forEach { (time, amount) ->
                                Row {
                                    Text(
                                        text = time,
                                        style = MaterialTheme.typography.bodyLarge,
                                        modifier = Modifier.padding(start = 16.dp, top = 4.dp)
                                    )
                                    Spacer(Modifier.weight(1f))
                                    Text(
                                        text = stringResource(R.string.units, amount),
                                        style = MaterialTheme.typography.bodyLarge,
                                        modifier = Modifier.padding(end = 16.dp, top = 4.dp)
                                    )
                                }
                            }
                        }
                    }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/screens/RegisterScreen.kt
================
package com.daniela.pillbox.ui.screens

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import cafe.adriel.voyager.navigator.LocalNavigator
import cafe.adriel.voyager.navigator.currentOrThrow
import com.daniela.pillbox.R
import com.daniela.pillbox.ui.components.FullScreenLoader
import com.daniela.pillbox.ui.components.LabelTextField
import com.daniela.pillbox.ui.components.MyButton
import com.daniela.pillbox.viewmodels.RegisterViewModel

/**
 * The registration screen where users can create a new account.
 */
class RegisterScreen : BaseScreen() {
    @Composable
    override fun Content() {
        val navigator = LocalNavigator.currentOrThrow
        val vm: RegisterViewModel = rememberVoyagerScreenModel<RegisterViewModel>()

        // Show a loading indicator while the registration process is in progress.
        if (vm.isLoading) {
            FullScreenLoader()
        }

        // Observe the registration success state and navigate to the home screen upon successful registration.
        LaunchedEffect(vm.registerSuccess) {
            vm.registerSuccess.collect { success ->
                if (success) {
                    navigator.replaceAll(HomeScreen())
                }
            }
        }

        Column(
            modifier = Modifier.verticalScroll(rememberScrollState()),
            verticalArrangement = Arrangement.SpaceAround
        ) {
            // Logo
            Icon(
                painter = painterResource(R.drawable.pillbox_logo),
                contentDescription = stringResource(R.string.logo),
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier
                    .fillMaxWidth()
                    .heightIn(max = 200.dp)
            )

            // Form
            Column(
                modifier = Modifier.padding(horizontal = 8.dp),
                verticalArrangement = Arrangement.Center,
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Name TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.name),
                    value = vm.name,
                    placeholder = stringResource(R.string.name_example),
                    onValueChange = { vm.updateName(it) },
                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Next),
                    isError = vm.nameError != null,
                    supportingText = vm.nameError?.let { stringResource(it) },

                )

                Spacer(modifier = Modifier.height(16.dp))

                // Email TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.email),
                    value = vm.email,
                    placeholder = stringResource(R.string.email_example),
                    onValueChange = { vm.updateEmail(it) },
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Email,
                        imeAction = ImeAction.Next
                    ),
                    isError = vm.emailError != null,
                    supportingText = vm.emailError?.let { stringResource(it) },
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Password TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.password),
                    value = vm.password,
                    placeholder = stringResource(R.string.password_example),
                    onValueChange = { vm.updatePassword(it) },
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Password,
                        imeAction = ImeAction.Next
                    ),
                    visualTransformation = PasswordVisualTransformation(),
                    isError = vm.passwordError != null,
                    supportingText = vm.passwordError?.let { stringResource(it) },
                )

                Spacer(modifier = Modifier.height(16.dp))

                // Confirm Password TextField
                LabelTextField(
                    modifier = Modifier.fillMaxWidth(),
                    label = stringResource(R.string.repeat_password),
                    value = vm.confirmPassword,
                    placeholder = stringResource(R.string.password_example),
                    onValueChange = { vm.updateConfirmPassword(it) },
                    keyboardOptions = KeyboardOptions(
                        keyboardType = KeyboardType.Password,
                        imeAction = ImeAction.Done,
                    ),
                    visualTransformation = PasswordVisualTransformation(),
                    isError = vm.confirmPasswordError != null,
                    supportingText = vm.confirmPasswordError?.let { stringResource(it) },
                    keyboardActions = KeyboardActions(
                        onDone = {
                            vm.register()
                        }
                    ),
                )

                vm.apiError?.let { error ->
                    Spacer(Modifier.height(16.dp))
                    Text(
                        text = error,
                        color = MaterialTheme.colorScheme.error,
                    )
                }

                Spacer(modifier = Modifier.height(24.dp))

                // Sign Up Button
                MyButton(
                    onClick = { vm.register() },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(text = stringResource(R.string.signup), fontSize = 16.sp)
                }

                Spacer(modifier = Modifier.height(8.dp))

                // Login TextButton
                TextButton(
                    onClick = { navigator.replaceAll(LoginScreen()) },
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = stringResource(R.string.already_have_account_login),
                        fontSize = 14.sp,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/theme/Color.kt
================
package com.daniela.pillbox.ui.theme
import androidx.compose.ui.graphics.Color

val primaryLight = Color(0xFF66558F)
val onPrimaryLight = Color(0xFFFFFFFF)
val primaryContainerLight = Color(0xFFE9DDFF)
val onPrimaryContainerLight = Color(0xFF4D3D75)
val secondaryLight = Color(0xFF625B70)
val onSecondaryLight = Color(0xFFFFFFFF)
val secondaryContainerLight = Color(0xFFE8DEF8)
val onSecondaryContainerLight = Color(0xFF4A4458)
val tertiaryLight = Color(0xFF8C4A60)
val onTertiaryLight = Color(0xFFFFFFFF)
val tertiaryContainerLight = Color(0xFFFFD9E2)
val onTertiaryContainerLight = Color(0xFF703349)
val errorLight = Color(0xFFBA1A1A)
val onErrorLight = Color(0xFFFFFFFF)
val errorContainerLight = Color(0xFFFFDAD6)
val onErrorContainerLight = Color(0xFF93000A)
val backgroundLight = Color(0xFFFEF7FF)
val onBackgroundLight = Color(0xFF1D1B20)
val surfaceLight = Color(0xFFFEF7FF)
val onSurfaceLight = Color(0xFF1D1B20)
val surfaceVariantLight = Color(0xFFE7E0EB)
val onSurfaceVariantLight = Color(0xFF49454E)
val outlineLight = Color(0xFF7A757F)
val outlineVariantLight = Color(0xFFCAC4CF)
val scrimLight = Color(0xFF000000)
val inverseSurfaceLight = Color(0xFF322F35)
val inverseOnSurfaceLight = Color(0xFFF5EFF7)
val inversePrimaryLight = Color(0xFFD0BCFE)
val surfaceDimLight = Color(0xFFDED8E0)
val surfaceBrightLight = Color(0xFFFEF7FF)
val surfaceContainerLowestLight = Color(0xFFFFFFFF)
val surfaceContainerLowLight = Color(0xFFF8F2FA)
val surfaceContainerLight = Color(0xFFF2ECF4)
val surfaceContainerHighLight = Color(0xFFECE6EE)
val surfaceContainerHighestLight = Color(0xFFE6E0E9)

val primaryLightMediumContrast = Color(0xFF3C2C63)
val onPrimaryLightMediumContrast = Color(0xFFFFFFFF)
val primaryContainerLightMediumContrast = Color(0xFF75649E)
val onPrimaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val secondaryLightMediumContrast = Color(0xFF393347)
val onSecondaryLightMediumContrast = Color(0xFFFFFFFF)
val secondaryContainerLightMediumContrast = Color(0xFF716A80)
val onSecondaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryLightMediumContrast = Color(0xFF5B2238)
val onTertiaryLightMediumContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightMediumContrast = Color(0xFF9D586F)
val onTertiaryContainerLightMediumContrast = Color(0xFFFFFFFF)
val errorLightMediumContrast = Color(0xFF740006)
val onErrorLightMediumContrast = Color(0xFFFFFFFF)
val errorContainerLightMediumContrast = Color(0xFFCF2C27)
val onErrorContainerLightMediumContrast = Color(0xFFFFFFFF)
val backgroundLightMediumContrast = Color(0xFFFEF7FF)
val onBackgroundLightMediumContrast = Color(0xFF1D1B20)
val surfaceLightMediumContrast = Color(0xFFFEF7FF)
val onSurfaceLightMediumContrast = Color(0xFF121016)
val surfaceVariantLightMediumContrast = Color(0xFFE7E0EB)
val onSurfaceVariantLightMediumContrast = Color(0xFF38353D)
val outlineLightMediumContrast = Color(0xFF55515A)
val outlineVariantLightMediumContrast = Color(0xFF706B75)
val scrimLightMediumContrast = Color(0xFF000000)
val inverseSurfaceLightMediumContrast = Color(0xFF322F35)
val inverseOnSurfaceLightMediumContrast = Color(0xFFF5EFF7)
val inversePrimaryLightMediumContrast = Color(0xFFD0BCFE)
val surfaceDimLightMediumContrast = Color(0xFFCAC5CC)
val surfaceBrightLightMediumContrast = Color(0xFFFEF7FF)
val surfaceContainerLowestLightMediumContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightMediumContrast = Color(0xFFF8F2FA)
val surfaceContainerLightMediumContrast = Color(0xFFECE6EE)
val surfaceContainerHighLightMediumContrast = Color(0xFFE1DBE3)
val surfaceContainerHighestLightMediumContrast = Color(0xFFD5D0D8)

val primaryLightHighContrast = Color(0xFF322258)
val onPrimaryLightHighContrast = Color(0xFFFFFFFF)
val primaryContainerLightHighContrast = Color(0xFF504078)
val onPrimaryContainerLightHighContrast = Color(0xFFFFFFFF)
val secondaryLightHighContrast = Color(0xFF2F293C)
val onSecondaryLightHighContrast = Color(0xFFFFFFFF)
val secondaryContainerLightHighContrast = Color(0xFF4C465A)
val onSecondaryContainerLightHighContrast = Color(0xFFFFFFFF)
val tertiaryLightHighContrast = Color(0xFF4F182E)
val onTertiaryLightHighContrast = Color(0xFFFFFFFF)
val tertiaryContainerLightHighContrast = Color(0xFF72354B)
val onTertiaryContainerLightHighContrast = Color(0xFFFFFFFF)
val errorLightHighContrast = Color(0xFF600004)
val onErrorLightHighContrast = Color(0xFFFFFFFF)
val errorContainerLightHighContrast = Color(0xFF98000A)
val onErrorContainerLightHighContrast = Color(0xFFFFFFFF)
val backgroundLightHighContrast = Color(0xFFFEF7FF)
val onBackgroundLightHighContrast = Color(0xFF1D1B20)
val surfaceLightHighContrast = Color(0xFFFEF7FF)
val onSurfaceLightHighContrast = Color(0xFF000000)
val surfaceVariantLightHighContrast = Color(0xFFE7E0EB)
val onSurfaceVariantLightHighContrast = Color(0xFF000000)
val outlineLightHighContrast = Color(0xFF2E2B33)
val outlineVariantLightHighContrast = Color(0xFF4B4851)
val scrimLightHighContrast = Color(0xFF000000)
val inverseSurfaceLightHighContrast = Color(0xFF322F35)
val inverseOnSurfaceLightHighContrast = Color(0xFFFFFFFF)
val inversePrimaryLightHighContrast = Color(0xFFD0BCFE)
val surfaceDimLightHighContrast = Color(0xFFBCB7BF)
val surfaceBrightLightHighContrast = Color(0xFFFEF7FF)
val surfaceContainerLowestLightHighContrast = Color(0xFFFFFFFF)
val surfaceContainerLowLightHighContrast = Color(0xFFF5EFF7)
val surfaceContainerLightHighContrast = Color(0xFFE6E0E9)
val surfaceContainerHighLightHighContrast = Color(0xFFD8D2DA)
val surfaceContainerHighestLightHighContrast = Color(0xFFCAC5CC)

val primaryDark = Color(0xFFD0BCFE)
val onPrimaryDark = Color(0xFF36265D)
val primaryContainerDark = Color(0xFF4D3D75)
val onPrimaryContainerDark = Color(0xFFE9DDFF)
val secondaryDark = Color(0xFFCCC2DB)
val onSecondaryDark = Color(0xFF332D41)
val secondaryContainerDark = Color(0xFF4A4458)
val onSecondaryContainerDark = Color(0xFFE8DEF8)
val tertiaryDark = Color(0xFFFFB0C8)
val onTertiaryDark = Color(0xFF541D32)
val tertiaryContainerDark = Color(0xFF703349)
val onTertiaryContainerDark = Color(0xFFFFD9E2)
val errorDark = Color(0xFFFFB4AB)
val onErrorDark = Color(0xFF690005)
val errorContainerDark = Color(0xFF93000A)
val onErrorContainerDark = Color(0xFFFFDAD6)
val backgroundDark = Color(0xFF141218)
val onBackgroundDark = Color(0xFFE6E0E9)
val surfaceDark = Color(0xFF141218)
val onSurfaceDark = Color(0xFFE6E0E9)
val surfaceVariantDark = Color(0xFF49454E)
val onSurfaceVariantDark = Color(0xFFCAC4CF)
val outlineDark = Color(0xFF948F99)
val outlineVariantDark = Color(0xFF49454E)
val scrimDark = Color(0xFF000000)
val inverseSurfaceDark = Color(0xFFE6E0E9)
val inverseOnSurfaceDark = Color(0xFF322F35)
val inversePrimaryDark = Color(0xFF66558F)
val surfaceDimDark = Color(0xFF141218)
val surfaceBrightDark = Color(0xFF3B383E)
val surfaceContainerLowestDark = Color(0xFF0F0D13)
val surfaceContainerLowDark = Color(0xFF1D1B20)
val surfaceContainerDark = Color(0xFF211F24)
val surfaceContainerHighDark = Color(0xFF2B292F)
val surfaceContainerHighestDark = Color(0xFF36343A)

val primaryDarkMediumContrast = Color(0xFFE4D6FF)
val onPrimaryDarkMediumContrast = Color(0xFF2B1B51)
val primaryContainerDarkMediumContrast = Color(0xFF9987C5)
val onPrimaryContainerDarkMediumContrast = Color(0xFF000000)
val secondaryDarkMediumContrast = Color(0xFFE2D8F2)
val onSecondaryDarkMediumContrast = Color(0xFF282335)
val secondaryContainerDarkMediumContrast = Color(0xFF958DA4)
val onSecondaryContainerDarkMediumContrast = Color(0xFF000000)
val tertiaryDarkMediumContrast = Color(0xFFFFD0DD)
val onTertiaryDarkMediumContrast = Color(0xFF471227)
val tertiaryContainerDarkMediumContrast = Color(0xFFC67B93)
val onTertiaryContainerDarkMediumContrast = Color(0xFF000000)
val errorDarkMediumContrast = Color(0xFFFFD2CC)
val onErrorDarkMediumContrast = Color(0xFF540003)
val errorContainerDarkMediumContrast = Color(0xFFFF5449)
val onErrorContainerDarkMediumContrast = Color(0xFF000000)
val backgroundDarkMediumContrast = Color(0xFF141218)
val onBackgroundDarkMediumContrast = Color(0xFFE6E0E9)
val surfaceDarkMediumContrast = Color(0xFF141218)
val onSurfaceDarkMediumContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkMediumContrast = Color(0xFF49454E)
val onSurfaceVariantDarkMediumContrast = Color(0xFFE1DAE5)
val outlineDarkMediumContrast = Color(0xFFB5B0BA)
val outlineVariantDarkMediumContrast = Color(0xFF938E99)
val scrimDarkMediumContrast = Color(0xFF000000)
val inverseSurfaceDarkMediumContrast = Color(0xFFE6E0E9)
val inverseOnSurfaceDarkMediumContrast = Color(0xFF2B292F)
val inversePrimaryDarkMediumContrast = Color(0xFF4F3E76)
val surfaceDimDarkMediumContrast = Color(0xFF141218)
val surfaceBrightDarkMediumContrast = Color(0xFF46434A)
val surfaceContainerLowestDarkMediumContrast = Color(0xFF08070B)
val surfaceContainerLowDarkMediumContrast = Color(0xFF1F1D22)
val surfaceContainerDarkMediumContrast = Color(0xFF29272D)
val surfaceContainerHighDarkMediumContrast = Color(0xFF343138)
val surfaceContainerHighestDarkMediumContrast = Color(0xFF3F3C43)

val primaryDarkHighContrast = Color(0xFFF5EDFF)
val onPrimaryDarkHighContrast = Color(0xFF000000)
val primaryContainerDarkHighContrast = Color(0xFFCCB9FA)
val onPrimaryContainerDarkHighContrast = Color(0xFF100032)
val secondaryDarkHighContrast = Color(0xFFF5EDFF)
val onSecondaryDarkHighContrast = Color(0xFF000000)
val secondaryContainerDarkHighContrast = Color(0xFFC8BED7)
val onSecondaryContainerDarkHighContrast = Color(0xFF0D081A)
val tertiaryDarkHighContrast = Color(0xFFFFEBEF)
val onTertiaryDarkHighContrast = Color(0xFF000000)
val tertiaryContainerDarkHighContrast = Color(0xFFFEABC5)
val onTertiaryContainerDarkHighContrast = Color(0xFF20000C)
val errorDarkHighContrast = Color(0xFFFFECE9)
val onErrorDarkHighContrast = Color(0xFF000000)
val errorContainerDarkHighContrast = Color(0xFFFFAEA4)
val onErrorContainerDarkHighContrast = Color(0xFF220001)
val backgroundDarkHighContrast = Color(0xFF141218)
val onBackgroundDarkHighContrast = Color(0xFFE6E0E9)
val surfaceDarkHighContrast = Color(0xFF141218)
val onSurfaceDarkHighContrast = Color(0xFFFFFFFF)
val surfaceVariantDarkHighContrast = Color(0xFF49454E)
val onSurfaceVariantDarkHighContrast = Color(0xFFFFFFFF)
val outlineDarkHighContrast = Color(0xFFF4EDF9)
val outlineVariantDarkHighContrast = Color(0xFFC6C0CB)
val scrimDarkHighContrast = Color(0xFF000000)
val inverseSurfaceDarkHighContrast = Color(0xFFE6E0E9)
val inverseOnSurfaceDarkHighContrast = Color(0xFF000000)
val inversePrimaryDarkHighContrast = Color(0xFF4F3E76)
val surfaceDimDarkHighContrast = Color(0xFF141218)
val surfaceBrightDarkHighContrast = Color(0xFF524F55)
val surfaceContainerLowestDarkHighContrast = Color(0xFF000000)
val surfaceContainerLowDarkHighContrast = Color(0xFF211F24)
val surfaceContainerDarkHighContrast = Color(0xFF322F35)
val surfaceContainerHighDarkHighContrast = Color(0xFF3D3A41)
val surfaceContainerHighestDarkHighContrast = Color(0xFF48464C)

================
File: app/src/main/java/com/daniela/pillbox/ui/theme/Type.kt
================
package com.daniela.pillbox.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.googlefonts.Font
import androidx.compose.ui.text.googlefonts.GoogleFont
import com.daniela.pillbox.R

val provider = GoogleFont.Provider(
    providerAuthority = "com.google.android.gms.fonts",
    providerPackage = "com.google.android.gms",
    certificates = R.array.com_google_android_gms_fonts_certs
)

val bodyFontFamily = FontFamily(
    Font(
        googleFont = GoogleFont("Roboto"),
        fontProvider = provider,
    )
)

val displayFontFamily = FontFamily(
    Font(
        googleFont = GoogleFont("Outfit"),
        fontProvider = provider,
    )
)

// Default Material 3 typography values
val baseline = Typography()

val AppTypography = Typography(
    displayLarge = baseline.displayLarge.copy(fontFamily = displayFontFamily),
    displayMedium = baseline.displayMedium.copy(fontFamily = displayFontFamily),
    displaySmall = baseline.displaySmall.copy(fontFamily = displayFontFamily),
    headlineLarge = baseline.headlineLarge.copy(fontFamily = displayFontFamily),
    headlineMedium = baseline.headlineMedium.copy(fontFamily = displayFontFamily),
    headlineSmall = baseline.headlineSmall.copy(fontFamily = displayFontFamily),
    titleLarge = baseline.titleLarge.copy(fontFamily = displayFontFamily),
    titleMedium = baseline.titleMedium.copy(fontFamily = displayFontFamily),
    titleSmall = baseline.titleSmall.copy(fontFamily = displayFontFamily),
    bodyLarge = baseline.bodyLarge.copy(fontFamily = bodyFontFamily),
    bodyMedium = baseline.bodyMedium.copy(fontFamily = bodyFontFamily),
    bodySmall = baseline.bodySmall.copy(fontFamily = bodyFontFamily),
    labelLarge = baseline.labelLarge.copy(fontFamily = bodyFontFamily),
    labelMedium = baseline.labelMedium.copy(fontFamily = bodyFontFamily),
    labelSmall = baseline.labelSmall.copy(fontFamily = bodyFontFamily),
)

================
File: app/src/main/java/com/daniela/pillbox/ui/theme/Theme.kt
================
package com.daniela.pillbox.ui.theme
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.runtime.Immutable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext

private val lightScheme = lightColorScheme(
    primary = primaryLight,
    onPrimary = onPrimaryLight,
    primaryContainer = primaryContainerLight,
    onPrimaryContainer = onPrimaryContainerLight,
    secondary = secondaryLight,
    onSecondary = onSecondaryLight,
    secondaryContainer = secondaryContainerLight,
    onSecondaryContainer = onSecondaryContainerLight,
    tertiary = tertiaryLight,
    onTertiary = onTertiaryLight,
    tertiaryContainer = tertiaryContainerLight,
    onTertiaryContainer = onTertiaryContainerLight,
    error = errorLight,
    onError = onErrorLight,
    errorContainer = errorContainerLight,
    onErrorContainer = onErrorContainerLight,
    background = backgroundLight,
    onBackground = onBackgroundLight,
    surface = surfaceLight,
    onSurface = onSurfaceLight,
    surfaceVariant = surfaceVariantLight,
    onSurfaceVariant = onSurfaceVariantLight,
    outline = outlineLight,
    outlineVariant = outlineVariantLight,
    scrim = scrimLight,
    inverseSurface = inverseSurfaceLight,
    inverseOnSurface = inverseOnSurfaceLight,
    inversePrimary = inversePrimaryLight,
    surfaceDim = surfaceDimLight,
    surfaceBright = surfaceBrightLight,
    surfaceContainerLowest = surfaceContainerLowestLight,
    surfaceContainerLow = surfaceContainerLowLight,
    surfaceContainer = surfaceContainerLight,
    surfaceContainerHigh = surfaceContainerHighLight,
    surfaceContainerHighest = surfaceContainerHighestLight,
)

private val darkScheme = darkColorScheme(
    primary = primaryDark,
    onPrimary = onPrimaryDark,
    primaryContainer = primaryContainerDark,
    onPrimaryContainer = onPrimaryContainerDark,
    secondary = secondaryDark,
    onSecondary = onSecondaryDark,
    secondaryContainer = secondaryContainerDark,
    onSecondaryContainer = onSecondaryContainerDark,
    tertiary = tertiaryDark,
    onTertiary = onTertiaryDark,
    tertiaryContainer = tertiaryContainerDark,
    onTertiaryContainer = onTertiaryContainerDark,
    error = errorDark,
    onError = onErrorDark,
    errorContainer = errorContainerDark,
    onErrorContainer = onErrorContainerDark,
    background = backgroundDark,
    onBackground = onBackgroundDark,
    surface = surfaceDark,
    onSurface = onSurfaceDark,
    surfaceVariant = surfaceVariantDark,
    onSurfaceVariant = onSurfaceVariantDark,
    outline = outlineDark,
    outlineVariant = outlineVariantDark,
    scrim = scrimDark,
    inverseSurface = inverseSurfaceDark,
    inverseOnSurface = inverseOnSurfaceDark,
    inversePrimary = inversePrimaryDark,
    surfaceDim = surfaceDimDark,
    surfaceBright = surfaceBrightDark,
    surfaceContainerLowest = surfaceContainerLowestDark,
    surfaceContainerLow = surfaceContainerLowDark,
    surfaceContainer = surfaceContainerDark,
    surfaceContainerHigh = surfaceContainerHighDark,
    surfaceContainerHighest = surfaceContainerHighestDark,
)

private val mediumContrastLightColorScheme = lightColorScheme(
    primary = primaryLightMediumContrast,
    onPrimary = onPrimaryLightMediumContrast,
    primaryContainer = primaryContainerLightMediumContrast,
    onPrimaryContainer = onPrimaryContainerLightMediumContrast,
    secondary = secondaryLightMediumContrast,
    onSecondary = onSecondaryLightMediumContrast,
    secondaryContainer = secondaryContainerLightMediumContrast,
    onSecondaryContainer = onSecondaryContainerLightMediumContrast,
    tertiary = tertiaryLightMediumContrast,
    onTertiary = onTertiaryLightMediumContrast,
    tertiaryContainer = tertiaryContainerLightMediumContrast,
    onTertiaryContainer = onTertiaryContainerLightMediumContrast,
    error = errorLightMediumContrast,
    onError = onErrorLightMediumContrast,
    errorContainer = errorContainerLightMediumContrast,
    onErrorContainer = onErrorContainerLightMediumContrast,
    background = backgroundLightMediumContrast,
    onBackground = onBackgroundLightMediumContrast,
    surface = surfaceLightMediumContrast,
    onSurface = onSurfaceLightMediumContrast,
    surfaceVariant = surfaceVariantLightMediumContrast,
    onSurfaceVariant = onSurfaceVariantLightMediumContrast,
    outline = outlineLightMediumContrast,
    outlineVariant = outlineVariantLightMediumContrast,
    scrim = scrimLightMediumContrast,
    inverseSurface = inverseSurfaceLightMediumContrast,
    inverseOnSurface = inverseOnSurfaceLightMediumContrast,
    inversePrimary = inversePrimaryLightMediumContrast,
    surfaceDim = surfaceDimLightMediumContrast,
    surfaceBright = surfaceBrightLightMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestLightMediumContrast,
    surfaceContainerLow = surfaceContainerLowLightMediumContrast,
    surfaceContainer = surfaceContainerLightMediumContrast,
    surfaceContainerHigh = surfaceContainerHighLightMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestLightMediumContrast,
)

private val highContrastLightColorScheme = lightColorScheme(
    primary = primaryLightHighContrast,
    onPrimary = onPrimaryLightHighContrast,
    primaryContainer = primaryContainerLightHighContrast,
    onPrimaryContainer = onPrimaryContainerLightHighContrast,
    secondary = secondaryLightHighContrast,
    onSecondary = onSecondaryLightHighContrast,
    secondaryContainer = secondaryContainerLightHighContrast,
    onSecondaryContainer = onSecondaryContainerLightHighContrast,
    tertiary = tertiaryLightHighContrast,
    onTertiary = onTertiaryLightHighContrast,
    tertiaryContainer = tertiaryContainerLightHighContrast,
    onTertiaryContainer = onTertiaryContainerLightHighContrast,
    error = errorLightHighContrast,
    onError = onErrorLightHighContrast,
    errorContainer = errorContainerLightHighContrast,
    onErrorContainer = onErrorContainerLightHighContrast,
    background = backgroundLightHighContrast,
    onBackground = onBackgroundLightHighContrast,
    surface = surfaceLightHighContrast,
    onSurface = onSurfaceLightHighContrast,
    surfaceVariant = surfaceVariantLightHighContrast,
    onSurfaceVariant = onSurfaceVariantLightHighContrast,
    outline = outlineLightHighContrast,
    outlineVariant = outlineVariantLightHighContrast,
    scrim = scrimLightHighContrast,
    inverseSurface = inverseSurfaceLightHighContrast,
    inverseOnSurface = inverseOnSurfaceLightHighContrast,
    inversePrimary = inversePrimaryLightHighContrast,
    surfaceDim = surfaceDimLightHighContrast,
    surfaceBright = surfaceBrightLightHighContrast,
    surfaceContainerLowest = surfaceContainerLowestLightHighContrast,
    surfaceContainerLow = surfaceContainerLowLightHighContrast,
    surfaceContainer = surfaceContainerLightHighContrast,
    surfaceContainerHigh = surfaceContainerHighLightHighContrast,
    surfaceContainerHighest = surfaceContainerHighestLightHighContrast,
)

private val mediumContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkMediumContrast,
    onPrimary = onPrimaryDarkMediumContrast,
    primaryContainer = primaryContainerDarkMediumContrast,
    onPrimaryContainer = onPrimaryContainerDarkMediumContrast,
    secondary = secondaryDarkMediumContrast,
    onSecondary = onSecondaryDarkMediumContrast,
    secondaryContainer = secondaryContainerDarkMediumContrast,
    onSecondaryContainer = onSecondaryContainerDarkMediumContrast,
    tertiary = tertiaryDarkMediumContrast,
    onTertiary = onTertiaryDarkMediumContrast,
    tertiaryContainer = tertiaryContainerDarkMediumContrast,
    onTertiaryContainer = onTertiaryContainerDarkMediumContrast,
    error = errorDarkMediumContrast,
    onError = onErrorDarkMediumContrast,
    errorContainer = errorContainerDarkMediumContrast,
    onErrorContainer = onErrorContainerDarkMediumContrast,
    background = backgroundDarkMediumContrast,
    onBackground = onBackgroundDarkMediumContrast,
    surface = surfaceDarkMediumContrast,
    onSurface = onSurfaceDarkMediumContrast,
    surfaceVariant = surfaceVariantDarkMediumContrast,
    onSurfaceVariant = onSurfaceVariantDarkMediumContrast,
    outline = outlineDarkMediumContrast,
    outlineVariant = outlineVariantDarkMediumContrast,
    scrim = scrimDarkMediumContrast,
    inverseSurface = inverseSurfaceDarkMediumContrast,
    inverseOnSurface = inverseOnSurfaceDarkMediumContrast,
    inversePrimary = inversePrimaryDarkMediumContrast,
    surfaceDim = surfaceDimDarkMediumContrast,
    surfaceBright = surfaceBrightDarkMediumContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkMediumContrast,
    surfaceContainerLow = surfaceContainerLowDarkMediumContrast,
    surfaceContainer = surfaceContainerDarkMediumContrast,
    surfaceContainerHigh = surfaceContainerHighDarkMediumContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkMediumContrast,
)

private val highContrastDarkColorScheme = darkColorScheme(
    primary = primaryDarkHighContrast,
    onPrimary = onPrimaryDarkHighContrast,
    primaryContainer = primaryContainerDarkHighContrast,
    onPrimaryContainer = onPrimaryContainerDarkHighContrast,
    secondary = secondaryDarkHighContrast,
    onSecondary = onSecondaryDarkHighContrast,
    secondaryContainer = secondaryContainerDarkHighContrast,
    onSecondaryContainer = onSecondaryContainerDarkHighContrast,
    tertiary = tertiaryDarkHighContrast,
    onTertiary = onTertiaryDarkHighContrast,
    tertiaryContainer = tertiaryContainerDarkHighContrast,
    onTertiaryContainer = onTertiaryContainerDarkHighContrast,
    error = errorDarkHighContrast,
    onError = onErrorDarkHighContrast,
    errorContainer = errorContainerDarkHighContrast,
    onErrorContainer = onErrorContainerDarkHighContrast,
    background = backgroundDarkHighContrast,
    onBackground = onBackgroundDarkHighContrast,
    surface = surfaceDarkHighContrast,
    onSurface = onSurfaceDarkHighContrast,
    surfaceVariant = surfaceVariantDarkHighContrast,
    onSurfaceVariant = onSurfaceVariantDarkHighContrast,
    outline = outlineDarkHighContrast,
    outlineVariant = outlineVariantDarkHighContrast,
    scrim = scrimDarkHighContrast,
    inverseSurface = inverseSurfaceDarkHighContrast,
    inverseOnSurface = inverseOnSurfaceDarkHighContrast,
    inversePrimary = inversePrimaryDarkHighContrast,
    surfaceDim = surfaceDimDarkHighContrast,
    surfaceBright = surfaceBrightDarkHighContrast,
    surfaceContainerLowest = surfaceContainerLowestDarkHighContrast,
    surfaceContainerLow = surfaceContainerLowDarkHighContrast,
    surfaceContainer = surfaceContainerDarkHighContrast,
    surfaceContainerHigh = surfaceContainerHighDarkHighContrast,
    surfaceContainerHighest = surfaceContainerHighestDarkHighContrast,
)

@Immutable
data class ColorFamily(
    val color: Color,
    val onColor: Color,
    val colorContainer: Color,
    val onColorContainer: Color
)

val unspecified_scheme = ColorFamily(
    Color.Unspecified, Color.Unspecified, Color.Unspecified, Color.Unspecified
)

@Composable
fun AppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = false,
    content: @Composable() () -> Unit
) {
  val colorScheme = when {
      dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
          val context = LocalContext.current
          if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
      }
      
      darkTheme -> darkScheme
      else -> lightScheme
  }

  MaterialTheme(
    colorScheme = colorScheme,
    typography = AppTypography,
    content = content
  )
}

================
File: app/src/main/java/com/daniela/pillbox/ui/components/BasicUiComponents.kt
================
package com.daniela.pillbox.ui.components

import androidx.compose.animation.core.animateFloatAsState
import androidx.compose.animation.core.tween
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.RowScope
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.widthIn
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.selection.selectable
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowDropDown
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.rounded.Check
import androidx.compose.material.icons.rounded.Warning
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.MenuDefaults
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.SegmentedButton
import androidx.compose.material3.SegmentedButtonDefaults
import androidx.compose.material3.SingleChoiceSegmentedButtonRow
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TextButton
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.material3.TimePicker
import androidx.compose.material3.TimePickerState
import androidx.compose.material3.rememberTimePickerState
import androidx.compose.runtime.Composable
import androidx.compose.runtime.MutableState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.saveable.rememberSaveable
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.VisualTransformation
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.style.TextDecoration
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.window.Dialog
import androidx.compose.ui.window.DialogProperties
import com.daniela.pillbox.utils.formatDayList
import java.util.Locale

// Contains custom components for the app

@Composable
fun LabelTextField(
    modifier: Modifier = Modifier,
    label: String = "Label",
    value: String = "Text",
    placeholder: String? = null,
    onValueChange: (String) -> Unit = {},
    keyboardOptions: KeyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
    visualTransformation: VisualTransformation = VisualTransformation.None,
    isError: Boolean = false,
    supportingText: String? = null,
    keyboardActions: KeyboardActions = KeyboardActions(),
    readOnly: Boolean = false,
    trailingIcon: @Composable (() -> Unit)? = null,
    enabled: Boolean = true,
    maxLines: Int = 1,
) {
    Column(modifier = modifier) {
        //External label
        Text(
            text = label,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Start,
            color = MaterialTheme.colorScheme.primary
        )

        // TextField
        OutlinedTextField(
            modifier = Modifier.fillMaxWidth(),
            value = value,
            onValueChange = onValueChange,
            label = null,
            placeholder = {
                if (placeholder != null)
                    Text(text = placeholder, color = MaterialTheme.colorScheme.onSurfaceVariant)
            },
            keyboardOptions = keyboardOptions,
            visualTransformation = visualTransformation,
            isError = isError,
            enabled = enabled,
            supportingText = {
                if (supportingText != null)
                    Text(text = supportingText)
            },
            maxLines = maxLines,
            keyboardActions = keyboardActions,
            shape = RoundedCornerShape(10.dp),
            singleLine = true,
            colors = TextFieldDefaults.colors(
                focusedContainerColor = MaterialTheme.colorScheme.surfaceVariant,
                unfocusedContainerColor = MaterialTheme.colorScheme.surfaceVariant,
                focusedIndicatorColor = Color.Transparent,
                unfocusedIndicatorColor = Color.Transparent,
            ),
            readOnly = readOnly,
            trailingIcon = trailingIcon
        )
    }
}

@Composable
@Preview(showBackground = true)
fun Title(modifier: Modifier = Modifier, text: String = "Text") {
    Text(
        modifier = modifier,
        text = text,
        style = MaterialTheme.typography.headlineLarge,
        fontWeight = FontWeight.Bold,
        color = MaterialTheme.colorScheme.onSurface,
    )
}

@Composable
@Preview(showBackground = true)
fun Label(modifier: Modifier = Modifier, text: String = "Text") {
    Text(
        modifier = modifier,
        text = text,
        color = MaterialTheme.colorScheme.primary,
        style = MaterialTheme.typography.titleMedium
    )
}

@Composable
@Preview(showBackground = true)
fun MyButton(
    modifier: Modifier = Modifier,
    onClick: () -> Unit = {},
    enabled: Boolean = true,
    content: @Composable (RowScope.() -> Unit) = { Text("Button") },
) {
    Button(
        onClick = onClick,
        content = content,
        modifier = modifier,
        enabled = enabled,

        shape = RoundedCornerShape(10.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = MaterialTheme.colorScheme.primary,
            contentColor = MaterialTheme.colorScheme.onPrimary,
        )
    )
}

@Composable
@Preview(showBackground = true)
fun SelectableList(
    list: List<String> = listOf("Item 1", "Item 2", "Item 3"),
    onClick: (Int) -> Unit = {},
) {
    var localSelectedIndex by remember { mutableIntStateOf(-1) }

    Surface(
        tonalElevation = 10.dp,
        shape = RoundedCornerShape(8.dp),
        modifier = Modifier.padding(horizontal = 32.dp)
    ) {
        LazyColumn(
            modifier = Modifier.padding(5.dp)
        ) {
            itemsIndexed(items = list) { index, item ->
                Row(
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier
                        .fillMaxWidth()
                        .selectable(
                            selected = localSelectedIndex == index,
                            onClick = {
                                localSelectedIndex = index
                                onClick(index)
                            },
                        )
                        .padding(8.dp)
                ) {
                    Text(
                        text = item,
                    )

                    if (localSelectedIndex == index) Icon(
                        contentDescription = "check",
                        imageVector = Icons.Default.Check,
                        tint = MaterialTheme.colorScheme.primary
                    )
                }

                if (index != list.size - 1) HorizontalDivider(
                    Modifier.fillMaxWidth(), thickness = 1.dp
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true)
fun SegmentedButtons(
    modifier: Modifier = Modifier,
    onSelected: (Int) -> Unit = {},
    btnList: List<String> = listOf("Option 1", "Option 2", "Option 3"),
) {
    var selectedIndex by remember { mutableIntStateOf(0) }

    SingleChoiceSegmentedButtonRow(
        modifier = modifier
    ) {
        btnList.forEachIndexed { i, opt ->
            SegmentedButton(
                selected = selectedIndex == i,
                onClick = {
                    selectedIndex = i
                    onSelected(i)
                },
                shape = SegmentedButtonDefaults.itemShape(
                    index = i, count = btnList.size
                ),
                icon = {}
            ) {
                Text(
                    text = opt,
                    color = MaterialTheme.colorScheme.onSurface,
                    textDecoration = if (selectedIndex == i) TextDecoration.Underline else TextDecoration.None,
                )
            }
        }
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true)
fun DropDownMenu(
    modifier: Modifier = Modifier,
    list: List<String> = listOf("Item 1", "Item 2", "Item 3"),
    onSelected: (Int) -> Unit = {},
    initialState: Boolean = false,
    label: String = "Choose an option",
    enabled: Boolean = true,
) {
    var expanded by remember { mutableStateOf(initialState) }
    var selectedIndex by rememberSaveable { mutableIntStateOf(0) }

    // Animation for dropdown icon rotation
    val rotation by animateFloatAsState(
        targetValue = if (expanded) 180f else 0f,
        animationSpec = tween(durationMillis = 200)
    )

    ExposedDropdownMenuBox(
        modifier = modifier.fillMaxWidth(),
        expanded = expanded,
        onExpandedChange = { if (enabled) expanded = !expanded },

        ) {
        LabelTextField(
            value = list[selectedIndex],
            onValueChange = {},
            readOnly = true,
            modifier = Modifier
                .menuAnchor()
                .alpha(if (enabled) 1f else 0.6f),
            label = label,
            trailingIcon = {
                Icon(
                    imageVector = Icons.Default.ArrowDropDown,
                    contentDescription = null,
                    modifier = Modifier.rotate(rotation),
                    tint = MaterialTheme.colorScheme.primary
                )
            },
            enabled = enabled
        )

        ExposedDropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false },
            modifier = Modifier.exposedDropdownSize()
        ) {
            list.forEachIndexed { index, item ->
                DropdownMenuItem(
                    text = {
                        Text(
                            text = item,
                            style = MaterialTheme.typography.bodyLarge,
                            modifier = Modifier.padding(vertical = 4.dp)
                        )
                    },
                    onClick = {
                        selectedIndex = index
                        expanded = false
                        onSelected(selectedIndex)
                    },
                    colors = MenuDefaults.itemColors(
                        textColor = if (index == selectedIndex) {
                            MaterialTheme.colorScheme.primary
                        } else {
                            MaterialTheme.colorScheme.onSurface
                        }
                    ),
                    trailingIcon = if (index == selectedIndex) {
                        {
                            Icon(
                                Icons.Rounded.Check,
                                contentDescription = "Selected",
                                tint = MaterialTheme.colorScheme.primary
                            )
                        }
                    } else null
                )
            }
        }
    }
}

@Composable
@Preview(showBackground = true)
fun FloatInputField(
    modifier: Modifier = Modifier,
    value: String = "3.3",
    onValueChange: (String) -> Unit = {},
    label: String = "",
) {
    OutlinedTextField(
        value = value,
        onValueChange = { input ->
            // Allow only valid float inputs
            if (input.isEmpty() || input.matches(Regex("^-?\\d*\\.?\\d*\$"))) {
                onValueChange(input)
            }
        },
        label = { Text(label) },
        modifier = modifier,
        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
    )
}

@Composable
@Preview(showBackground = true)
fun IntInputField(
    modifier: Modifier = Modifier,
    value: String = "4",
    onValueChange: (String) -> Unit = {},
    label: String = "",
    suffix: @Composable (() -> Unit)? = null,
) {
    OutlinedTextField(
        value = value,
        onValueChange = { input ->
            // Allow only valid integer inputs
            if (input.isEmpty() || input.matches(Regex("^-?\\d+"))) {
                onValueChange(input)
            }
        },
        label = { Text(label) },
        modifier = modifier,
        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
        suffix = suffix,

        )
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CustomTimePickerDialog(
    visibleState: MutableState<Boolean>,
    timePickerState: TimePickerState,
    onTimeSelected: (Int, Int) -> Unit,
    label: String? = "Select Time",
) {
    if (visibleState.value) {
        Dialog(
            onDismissRequest = { visibleState.value = false },
            content = {
                Box(
                    modifier = Modifier
                        .clickable { visibleState.value = false },
                    contentAlignment = Alignment.Center
                ) {
                    Card(
                        modifier = Modifier
                            .wrapContentHeight(),
                        elevation = CardDefaults.cardElevation(16.dp),
                        colors = CardDefaults.cardColors(containerColor = MaterialTheme.colorScheme.surface)
                    ) {
                        Column(
                            modifier = Modifier.padding(24.dp),
                            verticalArrangement = Arrangement.spacedBy(16.dp)
                        ) {
                            if (!label.isNullOrEmpty())
                                Text(
                                    label,
                                    style = MaterialTheme.typography.labelMedium,
                                    modifier = Modifier.padding(bottom = 8.dp)
                                )

                            TimePicker(
                                state = timePickerState,
                                modifier = Modifier.fillMaxWidth(),
                            )
                            TextButton(onClick = { visibleState.value = false }) {
                                Row(
                                    horizontalArrangement = Arrangement.End,
                                    modifier = Modifier.fillMaxWidth()
                                ) {
                                    TextButton(onClick = { visibleState.value = false }) {
                                        Text("Cancel", color = MaterialTheme.colorScheme.onSurface)
                                    }
                                    TextButton(onClick = {
                                        onTimeSelected(timePickerState.hour, timePickerState.minute)
                                        visibleState.value = false
                                    }) {
                                        Text("OK", color = MaterialTheme.colorScheme.primary)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
@Preview(showBackground = true)
fun TimePickerButton(
    modifier: Modifier = Modifier,
    label: String? = "Select Time",
    onTimeSelected: (Int, Int) -> Unit = { _, _ -> },
    initialTime: List<Int>? = null,
) {
    val visibleState = remember { mutableStateOf(false) }
    val timePickerState = rememberTimePickerState(
        initialHour = initialTime?.get(0) ?: 0,
        initialMinute = initialTime?.get(1) ?: 0
    )

    Column {
        Text(
            text = "Pick Time",
            textAlign = TextAlign.Start,
            color = MaterialTheme.colorScheme.primary
        )
        Card(
            modifier = modifier,
            shape = MaterialTheme.shapes.medium,
            onClick = {
                visibleState.value = true
            },
            colors = CardDefaults.cardColors(
                containerColor = MaterialTheme.colorScheme.surfaceVariant
            )
        ) {
            Box(contentAlignment = Alignment.Center) {
                Text(
                    text = String.format(
                        Locale.getDefault(),
                        "%02d:%02d",
                        timePickerState.hour,
                        timePickerState.minute
                    ),
                    modifier = Modifier
                        .padding(horizontal = 16.dp, vertical = 10.dp),
                    textAlign = TextAlign.Center,
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }

    CustomTimePickerDialog(
        visibleState = visibleState,
        timePickerState = timePickerState,
        onTimeSelected = onTimeSelected,
        label = label
    )
}

@Composable
fun FullScreenLoader() {
    Box(
        modifier = Modifier.fillMaxSize(),
        contentAlignment = Alignment.Center
    ) {
        CircularProgressIndicator()
    }
}

@Composable
fun DayIndicator(days: List<Int>) {
    Text(
        text = formatDayList(days),
        style = MaterialTheme.typography.bodyLarge.copy(fontWeight = FontWeight.Bold),
        color = MaterialTheme.colorScheme.onSurface,
        modifier = Modifier.padding(bottom = 8.dp)
    )
}

@Preview(showBackground = true)
@Composable
fun DeleteConfirmationDialog(
    title: String = "Title",
    description: String = "Long description",
    onDismiss: () -> Unit = {},
    onConfirm: () -> Unit = {},
) {
    Dialog(
        onDismissRequest = onDismiss,
        properties = DialogProperties(
            dismissOnBackPress = true,
            dismissOnClickOutside = true
        )
    ) {
        Surface(
            modifier = Modifier
                .widthIn(min = 280.dp, max = 560.dp)
                .padding(horizontal = 16.dp),
            shape = MaterialTheme.shapes.extraLarge,
            tonalElevation = 6.dp,
            color = MaterialTheme.colorScheme.surfaceContainerHigh
        ) {
            Column(
                modifier = Modifier.padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                // Warning icon
                Icon(
                    imageVector = Icons.Rounded.Warning,
                    contentDescription = "Warning",
                    tint = MaterialTheme.colorScheme.error,
                    modifier = Modifier.size(48.dp)
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Title
                if (title.isNotBlank())
                    Text(
                        text = title,
                        style = MaterialTheme.typography.headlineSmall,
                        color = MaterialTheme.colorScheme.onSurface
                    )

                Spacer(modifier = Modifier.height(8.dp))

                // Description
                if (description.isNotBlank())
                    Text(
                        text = description,
                        style = MaterialTheme.typography.bodyMedium,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        textAlign = TextAlign.Center
                    )

                Spacer(modifier = Modifier.height(24.dp))

                // Buttons row
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Button(
                        onClick = {
                            onConfirm()
                            onDismiss()
                        },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.errorContainer,
                            contentColor = MaterialTheme.colorScheme.onErrorContainer
                        )
                    ) {
                        Text("Delete")
                    }

                    TextButton(
                        onClick = onDismiss,
                        colors = ButtonDefaults.textButtonColors(
                            contentColor = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    ) {
                        Text("Cancel")
                    }
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/ui/components/ScreenUiComponents.kt
================
package com.daniela.pillbox.ui.components

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.LocalPharmacy
import androidx.compose.material.icons.filled.MedicalServices
import androidx.compose.material.icons.filled.Medication
import androidx.compose.material.icons.filled.MonitorHeart
import androidx.compose.material.icons.filled.RemoveRedEye
import androidx.compose.material3.Checkbox
import androidx.compose.material3.CheckboxDefaults
import androidx.compose.material3.Icon
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.daniela.pillbox.data.models.Medication
import com.daniela.pillbox.data.models.MedicationWithDocId

// TODO: redo this file. Merge this with the one in [StorageScreen]

/**
 * Represents an item in the medication list.
 */
@Composable
fun MedicationItem(
    medication: MedicationWithDocId,
    isChecked: Boolean,
    onCheckedChange: (Boolean) -> Unit,
) {
    Surface(
        tonalElevation = 10.dp,
        shape = RoundedCornerShape(10.dp),
        modifier = Modifier.fillMaxWidth(),
        border = if (isChecked) BorderStroke(2.dp, MaterialTheme.colorScheme.primary) else null
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .clickable { onCheckedChange(!isChecked) }
                .padding(vertical = 12.dp, horizontal = 10.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Time pill
            Box(
                modifier = Modifier
                    .clip(RoundedCornerShape(12.dp))
                    .background(MaterialTheme.colorScheme.primaryContainer)
                    .padding(6.dp),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "09:00",
                    style = MaterialTheme.typography.bodyLarge.copy(
                        fontWeight = FontWeight.Bold
                    ),
                    color = MaterialTheme.colorScheme.onPrimaryContainer
                )
            }

            // Medication icon
            MedicationIcon(
                iconName = "heart",
                modifier = Modifier.padding(horizontal = 16.dp)
            )

            // Medication details
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = medication.name,
                    style = MaterialTheme.typography.titleLarge
                )
                Text(
                    text = "${medication.dosage} â€¢ ${medication.instructions}",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.75f)
                )
            }

            // Checkbox
            Checkbox(
                checked = isChecked,
                onCheckedChange = null, // Handled by Row click
                colors = CheckboxDefaults.colors(
                    checkedColor = MaterialTheme.colorScheme.primary,
                    uncheckedColor = MaterialTheme.colorScheme.outline
                ),
            )
        }
    }
}

/**
 * Displays an icon representing the medication type.
 */
@Composable
fun MedicationIcon(iconName: String?, modifier: Modifier = Modifier) {
    val icon: Pair<ImageVector, Color> = when (iconName?.lowercase()) {
        "heart" -> Icons.Default.MonitorHeart to Color(0xFFE57373)
        "pill" -> Icons.Default.Medication to Color(0xFF81C784)
        "syringe" -> Icons.Default.MedicalServices to Color(0xFF64B5F6)
        "capsule" -> Icons.Default.LocalPharmacy to Color(0xFFBA68C8)
        "eye" -> Icons.Default.RemoveRedEye to Color(0xFF4FC3F7)
        else -> Icons.Default.Medication to Color(0xFF7986CB)
    }

    Icon(
        imageVector = icon.first,
        contentDescription = "Medication type",
        tint = icon.second,
        modifier = modifier.size(25.dp)
    )
}

================
File: app/src/main/java/com/daniela/pillbox/activity/AlarmActivity.kt
================
package com.daniela.pillbox.activity

import android.os.Bundle
import androidx.activity.ComponentActivity

class AlarmActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
    }
}

================
File: app/src/main/java/com/daniela/pillbox/activity/MainActivity.kt
================
package com.daniela.pillbox.activity

import android.Manifest
import android.animation.ObjectAnimator
import android.app.AlarmManager
import android.app.ComponentCaller
import android.content.ActivityNotFoundException
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.provider.Settings.ACTION_REQUEST_SCHEDULE_EXACT_ALARM
import android.view.View
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AlertDialog
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.core.animation.doOnEnd
import androidx.core.content.ContextCompat
import androidx.core.splashscreen.SplashScreen.Companion.installSplashScreen
import cafe.adriel.voyager.navigator.Navigator
import com.daniela.pillbox.ui.screens.HomeScreen
import com.daniela.pillbox.ui.theme.AppTheme

/**
 * Main activity for the app
 */
class MainActivity : ComponentActivity() {
    private val NOTIFICATION_PERMISSION_CODE = 1001
    private val EXACT_ALARM_PERMISSION_CODE = 1002

    private var pendingPermissionAction: (() -> Unit)? = null
    private var pendingDeniedAction: (() -> Unit)? = null

    fun checkAndRequestPermissions(action: () -> Unit, onDenied: (() -> Unit)? = null): Boolean {
        // Store callbacks
        pendingPermissionAction = action
        pendingDeniedAction = onDenied

        // Check notification permission (Android 13+)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU &&
            ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS)
            != PackageManager.PERMISSION_GRANTED
        ) {
            requestPermissions(
                arrayOf(Manifest.permission.POST_NOTIFICATIONS),
                NOTIFICATION_PERMISSION_CODE
            )
            return false
        }

        // Check exact alarm permission (Android 12+)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            val alarmManager = getSystemService(AlarmManager::class.java)
            if (!alarmManager.canScheduleExactAlarms()) {
                try {
                    startActivityForResult(
                        Intent(ACTION_REQUEST_SCHEDULE_EXACT_ALARM),
                        EXACT_ALARM_PERMISSION_CODE
                    )
                } catch (e: ActivityNotFoundException) {
                    showPermissionFallbackDialog()
                }
                return false
            }
        }

        // All permissions granted - execute immediately
        action.invoke()
        clearCallbacks()
        return true
    }

    private fun showPermissionFallbackDialog() {
        AlertDialog.Builder(this)
            .setTitle("Permission Required")
            .setMessage("Please enable 'Allow exact alarms' in system settings")
            .setPositiveButton("Open Settings") { _, _ ->
                startActivity(Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                    data = Uri.fromParts("package", packageName, null)
                })
            }
            .setNegativeButton("Cancel") { _, _ ->
                pendingDeniedAction?.invoke()
                clearCallbacks()
            }
            .setOnDismissListener {
                pendingDeniedAction?.invoke()
                clearCallbacks()
            }
            .show()
    }

    private fun clearCallbacks() {
        pendingPermissionAction = null
        pendingDeniedAction = null
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>,
        grantResults: IntArray,
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == NOTIFICATION_PERMISSION_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                // Notification permission granted, now check exact alarms
                checkAndRequestPermissions(
                    action = { pendingPermissionAction?.invoke() },
                    onDenied = pendingDeniedAction
                )
            } else {
                pendingDeniedAction?.invoke()
                clearCallbacks()
            }
        }
    }

    override fun onActivityResult(
        requestCode: Int,
        resultCode: Int,
        data: Intent?,
        caller: ComponentCaller,
    ) {
        super.onActivityResult(requestCode, resultCode, data, caller)
        if (requestCode == EXACT_ALARM_PERMISSION_CODE) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                val alarmManager = getSystemService(AlarmManager::class.java)
                if (alarmManager.canScheduleExactAlarms()) {
                    pendingPermissionAction?.invoke()
                } else {
                    pendingDeniedAction?.invoke()
                }
                clearCallbacks()
            }
        }
    }


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Splash screen
        installSplashScreen().apply {
            setOnExitAnimationListener { screen ->
                val zoomX = ObjectAnimator.ofFloat(screen.iconView, View.SCALE_X, .6f, .0f)
                val zoomY = ObjectAnimator.ofFloat(screen.iconView, View.SCALE_Y, .6f, .0f)

                zoomX.duration = 400L
                zoomX.doOnEnd { screen.remove() }
                zoomY.duration = 400L
                zoomY.doOnEnd { screen.remove() }

                zoomX.start()
                zoomY.start()
            }
        }

        enableEdgeToEdge()

        setContent {
            AppTheme {
                /**
                 * Content holder, this add needed padding values everywhere in the app
                 */
                Scaffold(modifier = Modifier.Companion.fillMaxSize()) { innerPadding ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(innerPadding)
                            .padding(horizontal = 16.dp)
                    ) {
                        Navigator(HomeScreen())
                    }
                }
            }
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/data/repository/MedicationRepository.kt
================
package com.daniela.pillbox.data.repository

import android.content.Context
import android.util.Log
import com.daniela.pillbox.Appwrite
import com.daniela.pillbox.BuildConfig
import com.daniela.pillbox.data.models.Medication
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.models.Schedule
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.data.models.withDocId
import io.appwrite.ID
import io.appwrite.Query
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.update

/**
 * Handles Medication_db crud operations
 */
class MedicationRepository(val ctx: Context) {
    private val _medications = MutableStateFlow<List<MedicationWithDocId>>(emptyList())
    val medications: StateFlow<List<MedicationWithDocId>> = _medications

    /**
     * Gets all medications for a specific user
     */
    suspend fun getUserMedications(userId: String) {
        val db = Appwrite.getDatabases(ctx)
        val documents = db.listDocuments(
            databaseId = BuildConfig.DATABASE_ID,
            collectionId = BuildConfig.MEDICATIONS_ID,
            queries = listOf(
                Query.equal("userId", userId)
            ),
            nestedType = Medication::class.java
        ).documents

        _medications.value = documents.map { it.data.withDocId(it.id) }
    }

    /**
     * Gets a specific medication by its document id
     */
    fun getMedication(docId: String): MedicationWithDocId? {
        return _medications.value.find { it.docId == docId }
    }

    suspend fun getUserMedicationsForToday(userId: String): List<MedicationWithDocId> {
        val db = Appwrite.getDatabases(ctx)
        // index of day of the week
        val today = java.util.Calendar.getInstance().get(java.util.Calendar.DAY_OF_WEEK) - 1
        Log.i("TAG", "getUserMedicationsForToday: today = $today")
        var meds = emptyList<MedicationWithDocId>()

        val documents = db.listDocuments(
            databaseId = BuildConfig.DATABASE_ID,
            collectionId = BuildConfig.MEDICATIONS_ID,
            queries = listOf(
                Query.equal("userId", userId),
                Query.contains("weekDays", today)
            ),
            nestedType = Medication::class.java
        ).documents

        meds = documents.map { it.data.withDocId(it.id) }
        Log.i("TAG", "getUserMedicationsForToday: meds = $meds")

        return meds
    }
    /**
     * Deletes a medication from the database and update the local medication list
     */
    suspend fun deleteUserMedication(docId: String) {
        val db = Appwrite.getDatabases(ctx)

        try {
            val res = db.deleteDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.MEDICATIONS_ID,
                documentId = docId,
            )

            if (res == true)
                _medications.update { currentList -> currentList.filter { it.docId != docId } }
        } catch (e: Exception) {
            Log.e("TAG", "deleteUserMedication: $e")
        }
    }

    /**
     * Adds a medication to the database and update the local medication list
     */
    suspend fun addUserMedication(medication: Medication) {
        val db = Appwrite.getDatabases(ctx)

        try {
            val res = db.createDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.MEDICATIONS_ID,
                documentId = ID.unique(),
                data = medication,
                nestedType = Medication::class.java
            )

            _medications.update { currentList -> currentList + res.data.withDocId(res.id) }
        } catch (e: Exception) {
            Log.e("TAG", "addUserMedication: $e")
        }
    }

    /**
     * Updates a medication in the database and update the local medication list
     */
    suspend fun updateUserMedication(medication: Medication, docId: String) {
        val db = Appwrite.getDatabases(ctx)

        try {
            val res = db.updateDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.MEDICATIONS_ID,
                documentId = docId,
                data = medication,
                nestedType = Medication::class.java
            )
            val updatedMed = res.data.withDocId(res.id)

            _medications.update { currentList ->
                currentList.map {
                    if (it.docId == docId) updatedMed else it
                }
            }

            Log.i("TAG", "updateUserMedication: update $medication")
        } catch (e: Exception) {
            Log.e("TAG", "updateUserMedication: $e")
        }

    }

    /**
     * Adds a schedule to the database
     */
    suspend fun addMedicationSchedule(schedule: Schedule): ScheduleWithDocId {
        var res: Any? = null

        val db = Appwrite.getDatabases(ctx)
        try {
            res = db.createDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.SCHEDULES_ID,
                documentId = ID.unique(),
                data = schedule,
                nestedType = Schedule::class.java
            )

            Log.i("TAG", "addMedicationSchedule: $res, $schedule")

        } catch (e: Exception) {
            Log.e("TAG", "deleteUserMedication: $e")
        }

        return ScheduleWithDocId()
    }

    /**
     * Deletes a schedule from the database
     */
    suspend fun deleteMedicationSchedule(docId: String): Boolean {
        var res: Any? = null

        val db = Appwrite.getDatabases(ctx)
        try {
            res = db.deleteDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.SCHEDULES_ID,
                documentId = docId,
            )

        } catch (e: Exception) {
            Log.e("TAG", "deleteUserMedication: $e")
        }

        return res == true
    }

    /**
     * Updates a schedule in the database
     */
    suspend fun updateMedicationSchedule(schedule: Schedule, docId: String) {
        var res: Any? = null

        val db = Appwrite.getDatabases(ctx)
        try {
            res = db.updateDocument(
                databaseId = BuildConfig.DATABASE_ID,
                collectionId = BuildConfig.SCHEDULES_ID,
                documentId = docId,
                data = schedule,
                nestedType = Schedule::class.java
            )
            Log.i("TAG", "updateMedicationSchedule: $res")
        } catch (e: Exception) {
            Log.e("TAG", "updateMedicationSchedule: $e")
        }
    }

    /**
     * Gets all schedules for a specific medication
     */
    suspend fun getMedicationSchedules(medicationId: String): List<ScheduleWithDocId> {
        val db = Appwrite.getDatabases(ctx)
        val documents = db.listDocuments(
            databaseId = BuildConfig.DATABASE_ID,
            collectionId = BuildConfig.SCHEDULES_ID,
            queries = listOf(
                Query.equal("medicationId", medicationId)
            ),
            nestedType = Schedule::class.java
        ).documents

        return documents.map { it.data.withDocId(it.id) }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/data/repository/AuthRepository.kt
================
package com.daniela.pillbox.data.repository

import android.content.Context
import android.util.Log
import com.daniela.pillbox.Appwrite
import io.appwrite.Client
import io.appwrite.ID
import io.appwrite.exceptions.AppwriteException
import io.appwrite.models.Session
import io.appwrite.models.User
import io.appwrite.services.Account
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import java.time.Instant

class AuthRepository(val ctx: Context) {
    private val _client = Appwrite.getClient(ctx)
    val client: Client get() = _client

    private val _user = MutableStateFlow<User<Map<String, Any>>?>(null)
    val user: StateFlow<User<Map<String, Any>>?> get() = _user.asStateFlow()

    private val _session = MutableStateFlow<Session?>(null)
    val session: StateFlow<Session?> = _session.asStateFlow()

    suspend fun register(email: String, password: String, name: String): Boolean {
        val account = Account(client)

        return try {
            // Create the user
            val user = account.create(ID.unique(), email, password, name)
            _user.value = user
            Log.d("AccountService", "User created: $user")

            true
        } catch (e: AppwriteException) {
            _user.value = null
            Log.e("AccountService", "Registration error", e)

            false
        }
    }

    suspend fun login(email: String, password: String): Boolean {
        val account = Account(client)

        return try {
            val session = account.createEmailPasswordSession(email, password)
            _session.value = session
            Log.d("AccountService", "Session created: $session")

            true
        } catch (e: AppwriteException) {
            Log.e("AccountService", "Login error", e)
            _session.value = null
            false
        }
    }

    suspend fun getLoggedInUser(): User<Map<String, Any>>? {
        val account = Account(client)

        return try {
            refreshSession()

            val user = account.get()
            _user.value = user
            Log.d("AccountService", "User retrieved: $user")
            return user
        } catch (e: AppwriteException) {
            _user.value = null
            Log.e("AccountService", "Error retrieving user", e)
            null
        }
    }

    private fun isSessionExpired(session: Session): Boolean {
        return try {
            val expiryDate = Instant.parse(session.expire)
            Instant.now().isAfter(expiryDate)
        } catch (e: Exception) {
            true // If we can't parse the date, assume expired
        }
    }

    suspend fun refreshSession() {
        val account = Account(client)

        val session = account.getSession("current")
        if (isSessionExpired(session)) {
            account.updateSession(session.id)
            true
        }
    }

    suspend fun logout() {
        val account = Account(client)

        try {
            account.deleteSession("current")
            Log.d("AccountService", "Logged out successfully")
        } catch (e: AppwriteException) {
            Log.e("AccountService", "Logout error", e)
        }
    }
}

================
File: app/src/main/java/com/daniela/pillbox/data/module/StorageModule.kt
================
package com.daniela.pillbox.data.module

import android.content.Context
import androidx.lifecycle.SavedStateHandle
import com.daniela.pillbox.data.models.MedicationWithDocId
import com.daniela.pillbox.data.models.ScheduleWithDocId
import com.daniela.pillbox.data.repository.MedicationRepository
import com.daniela.pillbox.viewmodels.AddMedicationViewModel
import com.daniela.pillbox.viewmodels.AddScheduleViewModel
import com.daniela.pillbox.viewmodels.MedicationDetailsViewModel
import com.daniela.pillbox.viewmodels.StorageViewModel
import org.koin.android.ext.koin.androidContext
import org.koin.dsl.module

/**
 * Koin module for handling the db crud operations.
 */
val storageModule = module {
    single { MedicationRepository(androidContext()) }

    factory { (ctx: Context, savedStateHandle: SavedStateHandle) ->
        StorageViewModel(
            authRepository = get(),
            medsRepository = get(),
            ctx = ctx
        )
    }

    factory { (ctx: Context, savedStateHandle: SavedStateHandle, medicationToEdit: MedicationWithDocId) ->
        AddMedicationViewModel(
            authRepository = get(),
            medsRepository = get(),
            savedStateHandle = savedStateHandle,
            medicationToEdit = medicationToEdit,
        )
    }

    factory { (ctx: Context, med: MedicationWithDocId) ->
        MedicationDetailsViewModel(
            med = med,
            medsRepository = get()
        )
    }

    factory { (ctx: Context, medicationId: String, schedulesToEdit: List<ScheduleWithDocId>?) ->
        AddScheduleViewModel(
            medsRepository = get(),
            medicationId = medicationId,
            schedulesToEdit = schedulesToEdit
        )
    }
}

================
File: app/src/main/java/com/daniela/pillbox/data/module/AlarmModule.kt
================
package com.daniela.pillbox.data.module

import com.daniela.pillbox.utils.AlarmScheduler
import com.daniela.pillbox.viewmodels.AlarmViewModel
import org.koin.dsl.module

/**
 * Koin module for handling the alarm operations.
 */
val alarmModule = module {
    single { AlarmScheduler(get()) }
    factory { AlarmViewModel(get(), get(), get()) }
}

================
File: app/src/main/java/com/daniela/pillbox/data/module/AuthModule.kt
================
package com.daniela.pillbox.data.module

import android.content.Context
import com.daniela.pillbox.data.repository.AuthRepository
import com.daniela.pillbox.utils.Helper
import com.daniela.pillbox.viewmodels.AuthViewModel
import com.daniela.pillbox.viewmodels.HomeViewModel
import com.daniela.pillbox.viewmodels.LoginViewModel
import com.daniela.pillbox.viewmodels.RegisterViewModel
import org.koin.android.ext.koin.androidContext
import org.koin.androidx.viewmodel.dsl.viewModel
import org.koin.dsl.module

/**
 * Koin module for handling the authentication operations.
 */
val authModule = module {
    single { AuthRepository(androidContext()) }
    single { Helper(androidContext()) }
    viewModel { AuthViewModel(get()) }

    factory { (ctx: Context) ->
        RegisterViewModel(authRepository = get(), authErrorHandler = get(), ctx = ctx)
    }

    factory { (ctx: Context) ->
        LoginViewModel(authRepository = get(), authErrorHandler = get(), ctx = ctx)
    }

    factory { (ctx: Context) ->
        HomeViewModel(authRepository = get(), alarmScheduler = get(), medsRepository = get(), ctx = ctx)
    }
}

================
File: app/src/main/java/com/daniela/pillbox/data/models/DTOs.kt
================
package com.daniela.pillbox.data.models

import java.io.Serializable

// Objects for transferring data

/**
 * Interface for medication objects.
 */
interface BaseMedication {
    val userId: String
    val name: String
    val dosage: String
    val dosageUnit: String
    val type: String
    val stock: Int?
    val instructions: String?
    val notes: String?
    val color: String?
}

/**
 * Medication object.
 */
data class Medication(
    override val userId: String,
    override val name: String,
    override val dosage: String,
    override val dosageUnit: String,
    override val type: String,
    override val stock: Int? = null,
    override val instructions: String? = null,
    override val notes: String? = null,
    override val color: String? = null,
) : BaseMedication, Serializable

/**
 * Adds a document ID to a Medication object.
 */
fun Medication.withDocId(docId: String) = MedicationWithDocId(
    docId = docId,
    userId = this.userId,
    name = this.name,
    dosage = this.dosage,
    dosageUnit = this.dosageUnit,
    type = this.type,
    stock = this.stock,
    instructions = this.instructions,
    notes = this.notes,
    color = this.color
)

/**
 * Medication object with a document ID.
 */
data class MedicationWithDocId(
    val docId: String? = null,
    override val userId: String,
    override val name: String,
    override val dosage: String,
    override val dosageUnit: String,
    override val type: String,
    override val stock: Int? = null,
    override val instructions: String? = null,
    override val notes: String? = null,
    override val color: String? = null,
) : BaseMedication, Serializable

/**
 * Converts a MedicationWithDocId object to a Medication object.
 */
fun MedicationWithDocId.toMedication() = Medication(
    userId = this.userId,
    name = this.name,
    dosage = this.dosage,
    dosageUnit = this.dosageUnit,
    type = this.type,
    stock = this.stock,
    instructions = this.instructions,
    notes = this.notes,
    color = this.color
)

/**
 * Interface for schedule objects.
 */
interface BaseSchedule {
    val weekDays: List<Int>?
    val times: List<String>?
    val amounts: List<Int>?
    val asNeeded: Boolean
    val medicationId: String
}

/**
 * Schedule object.
 */
data class Schedule(
    override val weekDays: List<Int>? = null, // 0 - 6
    override val times: List<String>? = null,
    override val amounts: List<Int>? = null,
    override val asNeeded: Boolean = false,
    override val medicationId: String = "",
) : BaseSchedule, Serializable

/**
 * Schedule object with a document ID.
 */
data class ScheduleWithDocId(
    val docId: String? = null,
    override val weekDays: List<Int>? = null,
    override val times: List<String>? = listOf("00:00"),
    override val amounts: List<Int>? = listOf(1),
    override val asNeeded: Boolean = false,
    override val medicationId: String = "",
) : BaseSchedule, Serializable

/**
 * Adds a document ID to a Schedule object.
 */
fun Schedule.withDocId(docId: String) = ScheduleWithDocId(
    docId = docId,
    weekDays = this.weekDays,
    times = this.times,
    amounts = this.amounts,
    asNeeded = this.asNeeded,
    medicationId = this.medicationId
)

/**
 * Converts a ScheduleWithDocId object to a Schedule object.
 */
fun ScheduleWithDocId.toSchedule() = Schedule(
    weekDays = this.weekDays,
    times = this.times,
    amounts = this.amounts,
    asNeeded = this.asNeeded,
    medicationId = this.medicationId
)
